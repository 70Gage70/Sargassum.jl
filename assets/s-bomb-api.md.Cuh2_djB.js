import{_ as l,c as n,a4 as a,j as s,a as t,G as o,B as r,o as d}from"./chunks/framework.CIT3Sm_W.js";const Ke=JSON.parse('{"title":"SargassumBOMB API","description":"","frontmatter":{},"headers":[],"relativePath":"s-bomb-api.md","filePath":"s-bomb-api.md","lastUpdated":null}'),p={name:"s-bomb-api.md"},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},W={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""},$={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},Y={class:"jldocstring custom-block",open:""},Z={class:"jldocstring custom-block",open:""},ee={class:"jldocstring custom-block",open:""},se={class:"jldocstring custom-block",open:""},ae={class:"jldocstring custom-block",open:""},te={class:"jldocstring custom-block",open:""},ie={class:"jldocstring custom-block",open:""},oe={class:"jldocstring custom-block",open:""},le={class:"jldocstring custom-block",open:""},ne={class:"jldocstring custom-block",open:""},re={class:"jldocstring custom-block",open:""},de={class:"jldocstring custom-block",open:""},pe={class:"jldocstring custom-block",open:""},ce={class:"jldocstring custom-block",open:""},ue={class:"jldocstring custom-block",open:""},ge={class:"jldocstring custom-block",open:""},he={class:"jldocstring custom-block",open:""},me={class:"jldocstring custom-block",open:""},be={class:"jldocstring custom-block",open:""},fe={class:"jldocstring custom-block",open:""},ke={class:"jldocstring custom-block",open:""},ye={class:"jldocstring custom-block",open:""},Be={class:"jldocstring custom-block",open:""},ve={class:"jldocstring custom-block",open:""},je={class:"jldocstring custom-block",open:""},Se={class:"jldocstring custom-block",open:""},Me={class:"jldocstring custom-block",open:""},Te={class:"jldocstring custom-block",open:""},Oe={class:"jldocstring custom-block",open:""},Ee={class:"jldocstring custom-block",open:""},Ce={class:"jldocstring custom-block",open:""},xe={class:"jldocstring custom-block",open:""},Ae={class:"jldocstring custom-block",open:""},Re={class:"jldocstring custom-block",open:""},Fe={class:"jldocstring custom-block",open:""},we={class:"jldocstring custom-block",open:""},Le={class:"jldocstring custom-block",open:""},Ie={class:"jldocstring custom-block",open:""},_e={class:"jldocstring custom-block",open:""},De={class:"jldocstring custom-block",open:""},Pe={class:"jldocstring custom-block",open:""},qe={class:"jldocstring custom-block",open:""},Ne={class:"jldocstring custom-block",open:""};function Ge(Ue,e,Ve,We,ze,Qe){const i=r("Badge");return d(),n("div",null,[e[252]||(e[252]=a('<h1 id="SargassumBOMB-API" tabindex="-1">SargassumBOMB API <a class="header-anchor" href="#SargassumBOMB-API" aria-label="Permalink to &quot;SargassumBOMB API {#SargassumBOMB-API}&quot;">​</a></h1><p>These are the full docstrings for SargassumBOMB.jl.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#SargassumBOMB.EARTH_RADIUS"><code>SargassumBOMB.EARTH_RADIUS</code></a></li><li><a href="#SargassumBOMB.EQR"><code>SargassumBOMB.EQR</code></a></li><li><a href="#SargassumBOMB.LAND_ITP"><code>SargassumBOMB.LAND_ITP</code></a></li><li><a href="#SargassumBOMB.NUTRIENTS_ITP"><code>SargassumBOMB.NUTRIENTS_ITP</code></a></li><li><a href="#SargassumBOMB.STOKES_ITP"><code>SargassumBOMB.STOKES_ITP</code></a></li><li><a href="#SargassumBOMB.TEMPERATURE_ITP"><code>SargassumBOMB.TEMPERATURE_ITP</code></a></li><li><a href="#SargassumBOMB.T_REF"><code>SargassumBOMB.T_REF</code></a></li><li><a href="#SargassumBOMB.UNITS"><code>SargassumBOMB.UNITS</code></a></li><li><a href="#SargassumBOMB.WATER_ITP"><code>SargassumBOMB.WATER_ITP</code></a></li><li><a href="#SargassumBOMB.WAVES_ITP"><code>SargassumBOMB.WAVES_ITP</code></a></li><li><a href="#SargassumBOMB.WIND_ITP"><code>SargassumBOMB.WIND_ITP</code></a></li><li><a href="#SargassumBOMB.AbstractConnections"><code>SargassumBOMB.AbstractConnections</code></a></li><li><a href="#SargassumBOMB.AbstractGrowthDeathModel"><code>SargassumBOMB.AbstractGrowthDeathModel</code></a></li><li><a href="#SargassumBOMB.AbstractLand"><code>SargassumBOMB.AbstractLand</code></a></li><li><a href="#SargassumBOMB.AbstractSpring"><code>SargassumBOMB.AbstractSpring</code></a></li><li><a href="#SargassumBOMB.BOMBSpring"><code>SargassumBOMB.BOMBSpring</code></a></li><li><a href="#SargassumBOMB.BrooksModel"><code>SargassumBOMB.BrooksModel</code></a></li><li><a href="#SargassumBOMB.BrooksModelParameters"><code>SargassumBOMB.BrooksModelParameters</code></a></li><li><a href="#SargassumBOMB.ClumpParameters"><code>SargassumBOMB.ClumpParameters</code></a></li><li><a href="#SargassumBOMB.ConnectionsFull"><code>SargassumBOMB.ConnectionsFull</code></a></li><li><a href="#SargassumBOMB.ConnectionsNearest"><code>SargassumBOMB.ConnectionsNearest</code></a></li><li><a href="#SargassumBOMB.ConnectionsNone"><code>SargassumBOMB.ConnectionsNone</code></a></li><li><a href="#SargassumBOMB.ConnectionsRadius"><code>SargassumBOMB.ConnectionsRadius</code></a></li><li><a href="#SargassumBOMB.EquirectangularReference"><code>SargassumBOMB.EquirectangularReference</code></a></li><li><a href="#SargassumBOMB.GriddedField"><code>SargassumBOMB.GriddedField</code></a></li><li><a href="#SargassumBOMB.HookeSpring"><code>SargassumBOMB.HookeSpring</code></a></li><li><a href="#SargassumBOMB.ImmortalModel"><code>SargassumBOMB.ImmortalModel</code></a></li><li><a href="#SargassumBOMB.InitialConditions"><code>SargassumBOMB.InitialConditions</code></a></li><li><a href="#SargassumBOMB.InterpolatedField"><code>SargassumBOMB.InterpolatedField</code></a></li><li><a href="#SargassumBOMB.Land"><code>SargassumBOMB.Land</code></a></li><li><a href="#SargassumBOMB.LossFunction"><code>SargassumBOMB.LossFunction</code></a></li><li><a href="#SargassumBOMB.NoLand"><code>SargassumBOMB.NoLand</code></a></li><li><a href="#SargassumBOMB.RaftParameters"><code>SargassumBOMB.RaftParameters</code></a></li><li><a href="#SargassumBOMB.RaftTrajectory"><code>SargassumBOMB.RaftTrajectory</code></a></li><li><a href="#SargassumBOMB.TimeSeries"><code>SargassumBOMB.TimeSeries</code></a></li><li><a href="#SargassumBOMB.Trajectory"><code>SargassumBOMB.Trajectory</code></a></li><li><a href="#Base.vec-Tuple{SargassumBOMB.TimeSeries}"><code>Base.vec</code></a></li><li><a href="#SargassumBOMB.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"><code>SargassumBOMB.FastRaft!</code></a></li><li><a href="#SargassumBOMB.Leeway!-Tuple{Any, Any, RaftParameters, Any}"><code>SargassumBOMB.Leeway!</code></a></li><li><a href="#SargassumBOMB.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>SargassumBOMB.Raft!</code></a></li><li><a href="#SargassumBOMB.add_derivatives!-Tuple{InterpolatedField}"><code>SargassumBOMB.add_derivatives!</code></a></li><li><a href="#SargassumBOMB.add_field!-Union{Tuple{I}, Tuple{N}, Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}} where {N, I&lt;:Integer}"><code>SargassumBOMB.add_field!</code></a></li><li><a href="#SargassumBOMB.add_spatial_dimension!-Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}"><code>SargassumBOMB.add_spatial_dimension!</code></a></li><li><a href="#SargassumBOMB.add_temporal_dimension!-Union{Tuple{N}, Tuple{GriddedField, String, String, Symbol, Dates.DateTime, Unitful.FreeUnits{N, 𝐓, nothing}}} where N"><code>SargassumBOMB.add_temporal_dimension!</code></a></li><li><a href="#SargassumBOMB.bins-Tuple{RaftTrajectory, SargassumDistribution}"><code>SargassumBOMB.bins</code></a></li><li><a href="#SargassumBOMB.bins-Tuple{RaftTrajectory, StepRangeLen, StepRangeLen}"><code>SargassumBOMB.bins</code></a></li><li><a href="#SargassumBOMB.check_itp-Tuple{InterpolatedField}"><code>SargassumBOMB.check_itp</code></a></li><li><a href="#SargassumBOMB.check_land-Tuple{InterpolatedField}"><code>SargassumBOMB.check_land</code></a></li><li><a href="#SargassumBOMB.clump_i-Tuple{Matrix{Float64}, Integer}"><code>SargassumBOMB.clump_i</code></a></li><li><a href="#SargassumBOMB.com-Tuple{Matrix{Float64}}"><code>SargassumBOMB.com</code></a></li><li><a href="#SargassumBOMB.datetime2time-Tuple{Dates.DateTime}"><code>SargassumBOMB.datetime2time</code></a></li><li><a href="#SargassumBOMB.dxdy_MR-Tuple{Tuple{Real, Real}, ClumpParameters}"><code>SargassumBOMB.dxdy_MR</code></a></li><li><a href="#SargassumBOMB.grow!-Tuple{SciMLBase.DEIntegrator}"><code>SargassumBOMB.grow!</code></a></li><li><a href="#SargassumBOMB.itps_default_construct-Tuple{}"><code>SargassumBOMB.itps_default_construct</code></a></li><li><a href="#SargassumBOMB.itps_load-Tuple{String}"><code>SargassumBOMB.itps_load</code></a></li><li><a href="#SargassumBOMB.kill!-Tuple{SciMLBase.DEIntegrator, Integer}"><code>SargassumBOMB.kill!</code></a></li><li><a href="#SargassumBOMB.optimize!-Tuple{Function, Vector{&lt;:Tuple{Real, Real}}}"><code>SargassumBOMB.optimize!</code></a></li><li><a href="#SargassumBOMB.ranges_increasing!-Tuple{GriddedField}"><code>SargassumBOMB.ranges_increasing!</code></a></li><li><a href="#SargassumBOMB.rk4-Tuple{RaftParameters}"><code>SargassumBOMB.rk4</code></a></li><li><a href="#SargassumBOMB.rtr2mat-Tuple{RaftTrajectory, String}"><code>SargassumBOMB.rtr2mat</code></a></li><li><a href="#SargassumBOMB.rtr2nc-Tuple{RaftTrajectory, String, StepRangeLen, StepRangeLen}"><code>SargassumBOMB.rtr2nc</code></a></li><li><a href="#SargassumBOMB.rtr2nc-Tuple{RaftTrajectory, String, SargassumDistribution}"><code>SargassumBOMB.rtr2nc</code></a></li><li><a href="#SargassumBOMB.simulate-Tuple{RaftParameters}"><code>SargassumBOMB.simulate</code></a></li><li><a href="#SargassumBOMB.sph2xy-Tuple{Real, Real}"><code>SargassumBOMB.sph2xy</code></a></li><li><a href="#SargassumBOMB.sph2xy!-Tuple{GriddedField}"><code>SargassumBOMB.sph2xy!</code></a></li><li><a href="#SargassumBOMB.time2datetime-Tuple{Real}"><code>SargassumBOMB.time2datetime</code></a></li><li><a href="#SargassumBOMB.time2ymw-Tuple{Real}"><code>SargassumBOMB.time2ymw</code></a></li><li><a href="#SargassumBOMB.time_slice-Tuple{Trajectory, Tuple{Real, Real}}"><code>SargassumBOMB.time_slice</code></a></li><li><a href="#SargassumBOMB.trajectory-Tuple{RaftTrajectory}"><code>SargassumBOMB.trajectory</code></a></li><li><a href="#SargassumBOMB.trajectory!-Tuple{Axis, Trajectory}"><code>SargassumBOMB.trajectory!</code></a></li><li><a href="#SargassumBOMB.trajectory!-Tuple{Axis, Vector{&lt;:Vector{&lt;:Real}}, Vector{&lt;:Real}}"><code>SargassumBOMB.trajectory!</code></a></li><li><a href="#SargassumBOMB.trajectory!-Tuple{Axis, RaftTrajectory}"><code>SargassumBOMB.trajectory!</code></a></li><li><a href="#SargassumBOMB.trajectory_hist!-Tuple{Axis, RaftTrajectory, SargassumDistribution, Integer}"><code>SargassumBOMB.trajectory_hist!</code></a></li><li><a href="#SargassumBOMB.trajectory_hist!-Tuple{Axis, Vector{&lt;:RaftTrajectory}, StepRangeLen, StepRangeLen}"><code>SargassumBOMB.trajectory_hist!</code></a></li><li><a href="#SargassumBOMB.vec2range-Tuple{Vector{&lt;:Real}}"><code>SargassumBOMB.vec2range</code></a></li><li><a href="#SargassumBOMB.xy2sph-Tuple{Real, Real}"><code>SargassumBOMB.xy2sph</code></a></li><li><a href="#SargassumBOMB.ymw2time-Tuple{Integer, Integer, Integer}"><code>SargassumBOMB.ymw2time</code></a></li><li><a href="#SargassumBOMB.ymwplusweek-Tuple{Any, Any}"><code>SargassumBOMB.ymwplusweek</code></a></li><li><a href="#SargassumBOMB.ymwspan2weekspan-Tuple{Tuple{Integer, Integer, Integer}, Tuple{Integer, Integer, Integer}}"><code>SargassumBOMB.ymwspan2weekspan</code></a></li><li><a href="#SargassumBOMB.ΔL-Tuple{SargassumDistribution}"><code>SargassumBOMB.ΔL</code></a></li><li><a href="#SargassumBOMB.ΔL-Tuple{InitialConditions}"><code>SargassumBOMB.ΔL</code></a></li><li><a href="#SargassumBOMB.ΔL-Tuple{AbstractRange, AbstractRange}"><code>SargassumBOMB.ΔL</code></a></li><li><a href="#SargassumBOMB.γ_sphere-Tuple{Real}"><code>SargassumBOMB.γ_sphere</code></a></li><li><a href="#SargassumBOMB.τ_sphere-Tuple{Real}"><code>SargassumBOMB.τ_sphere</code></a></li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2>',5)),s("details",c,[s("summary",null,[e[0]||(e[0]=s("a",{id:"Base.vec-Tuple{SargassumBOMB.TimeSeries}",href:"#Base.vec-Tuple{SargassumBOMB.TimeSeries}"},[s("span",{class:"jlbinding"},"Base.vec")],-1)),e[1]||(e[1]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[2]||(e[2]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SargassumBOMB.TimeSeries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return <code>(simulation, target)</code> where <code>simulation[i]</code> is a list of points <code>[lon_i, lat_i, ts.simulation[i]]</code> and similarly for <code>target</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/optimization.jl#L94-L98" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",u,[s("summary",null,[e[3]||(e[3]=s("a",{id:"SargassumBOMB.FastRaft!-Tuple{Any, Any, RaftParameters, Any}",href:"#SargassumBOMB.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"},[s("span",{class:"jlbinding"},"SargassumBOMB.FastRaft!")],-1)),e[4]||(e[4]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[5]||(e[5]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FastRaft!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(du, u, p, t)</span></span></code></pre></div><p>When integrated, produces a result (nearly) identical to <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Raft!</code></a>, but is generally faster at the expense of a more front-loaded computation due to the requirement of additional interpolants.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/physics.jl#L52-L57" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",g,[s("summary",null,[e[6]||(e[6]=s("a",{id:"SargassumBOMB.Leeway!-Tuple{Any, Any, RaftParameters, Any}",href:"#SargassumBOMB.Leeway!-Tuple{Any, Any, RaftParameters, Any}"},[s("span",{class:"jlbinding"},"SargassumBOMB.Leeway!")],-1)),e[7]||(e[7]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[8]||(e[8]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Leeway!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(du, u, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RaftParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t)</span></span></code></pre></div><p>Compute the right-hand-side of the differential equation controlling the motion of raft particles whose velocities are equal to <code>u = v_water + α v_wind</code>.</p><p>The parameters <code>p</code> are given by <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftParameters"><code>RaftParameters</code></a>, but only <code>p.α</code> is used.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/physics.jl#L87-L94" target="_blank" rel="noreferrer">source</a></p>',4))]),s("details",h,[s("summary",null,[e[9]||(e[9]=s("a",{id:"SargassumBOMB.Raft!-Tuple{Any, Any, RaftParameters, Any}",href:"#SargassumBOMB.Raft!-Tuple{Any, Any, RaftParameters, Any}"},[s("span",{class:"jlbinding"},"SargassumBOMB.Raft!")],-1)),e[10]||(e[10]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[11]||(e[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Raft!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(du, u, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RaftParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t)</span></span></code></pre></div><p>Compute the right-hand-side of the differential equation controlling the motion of a raft with parameters given by <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftParameters"><code>RaftParameters</code></a>.</p><p>The solution vector <code>u</code> is a <code>2 x N</code> <code>Matrix</code> of the form <code>[x1 x2 ... xN ; y1 y2 ... yN]</code> giving the coordinates of each clump.</p><p>For integrating using a leeway velocity, <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Leeway!-Tuple{Any, Any, RaftParameters, Any}"><code>Leeway!</code></a> should be used.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/physics.jl#L1-L10" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",m,[s("summary",null,[e[12]||(e[12]=s("a",{id:"SargassumBOMB.add_derivatives!-Tuple{InterpolatedField}",href:"#SargassumBOMB.add_derivatives!-Tuple{InterpolatedField}"},[s("span",{class:"jlbinding"},"SargassumBOMB.add_derivatives!")],-1)),e[13]||(e[13]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[14]||(e[14]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_derivatives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itrf; interpolant_type, extrapolate_value, xyt_names, vxvy_names, Dx_Dy_vort_names)</span></span></code></pre></div><p>Add three additional fields to <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.InterpolatedField"><code>InterpolatedField</code></a>, namely the x and y components of the material derivative and the vorticity.</p><p><strong>Arguments</strong></p><ul><li><code>itrf</code>: An <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.InterpolatedField"><code>InterpolatedField</code></a>. The field should have <code>x</code>, <code>y</code> and <code>t</code> variables along with <code>x</code> and <code>y</code> components of the corresponding field (e.g. water currents.)</li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>interpolant_type</code>: Two convenience flags are provided, <code>&quot;cubic&quot;</code> and <code>&quot;nearest&quot;</code> which refer to cubic BSpline and nearest-neighbor interpolation, respectively. Alternatively, any <code>Interpolations.InterpolationType</code> can be provided. Default <code>&quot;cubic&quot;</code>.</p></li><li><p><code>extrapolate_value</code>: A constant extrapolation is performed with this value. Default <code>&quot;0.0&quot;</code>.</p></li><li><p><code>xyt_names</code>: A <code>Tuple</code> with three symbols, corresponding to the <code>x</code>,<code>y</code> and <code>t</code> variables in that order. Default <code>(:x, :y, :t)</code>.</p></li><li><p><code>vxvy_names</code>: A <code>Tuple</code> with two symbols, corresponding to the <code>x</code> and <code>y</code> components of the vector field, in that order. Default <code>(:u, :v)</code>.</p></li><li><p><code>Dx_Dy_vort_names</code>: A <code>Tuple</code> with three symbols, corresponding to the <code>x</code> component of the material derivative, the <code>y</code> component of the material derivative and the vorticity, in that order. Default <code>(:DDt_x, :DDt_y, :vorticity)</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-core.jl#L364-L384" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",b,[s("summary",null,[e[15]||(e[15]=s("a",{id:"SargassumBOMB.add_field!-Union{Tuple{I}, Tuple{N}, Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}} where {N, I<:Integer}",href:"#SargassumBOMB.add_field!-Union{Tuple{I}, Tuple{N}, Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}} where {N, I<:Integer}"},[s("span",{class:"jlbinding"},"SargassumBOMB.add_field!")],-1)),e[16]||(e[16]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[17]||(e[17]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_field!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf, infile, field_name_in, field_name_out, field_units_in, field_units_out; take_axes, permutation, scale_factor_name, add_offset_name, missings_name, missings_replacement)</span></span></code></pre></div><p>Add a new field to <code>gf::GriddedField</code> with data read from a NetCDF or MAT file <code>infile</code>.</p><p>The new dimension appears last in the list of field names.</p><p><strong>Arguments</strong></p><ul><li><p><code>gf</code>: The <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.GriddedField"><code>GriddedField</code></a> to be modified.</p></li><li><p><code>infile</code>: The path to the NetCDF/MAT file.</p></li><li><p><code>field_name_in</code>: A <code>String</code> giving the name of the field to read in as it appears in the NetCDF/MAT file.</p></li><li><p><code>field_name_out</code>: A <code>Symbol</code> giving the name of the added field in <code>gf</code>.</p></li><li><p><code>field_units_in</code>: A <code>Unitful.Unitlike</code> giving the units of the field as they appear in the NetCDF/MAT file.</p></li><li><p><code>field_units_out</code>: A <code>String</code> giving the kind of quantity being read; should be one of <code>keys(UNITS)</code>.</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>take_axes</code>: If provided, only the selected elements will be taken via <code>field[take_axes...]</code>. For example, if the <code>field</code> is four dimensional, passing <code>take_axes = [:,:,1,:]</code> would result in a three dimensional field with dimensions 1, 2 and 4 preserved - indexed on the first element of the third dimension. Default <code>nothing</code>.</p></li><li><p><code>permutation</code>: If provided, the field will be permuted according to <code>permutation</code>. Applied AFTER <code>take_axes</code>. Default <code>nothing</code>.</p></li><li><p><code>scale_factor_name</code>: The name of the scale factor, only for NetCDF files. If no scale factor is found, it is taken to be <code>1</code>. Default <code>&quot;scale_factor&quot;</code>.</p></li><li><p><code>add_offset_name</code>: The name of the additive offset, only for NetCDF files. If no additive offset is found, it is taken to be <code>0</code>. Default <code>&quot;add_offset&quot;</code>.</p></li><li><p><code>missings_name</code>: A vector of names of missing/fill/extra values, only for NetCDF files. Each such value will be replaced by <code>missings_replacement</code> if found. Default <code>[&quot;_FillValue&quot;, &quot;missing_value&quot;]</code>.</p></li><li><p><code>missings_replacement</code>: <code>missings_name</code> replaces the missing/fill/extra values with this. Default <code>0.0</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-core.jl#L161-L185" target="_blank" rel="noreferrer">source</a></p>',8))]),s("details",f,[s("summary",null,[e[18]||(e[18]=s("a",{id:"SargassumBOMB.add_spatial_dimension!-Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}",href:"#SargassumBOMB.add_spatial_dimension!-Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}"},[s("span",{class:"jlbinding"},"SargassumBOMB.add_spatial_dimension!")],-1)),e[19]||(e[19]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[20]||(e[20]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_spatial_dimension!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf, infile, dim_name_in, dim_name_out, dim_units_in, dim_units_out; transform)</span></span></code></pre></div><p>Add a new spatial dimension to <code>gf::GriddedField</code> with data read from a NetCDF or MAT file <code>infile</code>.</p><p>The new dimension appears last in the list of dimension names.</p><p><strong>Arguments</strong></p><ul><li><p><code>gf</code>: The <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.GriddedField"><code>GriddedField</code></a> to be modified.</p></li><li><p><code>infile</code>: The path to the NetCDF/MAT file.</p></li><li><p><code>dim_name_in</code>: A <code>String</code> giving the name of the dimension to read in as it appears in the NetCDF/MAT file.</p></li><li><p><code>dim_name_out</code>: A <code>Symbol</code> giving the name of the added dimension in <code>gf</code>.</p></li><li><p><code>dim_units_in</code>: A <code>Unitful.Unitlike</code> giving the units of the dimension as they appear in the NetCDF/MAT file.</p></li><li><p><code>dim_units_out</code>: A <code>String</code> giving the kind of quantity being read; should be one of <code>keys(UNITS)</code>.</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>transform</code>: If provided, the dimension will be mapped according to <code>transform</code> before any other steps are taken. Default <code>nothing</code>.</p></li><li><p><code>force</code>: If <code>true</code>, the range will be constructed even if the vector isn&#39;t linearly spaced by linear interpolation preserving the length. Default <code>false</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-core.jl#L50-L70" target="_blank" rel="noreferrer">source</a></p>',8))]),s("details",k,[s("summary",null,[e[21]||(e[21]=s("a",{id:"SargassumBOMB.add_temporal_dimension!-Union{Tuple{N}, Tuple{GriddedField, String, String, Symbol, Dates.DateTime, Unitful.FreeUnits{N, 𝐓, nothing}}} where N",href:"#SargassumBOMB.add_temporal_dimension!-Union{Tuple{N}, Tuple{GriddedField, String, String, Symbol, Dates.DateTime, Unitful.FreeUnits{N, 𝐓, nothing}}} where N"},[s("span",{class:"jlbinding"},"SargassumBOMB.add_temporal_dimension!")],-1)),e[22]||(e[22]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[23]||(e[23]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_temporal_dimension!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf, infile, time_name_in, time_name_out, time_start, time_period; transform, force)</span></span></code></pre></div><p>Add a new temporal dimension to <code>gf::GriddedField</code> with data read from a NetCDF or MAT file <code>infile</code>.</p><p>The new dimension appears last in the list of dimension names.</p><p><strong>Arguments</strong></p><ul><li><p><code>gf</code>: The <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.GriddedField"><code>GriddedField</code></a> to be modified.</p></li><li><p><code>infile</code>: The path to the NetCDF/MAT file.</p></li><li><p><code>time_name_in</code>: A <code>String</code> giving the name of the time dimension to read in as it appears in the NetCDF/MAT file.</p></li><li><p><code>time_name_out</code>: A <code>Symbol</code> giving the name of the added time dimension in <code>gf</code>.</p></li><li><p><code>time_start</code>: A <code>DateTime</code> giving the reference time of the time dimension, e.g. if the units of the NetCDF/MAT are <code>hours since 1990-01-01</code> then <code>time_start == DateTime(1900, 1, 1)</code>.</p></li><li><p><code>time_period</code>: A <code>Unitful.FreeUnits</code> giving the time step (units) of the time dimension. E.g. if the units of the NetCDF/MAT are <code>hours since 1990-01-01</code> then <code>time_period == u&quot;hr&quot;</code>.</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>transform</code>: If provided, the dimension will be mapped according to <code>transform</code> before any other steps are taken. Default <code>nothing</code>.</p></li><li><p><code>force</code>: If <code>true</code>, the range will be constructed even if the vector isn&#39;t linearly spaced by linear interpolation preserving the length. Default <code>false</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-core.jl#L104-L124" target="_blank" rel="noreferrer">source</a></p>',8))]),s("details",y,[s("summary",null,[e[24]||(e[24]=s("a",{id:"SargassumBOMB.bins-Tuple{RaftTrajectory, SargassumDistribution}",href:"#SargassumBOMB.bins-Tuple{RaftTrajectory, SargassumDistribution}"},[s("span",{class:"jlbinding"},"SargassumBOMB.bins")],-1)),e[25]||(e[25]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[26]||(e[26]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(raft_trajectory, dist; return_xy_bins)</span></span></code></pre></div><p>Equivalent to <code>bins(raft_trajectory, x_bins, y_bins</code> where <code>x_bins</code> and <code>y_bins</code> are computed automatically from the <code>SargassumDistribution</code>, <code>dist.lon</code> and <code>dist.lat</code>.</p><p>This assumes that <code>dist.lon</code> and <code>dist.lat</code> give the central locations of the <code>dist</code> bins.</p><p><strong>Optional Arguments</strong></p><ul><li><code>return_xy_bins</code>: A <code>Bool</code> such that, if <code>true</code>, the tuple <code>(x_bins, y_bins, bins)</code> is returned instead of just <code>bins</code>. Default <code>false</code>.</li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/trajectories.jl#L112-L123" target="_blank" rel="noreferrer">source</a></p>',6))]),s("details",B,[s("summary",null,[e[27]||(e[27]=s("a",{id:"SargassumBOMB.bins-Tuple{RaftTrajectory, StepRangeLen, StepRangeLen}",href:"#SargassumBOMB.bins-Tuple{RaftTrajectory, StepRangeLen, StepRangeLen}"},[s("span",{class:"jlbinding"},"SargassumBOMB.bins")],-1)),e[28]||(e[28]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[29]||(e[29]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(raft_trajectory, x_bins, y_bins)</span></span></code></pre></div><p>Return a matrix <code>mat</code> such that <code>mat[i, j]</code> is the number of points in <code>raft_trajectory</code> that, at any time, were inside the rectangle <code>lon ∈ (x_bins[i], x_bins[i + 1])</code>, <code>lat ∈ (y_bins[i], y_bins[i + 1])</code>.</p><p>Both <code>x_bins</code> and <code>y_bins</code> should be <code>StepRangeLen</code>, i.e. of the form <code>range(start, stop, length = L)</code>. Then, <code>mat</code> has dimensions <code>length(x_bins) - 1 x length(y_bins) - 1</code>.</p><p>No coversion from or to spherical coordinates is done on <code>x_bins</code> and <code>y_bins</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/trajectories.jl#L82-L92" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",v,[s("summary",null,[e[30]||(e[30]=s("a",{id:"SargassumBOMB.check_itp-Tuple{InterpolatedField}",href:"#SargassumBOMB.check_itp-Tuple{InterpolatedField}"},[s("span",{class:"jlbinding"},"SargassumBOMB.check_itp")],-1)),e[31]||(e[31]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[32]||(e[32]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">check_itp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itp; title, time, limits, n_points, u_name, v_name)</span></span></code></pre></div><p>Construct a plot of the <code>u_name</code> and <code>v_name</code> components of <code>itp</code>.</p><p><strong>Arguments</strong></p><ul><li><code>itp</code>: A <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.InterpolatedField"><code>InterpolatedField</code></a> whose entries are wind/water vector fields.</li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>title</code>: A <code>String</code>s which labels the plots.</p></li><li><p><code>time</code>: The time at which to plot the fields. Default the minimum time.</p></li><li><p><code>limits</code>: The <code>(lon_min, lon_max, lat_min, lat_max)</code> boundaries of the plot. Default <code>limits = (-100, -50, 5, 35)</code>.</p></li><li><p><code>n_points</code>: The number of points to use in each dimension of the plot, more gives higher resolution. Default <code>n_points = 1000</code>.</p></li><li><p><code>u_name</code>: A <code>Symbol</code> giving the name of the field corresponding to the x component of the velocity. Default <code>u_name = :u</code>.</p></li><li><p><code>v_name</code>: A <code>Symbol</code> giving the name of the field corresponding to the y component of the velocity. Default <code>v_name = :v</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/plotting-itp.jl#L33-L50" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",j,[s("summary",null,[e[33]||(e[33]=s("a",{id:"SargassumBOMB.check_land-Tuple{InterpolatedField}",href:"#SargassumBOMB.check_land-Tuple{InterpolatedField}"},[s("span",{class:"jlbinding"},"SargassumBOMB.check_land")],-1)),e[34]||(e[34]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[35]||(e[35]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">check_land</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(land_itp; t, tol, limits, n_points)</span></span></code></pre></div><p>Construct a plot of the land locations from <code>land_itp</code>.</p><p><strong>Arguments</strong></p><ul><li><code>land_itp</code>: A <code>InterpolatedField</code> which gives the interpolated location of the land.</li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>limits</code>: The <code>(lon_min, lon_max, lat_min, lat_max)</code> boundaries of the plot. Default <code>limits = (-180, 180, -90, 90)</code>.</p></li><li><p><code>n_points</code>: The number of points to use in each dimension of the plot, more gives higher resolution. Default <code>n_points = 1000</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/plotting-itp.jl#L1-L14" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",S,[s("summary",null,[e[36]||(e[36]=s("a",{id:"SargassumBOMB.clump_i-Tuple{Matrix{Float64}, Integer}",href:"#SargassumBOMB.clump_i-Tuple{Matrix{Float64}, Integer}"},[s("span",{class:"jlbinding"},"SargassumBOMB.clump_i")],-1)),e[37]||(e[37]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[38]||(e[38]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clump_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u, i)</span></span></code></pre></div><p>Return a view to the the <code>[x, y]</code> coordinates of the <code>i</code>th clump in the solution matrix <code>u</code>. This is <code>view(u :,i)</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/utils.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",M,[s("summary",null,[e[39]||(e[39]=s("a",{id:"SargassumBOMB.com-Tuple{Matrix{Float64}}",href:"#SargassumBOMB.com-Tuple{Matrix{Float64}}"},[s("span",{class:"jlbinding"},"SargassumBOMB.com")],-1)),e[40]||(e[40]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[41]||(e[41]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">com</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u)</span></span></code></pre></div><p>Return the center of mass <code>[x, y]</code> coordinates of the solution matrix <code>u</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/utils.jl#L10-L14" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",T,[s("summary",null,[e[42]||(e[42]=s("a",{id:"SargassumBOMB.datetime2time-Tuple{Dates.DateTime}",href:"#SargassumBOMB.datetime2time-Tuple{Dates.DateTime}"},[s("span",{class:"jlbinding"},"SargassumBOMB.datetime2time")],-1)),e[43]||(e[43]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[44]||(e[44]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">datetime2time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dt)</span></span></code></pre></div><p>Convert <code>dt::DateTime</code> to the amount of time since <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.T_REF"><code>T_REF</code></a> expressed in the units of <code>UNITS[&quot;time&quot;]</code>.</p><p>This inverts <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.time2datetime-Tuple{Real}"><code>time2datetime</code></a>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/time.jl#L10-L16" target="_blank" rel="noreferrer">source</a></p>',4))]),s("details",O,[s("summary",null,[e[45]||(e[45]=s("a",{id:"SargassumBOMB.dxdy_MR-Tuple{Tuple{Real, Real}, ClumpParameters}",href:"#SargassumBOMB.dxdy_MR-Tuple{Tuple{Real, Real}, ClumpParameters}"},[s("span",{class:"jlbinding"},"SargassumBOMB.dxdy_MR")],-1)),e[46]||(e[46]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[47]||(e[47]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dxdy_MR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tspan, clumps)</span></span></code></pre></div><p>Compute <code>(dx, dy)</code> where <code>dx</code> and <code>dy</code> are interpolants evaluable at <code>(x, y, t)</code> equal to the right-hand-side of the Maxey-Riley equations (spring force excluded).</p><p>This is automatically applied when a fast raft is selected in <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Raft!</code></a>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/rafts-clumps.jl#L156-L163" target="_blank" rel="noreferrer">source</a></p>',4))]),s("details",E,[s("summary",null,[e[48]||(e[48]=s("a",{id:"SargassumBOMB.grow!-Tuple{SciMLBase.DEIntegrator}",href:"#SargassumBOMB.grow!-Tuple{SciMLBase.DEIntegrator}"},[s("span",{class:"jlbinding"},"SargassumBOMB.grow!")],-1)),e[49]||(e[49]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[50]||(e[50]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grow!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(integrator, location)</span></span></code></pre></div><p>Add a clump to the <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftParameters"><code>RaftParameters</code></a>, <code>rp = integrator.p</code>, with an index equal to <code>rp.n_clumps_tot + 1</code> and also update <code>rp.living</code> appropriately.</p><p><strong>Location</strong></p><p><code>location</code> can be a pre-defined flag, an integer, or a <code>[x, y]</code> vector. The default value is the flag <code>&quot;parent&quot;</code>.</p><p>The possible flags are:</p><ul><li><p><code>&quot;parent&quot;</code>: A parent clump is chosen randomly among clumps that already exist, and the new clump is placed a distance <code>integrator.rp.springs.L</code> away and at a random angle from it.</p></li><li><p><code>&quot;com&quot;</code>: The same as <code>&quot;parent&quot;</code>, except the centre location is at the center of mass of the raft.</p></li></ul><p>If <code>location</code> is an <code>Integer</code> with value <code>i</code>, then the new clump will be grown with <code>i</code>th clump (by vector location) as its parent.</p><p>If <code>location</code> is a <code>Vector{&lt;:Real}</code>, the new clump will be placed at those <code>[x, y]</code> coordinates.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/control.jl#L25-L41" target="_blank" rel="noreferrer">source</a></p>',9))]),s("details",C,[s("summary",null,[e[51]||(e[51]=s("a",{id:"SargassumBOMB.itps_default_construct-Tuple{}",href:"#SargassumBOMB.itps_default_construct-Tuple{}"},[s("span",{class:"jlbinding"},"SargassumBOMB.itps_default_construct")],-1)),e[52]||(e[52]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[53]||(e[53]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">itps_default_construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; download </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Construct all interpolants using the default data.</p><p>This overwrites any default interpolants already constructed.</p><p>Interpolants constructed: water, wind, stokes, waves, nutrients, temperature, land.</p><p><strong>Optional Arguments</strong></p><ul><li><p><code>download</code>: If <code>true</code>, download the data (roughly 1.2 GB of NetCDF files).</p></li><li><p><code>verbose</code>: If <code>true</code>, print itp construction stats. Default <code>true</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/default/itps-default.jl#L156-L169" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",x,[s("summary",null,[e[54]||(e[54]=s("a",{id:"SargassumBOMB.itps_load-Tuple{String}",href:"#SargassumBOMB.itps_load-Tuple{String}"},[s("span",{class:"jlbinding"},"SargassumBOMB.itps_load")],-1)),e[55]||(e[55]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[56]||(e[56]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">itps_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Attempt to load the interpolants in directory <code>dir</code>.</p><p>This assumes that there exists in this directory the following files, each containing a variable as follows</p><table tabindex="0"><thead><tr><th style="text-align:left;">File Name</th><th style="text-align:left;">Variable Name</th></tr></thead><tbody><tr><td style="text-align:left;">WATER_ITP.jld2</td><td style="text-align:left;">WATER_ITP</td></tr><tr><td style="text-align:left;">WIND_ITP.jld2</td><td style="text-align:left;">WIND_ITP</td></tr><tr><td style="text-align:left;">STOKES_ITP.jld2</td><td style="text-align:left;">STOKES_ITP</td></tr><tr><td style="text-align:left;">WAVES_ITP.jld2</td><td style="text-align:left;">WAVES_ITP</td></tr><tr><td style="text-align:left;">NUTRIENTS_ITP.jld2</td><td style="text-align:left;">NUTRIENTS_ITP</td></tr><tr><td style="text-align:left;">TEMPERATURE_ITP.jld2</td><td style="text-align:left;">TEMPERATURE_ITP</td></tr><tr><td style="text-align:left;">LAND_ITP.jld2</td><td style="text-align:left;">LAND_ITP</td></tr></tbody></table><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-definitions.jl#L50-L67" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",A,[s("summary",null,[e[57]||(e[57]=s("a",{id:"SargassumBOMB.kill!-Tuple{SciMLBase.DEIntegrator, Integer}",href:"#SargassumBOMB.kill!-Tuple{SciMLBase.DEIntegrator, Integer}"},[s("span",{class:"jlbinding"},"SargassumBOMB.kill!")],-1)),e[58]||(e[58]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[59]||(e[59]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kill!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(integrator, i)</span></span></code></pre></div><p>Remove the clump with index <code>i</code> from <code>integrator</code>.</p><p>Can be applied as kill!(integrator, inds) in which case each <code>i in inds</code> will be killed in order.</p><p>For the <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftParameters"><code>RaftParameters</code></a>, <code>rp = integrator.p</code>, update <code>rp.living</code> appropriately.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/control.jl#L1-L9" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",R,[s("summary",null,[e[60]||(e[60]=s("a",{id:"SargassumBOMB.optimize!-Tuple{Function, Vector{<:Tuple{Real, Real}}}",href:"#SargassumBOMB.optimize!-Tuple{Function, Vector{<:Tuple{Real, Real}}}"},[s("span",{class:"jlbinding"},"SargassumBOMB.optimize!")],-1)),e[61]||(e[61]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[62]||(e[62]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optimize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, param_bounds, loss_func; time_limit, verbose, seed)</span></span></code></pre></div><p>Find the minimum of <code>f(X)</code> where <code>X ∈ param_bounds</code>. The Evolutionary Centers Algorithm is used via <code>Metaheuristics.ECA</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>f</code>: The function to optimize. Should be evaluable at a vector whose length is equal to <code>length(param_bounds)</code> and return a <code>Real</code>.</p></li><li><p><code>param_bounds</code>: A vector of tuples giving the box constraints of the optimization.</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>time_limit</code>: A <code>Float64</code> giving the upper time limit in seconds on the length of the optimization. Default <code>300.0</code>.</p></li><li><p><code>verbose</code>: Show simplified results each iteration of the optimization. Default <code>true</code>.</p></li><li><p><code>logger</code>: A function passed directly to <code>Metaheuristics.optimize!</code>, which receives a <code>Metaheuristics.State</code> at every step.</p></li><li><p><code>seed</code>: An integer seed for randomness. Default <code>1234</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/optimization.jl#L189-L205" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",F,[s("summary",null,[e[63]||(e[63]=s("a",{id:"SargassumBOMB.ranges_increasing!-Tuple{GriddedField}",href:"#SargassumBOMB.ranges_increasing!-Tuple{GriddedField}"},[s("span",{class:"jlbinding"},"SargassumBOMB.ranges_increasing!")],-1)),e[64]||(e[64]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[65]||(e[65]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ranges_increasing!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf)</span></span></code></pre></div><p>Moddify <code>gf::GriddedField</code> in place so that each dimension has variable which are increasing. Fields are automatically reversed if necessary.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-core.jl#L238-L242" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",w,[s("summary",null,[e[66]||(e[66]=s("a",{id:"SargassumBOMB.rk4-Tuple{RaftParameters}",href:"#SargassumBOMB.rk4-Tuple{RaftParameters}"},[s("span",{class:"jlbinding"},"SargassumBOMB.rk4")],-1)),e[67]||(e[67]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[68]||(e[68]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rk4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rp; rhs, alg, showprogress, dt, return_raw)</span></span></code></pre></div><p>Similar to <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.simulate-Tuple{RaftParameters}"><code>simulate</code></a> but uses a stock RK4 algorithm with time step <code>dt</code> (default <code>0.1</code> days).</p><p>May be faster for large spring constants at the expense of accuracy.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/main.jl#L87-L93" target="_blank" rel="noreferrer">source</a></p>',4))]),s("details",L,[s("summary",null,[e[69]||(e[69]=s("a",{id:"SargassumBOMB.rtr2mat-Tuple{RaftTrajectory, String}",href:"#SargassumBOMB.rtr2mat-Tuple{RaftTrajectory, String}"},[s("span",{class:"jlbinding"},"SargassumBOMB.rtr2mat")],-1)),e[70]||(e[70]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[71]||(e[71]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rtr2mat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rtr, outfile; force)</span></span></code></pre></div><p>Write the <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a> in <code>rtr</code> to <code>outfile</code> which must be a <code>.mat</code> file.</p><p>This writes the raw, unbinned trajectory data.</p><p><strong>Optional Arguments</strong></p><ul><li><code>force</code>: If <code>true</code>, delete <code>outfile</code> if it already exists. Default <code>false</code>.</li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/io.jl#L1-L11" target="_blank" rel="noreferrer">source</a></p>',6))]),s("details",I,[s("summary",null,[e[72]||(e[72]=s("a",{id:"SargassumBOMB.rtr2nc-Tuple{RaftTrajectory, String, SargassumDistribution}",href:"#SargassumBOMB.rtr2nc-Tuple{RaftTrajectory, String, SargassumDistribution}"},[s("span",{class:"jlbinding"},"SargassumBOMB.rtr2nc")],-1)),e[73]||(e[73]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[74]||(e[74]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rtr2nc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rtr, outfile, dist; force)</span></span></code></pre></div><p>Write the <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a> in <code>rtr</code> to <code>outfile</code> which must be a <code>.nc</code> file.</p><p>The data are binned by passing <code>dist</code> to <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.bins-Tuple{RaftTrajectory, SargassumDistribution}"><code>bins</code></a>, i.e. the bins are chosen to be the same as the bins of <code>dist</code>.</p><p>It is required that <code>rtr.t</code> is linearly spaced.</p><p><strong>Optional Arguments</strong></p><ul><li><code>force</code>: If <code>true</code>, delete <code>outfile</code> if it already exists. Default <code>false</code>.</li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/io.jl#L130-L143" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",_,[s("summary",null,[e[75]||(e[75]=s("a",{id:"SargassumBOMB.rtr2nc-Tuple{RaftTrajectory, String, StepRangeLen, StepRangeLen}",href:"#SargassumBOMB.rtr2nc-Tuple{RaftTrajectory, String, StepRangeLen, StepRangeLen}"},[s("span",{class:"jlbinding"},"SargassumBOMB.rtr2nc")],-1)),e[76]||(e[76]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[77]||(e[77]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rtr2nc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rtr, outfile, lon_bins, lat_bins; force)</span></span></code></pre></div><p>Write the <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a> in <code>rtr</code> to <code>outfile</code> which must be a <code>.nc</code> file.</p><p>The data are binned by passing <code>lon_bins</code> and <code>lat_bins</code> to <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.bins-Tuple{RaftTrajectory, SargassumDistribution}"><code>bins</code></a>.</p><p>It is required that <code>rtr.t</code> is linearly spaced.</p><p><strong>Optional Arguments</strong></p><ul><li><code>force</code>: If <code>true</code>, delete <code>outfile</code> if it already exists. Default <code>false</code>.</li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/io.jl#L92-L104" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",D,[s("summary",null,[e[78]||(e[78]=s("a",{id:"SargassumBOMB.simulate-Tuple{RaftParameters}",href:"#SargassumBOMB.simulate-Tuple{RaftParameters}"},[s("span",{class:"jlbinding"},"SargassumBOMB.simulate")],-1)),e[79]||(e[79]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[80]||(e[80]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rp; rhs, alg, abstol, reltol, showprogress, dt, return_raw)</span></span></code></pre></div><p>Simulate a Sargassum raft with <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftParameters"><code>RaftParameters</code></a> <code>rp</code> and return a <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a>.</p><p>This function modifies the fields of <code>rp</code> significantly.</p><p><strong>Arguments</strong></p><ul><li><code>rp</code>: A <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftParameters"><code>RaftParameters</code></a> defining the raft.</li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>leeway</code>: Use <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Leeway!-Tuple{Any, Any, RaftParameters, Any}"><code>Leeway!</code></a> to integrate particles with no springs or inertia. Default <code>false</code>.</p></li><li><p><code>alg</code>: The integration algorithm to use, default <a href="https://docs.sciml.ai/DiffEqDocs/stable/solvers/ode_solve/" target="_blank" rel="noreferrer"><code>Tsit5()</code></a>.</p></li><li><p><code>abstol</code>: The absolute tolerance of integration; default <code>nothing</code>.</p></li><li><p><code>reltol</code>: The relative tolerance of integration; default <code>nothing</code>.</p></li><li><p><code>showprogress</code>: If <code>true</code>, print a status indicator of the progress of the integration. Default <code>false</code>.</p></li><li><p><code>dt</code>: The solution trajectories are uniformized to be spaced in time by increments of <code>dt</code>. Note that the units of this quantity are implicity <code>UNITS[&quot;time&quot;]</code>. Default <code>0.1</code>.</p></li><li><p><code>return_raw</code>: If true, return the result of <code>OrdinaryDiffEq.solve</code>, rather than a <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a>. Use this if you would like to manipulate the solution directly. Default <code>false</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/main.jl#L1-L21" target="_blank" rel="noreferrer">source</a></p>',8))]),s("details",P,[s("summary",null,[e[81]||(e[81]=s("a",{id:"SargassumBOMB.sph2xy!-Tuple{GriddedField}",href:"#SargassumBOMB.sph2xy!-Tuple{GriddedField}"},[s("span",{class:"jlbinding"},"SargassumBOMB.sph2xy!")],-1)),e[82]||(e[82]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[83]||(e[83]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sph2xy!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf; lon_name, lat_name, x_name, y_name)</span></span></code></pre></div><p>Moddify <code>gf::GriddedField</code> in place so that its longitudinal and latitudinal dimensions are converted to equirectangular coordinates.</p><p><strong>Optional Arguments</strong></p><ul><li><p><code>lon_name</code>: A <code>Symbol</code> giving the name of the longitudinal variable in <code>gf</code>.</p></li><li><p><code>lat_name</code>: A <code>Symbol</code> giving the name of the latitudinal variable in <code>gf</code>.</p></li><li><p><code>x_name</code>: A <code>Symbol</code> giving the name of the equirectangular <code>x</code> variable to be used in the modified <code>gf</code>.</p></li><li><p><code>y_name</code>: A <code>Symbol</code> giving the name of the equirectangular <code>y</code> variable to be used in the modified <code>gf</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-core.jl#L259-L270" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",q,[s("summary",null,[e[84]||(e[84]=s("a",{id:"SargassumBOMB.sph2xy-Tuple{Real, Real}",href:"#SargassumBOMB.sph2xy-Tuple{Real, Real}"},[s("span",{class:"jlbinding"},"SargassumBOMB.sph2xy")],-1)),e[85]||(e[85]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[86]||(e[86]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sph2xy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lon, lat; eqr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x)</span></span></code></pre></div><p>Compute planar coordinates <code>[x, y]</code> from spherical coordinates <code>(lon, lat)</code> [deg E/W, deg N/S] using <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.EquirectangularReference"><code>EquirectangularReference</code></a>, <code>eqr</code>, default <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.EQR"><code>EQR</code></a>.</p><p>The units of <code>x</code> and <code>y</code> the same as <code>eqr.R</code>.</p><p><strong>Further Methods</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sph2xy(lon_range, lat_range; eqr = EQR)</span></span></code></pre></div><p>where <code>lon_range</code> and <code>lat_range</code> are <code>AbstractRange</code>. Returns <code>(x_range, y_range)</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sph2xy(lon_lat; eqr = EQR)</span></span></code></pre></div><p>where <code>lon_lat</code> is a <code>2 x N</code> `Matrix. Returns a result in the same shape as the input.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/coordinates.jl#L77-L93" target="_blank" rel="noreferrer">source</a></p>',9))]),s("details",N,[s("summary",null,[e[87]||(e[87]=s("a",{id:"SargassumBOMB.time2datetime-Tuple{Real}",href:"#SargassumBOMB.time2datetime-Tuple{Real}"},[s("span",{class:"jlbinding"},"SargassumBOMB.time2datetime")],-1)),e[88]||(e[88]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[89]||(e[89]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time2datetime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time)</span></span></code></pre></div><p>Convert the amount of time since <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.T_REF"><code>T_REF</code></a> expressed in the units of <code>UNITS[&quot;time&quot;]</code> to a <code>DateTime</code>.</p><p>By convention, <code>time</code> is rounded down to the nearest second.</p><p>This inverts <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.datetime2time-Tuple{Dates.DateTime}"><code>datetime2time</code></a>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/time.jl#L21-L29" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",G,[s("summary",null,[e[90]||(e[90]=s("a",{id:"SargassumBOMB.time2ymw-Tuple{Real}",href:"#SargassumBOMB.time2ymw-Tuple{Real}"},[s("span",{class:"jlbinding"},"SargassumBOMB.time2ymw")],-1)),e[91]||(e[91]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[92]||(e[92]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time2ymw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time)</span></span></code></pre></div><p>Convert the time measured in days since <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.T_REF"><code>T_REF</code></a> to the corresponding to the year <code>y</code>, month <code>m</code> and week <code>w</code>.</p><p>The days of the four weeks per month are defined as the 7th, 14th, 21nd and 28th.</p><p>This is the inverse of <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.ymw2time-Tuple{Integer, Integer, Integer}"><code>ymw2time</code></a>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/time.jl#L59-L68" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",U,[s("summary",null,[e[93]||(e[93]=s("a",{id:"SargassumBOMB.time_slice-Tuple{Trajectory, Tuple{Real, Real}}",href:"#SargassumBOMB.time_slice-Tuple{Trajectory, Tuple{Real, Real}}"},[s("span",{class:"jlbinding"},"SargassumBOMB.time_slice")],-1)),e[94]||(e[94]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[95]||(e[95]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time_slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(traj, tspan)</span></span></code></pre></div><p>Return a new <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Trajectory"><code>Trajectory</code></a> consisting of points and times of <code>traj</code> that are between <code>first(tspan)</code> and <code>last(tspan)</code>. The result <code>Trajectory</code> may be empty.</p><p>Can also be applied to a <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a> in which case <code>time_slice</code> is applied to each member <code>Trajectory</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/trajectories.jl#L31-L38" target="_blank" rel="noreferrer">source</a></p>',4))]),s("details",V,[s("summary",null,[e[96]||(e[96]=s("a",{id:"SargassumBOMB.trajectory!-Tuple{Axis, RaftTrajectory}",href:"#SargassumBOMB.trajectory!-Tuple{Axis, RaftTrajectory}"},[s("span",{class:"jlbinding"},"SargassumBOMB.trajectory!")],-1)),e[97]||(e[97]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[98]||(e[98]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trajectory!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axis, rtraj; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Add a <code>Makie.lines</code> plot to <code>axis</code> for each <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Trajectory"><code>Trajectory</code></a> in the <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a> in <code>rtraj</code>. Returns <code>nothing</code>.</p><p><strong>Optional Arguments</strong></p><ul><li><code>args...</code>: All keyword arguments are passed directly to <code>Makie.lines!</code>.</li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/plotting-core.jl#L61-L69" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",W,[s("summary",null,[e[99]||(e[99]=s("a",{id:"SargassumBOMB.trajectory!-Tuple{Axis, Trajectory}",href:"#SargassumBOMB.trajectory!-Tuple{Axis, Trajectory}"},[s("span",{class:"jlbinding"},"SargassumBOMB.trajectory!")],-1)),e[100]||(e[100]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[101]||(e[101]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trajectory!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axis, traj; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Add a <code>Makie.lines</code> plot to <code>axis</code> from the <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Trajectory"><code>Trajectory</code></a> in <code>traj</code>. Returns <code>Makie.lines!</code>.</p><p><strong>Optional Arguments</strong></p><ul><li><code>args...</code>: All keyword arguments are passed directly to <code>Makie.lines!</code>.</li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/plotting-core.jl#L39-L47" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",z,[s("summary",null,[e[102]||(e[102]=s("a",{id:"SargassumBOMB.trajectory!-Tuple{Axis, Vector{<:Vector{<:Real}}, Vector{<:Real}}",href:"#SargassumBOMB.trajectory!-Tuple{Axis, Vector{<:Vector{<:Real}}, Vector{<:Real}}"},[s("span",{class:"jlbinding"},"SargassumBOMB.trajectory!")],-1)),e[103]||(e[103]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[104]||(e[104]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trajectory!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axis, xy, t; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Add a <code>Makie.lines</code> plot to <code>axis</code> from the points <code>xy</code> and times <code>t</code>. Returns <code>Makie.lines!</code>.</p><p><code>xy</code> can be a <code>Vector</code> of length <code>n_points</code> with entries that are vectors of length <code>2</code> or an <code>N x 2</code> matrix.</p><p><strong>Optional Arguments</strong></p><ul><li><code>args...</code>: All keyword arguments are passed directly to <code>Makie.lines!</code>.</li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/plotting-core.jl#L1-L11" target="_blank" rel="noreferrer">source</a></p>',6))]),s("details",Q,[s("summary",null,[e[105]||(e[105]=s("a",{id:"SargassumBOMB.trajectory-Tuple{RaftTrajectory}",href:"#SargassumBOMB.trajectory-Tuple{RaftTrajectory}"},[s("span",{class:"jlbinding"},"SargassumBOMB.trajectory")],-1)),e[106]||(e[106]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[107]||(e[107]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trajectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rtr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RaftTrajectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; limits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Visualize a <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a> quickly.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/plotting-core.jl#L86-L90" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",H,[s("summary",null,[e[108]||(e[108]=s("a",{id:"SargassumBOMB.trajectory_hist!-Tuple{Axis, RaftTrajectory, SargassumDistribution, Integer}",href:"#SargassumBOMB.trajectory_hist!-Tuple{Axis, RaftTrajectory, SargassumDistribution, Integer}"},[s("span",{class:"jlbinding"},"SargassumBOMB.trajectory_hist!")],-1)),e[109]||(e[109]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[110]||(e[110]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trajectory_hist!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axis, traj, dist, week; log_scale, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a <code>Makie.heatmap</code> on <code>axis</code> with the same bins as the <code>SargassumFromAFAI.SargassumDistribution</code> in <code>dist</code> of the data in <code>traj</code> scaled according to the sargassum content at week <code>week</code>.</p><p><code>traj</code> is a <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a>.</p><p>Returns <code>Makie.heatmap!</code>.</p><p><strong>Optional Arguments</strong></p><ul><li><p><code>log_scale</code>: Plot on a <code>log10</code> scale. Default <code>false</code>.</p></li><li><p><code>args...</code>: All keyword arguments are passed directly to <code>Makie.heatmap!</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/plotting-core.jl#L172-L186" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",K,[s("summary",null,[e[111]||(e[111]=s("a",{id:"SargassumBOMB.trajectory_hist!-Tuple{Axis, Vector{<:RaftTrajectory}, StepRangeLen, StepRangeLen}",href:"#SargassumBOMB.trajectory_hist!-Tuple{Axis, Vector{<:RaftTrajectory}, StepRangeLen, StepRangeLen}"},[s("span",{class:"jlbinding"},"SargassumBOMB.trajectory_hist!")],-1)),e[112]||(e[112]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[113]||(e[113]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trajectory_hist!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axis, traj, lon_bins, lat_bins; log_scale, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a <code>Makie.heatmap</code> on <code>axis</code> with bin centers at the coordinates defined by <code>lon_bins</code> and <code>lat_bins</code> of the data in <code>traj</code>.</p><p><code>traj</code> can be a single <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a> or a <code>Vector</code> of <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a>. In the case of a <code>Vector</code>, all trajectories are mixed together to make a single plot.</p><p>Returns <code>Makie.heatmap!</code>.</p><p><strong>Optional Arguments</strong></p><ul><li><p><code>log_scale</code>: Plot on a <code>log10</code> scale. Default <code>false</code>.</p></li><li><p><code>args...</code>: All keyword arguments are passed directly to <code>Makie.heatmap!</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/plotting-core.jl#L111-L126" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",$,[s("summary",null,[e[114]||(e[114]=s("a",{id:"SargassumBOMB.vec2range-Tuple{Vector{<:Real}}",href:"#SargassumBOMB.vec2range-Tuple{Vector{<:Real}}"},[s("span",{class:"jlbinding"},"SargassumBOMB.vec2range")],-1)),e[115]||(e[115]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[116]||(e[116]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec2range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vector; force)</span></span></code></pre></div><p>Convert a <code>Vector</code> of linearly spaced values to a <code>StepRangeLen</code>.</p><p>If <code>force == true</code>, the range will be constructed even if the vector isn&#39;t linearly spaced by linear interpolation preserving the length. Default <code>false</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/utils.jl#L19-L25" target="_blank" rel="noreferrer">source</a></p>',4))]),s("details",X,[s("summary",null,[e[117]||(e[117]=s("a",{id:"SargassumBOMB.xy2sph-Tuple{Real, Real}",href:"#SargassumBOMB.xy2sph-Tuple{Real, Real}"},[s("span",{class:"jlbinding"},"SargassumBOMB.xy2sph")],-1)),e[118]||(e[118]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[119]||(e[119]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xy2sph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, eqr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x)</span></span></code></pre></div><p>Compute spherical coordinates <code>[lon, lat]</code> [deg] from rectilinear coordinates <code>(x, y)</code> using <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.EquirectangularReference"><code>EquirectangularReference</code></a> <code>eqr</code>, default <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.EQR"><code>EQR</code></a>.</p><p>The units of <code>x</code> and <code>y</code> should be the same as <code>eqr.R</code>.</p><p><strong>Further Methods</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xy2sph(x_range, y_range)</span></span></code></pre></div><p>where <code>x_range</code> and <code>y_range</code> are <code>AbstractRange</code>. Returns <code>(lon_range, lat_range)</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xy2sph(xy)</span></span></code></pre></div><p>where <code>xy</code> is a <code>2 x N</code> <code>Matrix</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/coordinates.jl#L130-L146" target="_blank" rel="noreferrer">source</a></p>',9))]),s("details",J,[s("summary",null,[e[120]||(e[120]=s("a",{id:"SargassumBOMB.ymw2time-Tuple{Integer, Integer, Integer}",href:"#SargassumBOMB.ymw2time-Tuple{Integer, Integer, Integer}"},[s("span",{class:"jlbinding"},"SargassumBOMB.ymw2time")],-1)),e[121]||(e[121]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[122]||(e[122]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ymw2time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, m, w)</span></span></code></pre></div><p>Convert the time corresponding to the year <code>y</code>, month <code>m</code> and week <code>w</code> indicated into a single time measured in days since <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.T_REF"><code>T_REF</code></a>.</p><p>The days of the four weeks per month are defined as the 7th, 14th, 21nd and 28th.</p><p>Can be applied as <code>ymw2time((y, m , w))</code>.</p><p>This is the inverse of <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.time2ymw-Tuple{Real}"><code>time2ymw</code></a>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/time.jl#L36-L47" target="_blank" rel="noreferrer">source</a></p>',6))]),s("details",Y,[s("summary",null,[e[123]||(e[123]=s("a",{id:"SargassumBOMB.ymwplusweek-Tuple{Any, Any}",href:"#SargassumBOMB.ymwplusweek-Tuple{Any, Any}"},[s("span",{class:"jlbinding"},"SargassumBOMB.ymwplusweek")],-1)),e[124]||(e[124]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[125]||(e[125]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ymwplusweek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ymw, n_week)</span></span></code></pre></div><p>Calculate the <code>(year, month, week)</code> after <code>n_week</code> weeks have passed since <code>ymw</code>.</p><p><strong>Example</strong></p><p><code>ymwplusweek((2018, 10, 2), 12) == (2019, 1, 2)</code></p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/time.jl#L112-L120" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",Z,[s("summary",null,[e[126]||(e[126]=s("a",{id:"SargassumBOMB.ymwspan2weekspan-Tuple{Tuple{Integer, Integer, Integer}, Tuple{Integer, Integer, Integer}}",href:"#SargassumBOMB.ymwspan2weekspan-Tuple{Tuple{Integer, Integer, Integer}, Tuple{Integer, Integer, Integer}}"},[s("span",{class:"jlbinding"},"SargassumBOMB.ymwspan2weekspan")],-1)),e[127]||(e[127]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[128]||(e[128]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ymwspan2weekspan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ymw1, ymw2)</span></span></code></pre></div><p>Return a vector list of all <code>(year, month, week)</code> tuples between <code>ym1 = (year1, month1, week1)</code> and <code>ym2 = (year2, month2, week2)</code> inclusive.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/time.jl#L77-L81" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",ee,[s("summary",null,[e[129]||(e[129]=s("a",{id:"SargassumBOMB.ΔL-Tuple{AbstractRange, AbstractRange}",href:"#SargassumBOMB.ΔL-Tuple{AbstractRange, AbstractRange}"},[s("span",{class:"jlbinding"},"SargassumBOMB.ΔL")],-1)),e[130]||(e[130]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[131]||(e[131]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ΔL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_range, y_range; to_xy)</span></span></code></pre></div><p>Compute a spring length from a rectangular arrangement of clumps provided by <code>x_range</code> and <code>y_range</code>. This is the distance between the centers of diagonally-adjacent gridpoints. These should be equirectangular coordinates.</p><p><strong>Optional Arguments</strong></p><p><code>to_xy</code>: If <code>true</code>, the coordinates are converted from spherical to equirectangular coordinates. Default <code>false</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L198-L207" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",se,[s("summary",null,[e[132]||(e[132]=s("a",{id:"SargassumBOMB.ΔL-Tuple{InitialConditions}",href:"#SargassumBOMB.ΔL-Tuple{InitialConditions}"},[s("span",{class:"jlbinding"},"SargassumBOMB.ΔL")],-1)),e[133]||(e[133]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[134]||(e[134]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ΔL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">InitialConditions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute a spring length from a <code>InitialConditions</code>. This is the median among all pairwise equirectangular distances between points&#39; <code>k</code> nearest neighbors. Default <code>k = 5</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L228-L233" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",ae,[s("summary",null,[e[135]||(e[135]=s("a",{id:"SargassumBOMB.ΔL-Tuple{SargassumDistribution}",href:"#SargassumBOMB.ΔL-Tuple{SargassumDistribution}"},[s("span",{class:"jlbinding"},"SargassumBOMB.ΔL")],-1)),e[136]||(e[136]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[137]||(e[137]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ΔL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SargassumDistribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute a spring length from a <code>SargassumDistribution</code>. This is the equirectangular distance between the centers of diagonally-adjacent gridpoints.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L216-L221" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",te,[s("summary",null,[e[138]||(e[138]=s("a",{id:"SargassumBOMB.γ_sphere-Tuple{Real}",href:"#SargassumBOMB.γ_sphere-Tuple{Real}"},[s("span",{class:"jlbinding"},"SargassumBOMB.γ_sphere")],-1)),e[139]||(e[139]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[140]||(e[140]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">γ_sphere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span></code></pre></div><p>Calculate <code>sec(lat_0) * cos(lat)</code>, converting <code>y</code> to <code>lat</code> automatically.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/coordinates.jl#L190-L194" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",ie,[s("summary",null,[e[141]||(e[141]=s("a",{id:"SargassumBOMB.τ_sphere-Tuple{Real}",href:"#SargassumBOMB.τ_sphere-Tuple{Real}"},[s("span",{class:"jlbinding"},"SargassumBOMB.τ_sphere")],-1)),e[142]||(e[142]=t()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[143]||(e[143]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">τ_sphere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span></code></pre></div><p>Calculate <code>τ = tan(lat)/R</code> converting <code>y</code> to <code>lat</code> automatically.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/coordinates.jl#L199-L203" target="_blank" rel="noreferrer">source</a></p>',3))]),e[253]||(e[253]=s("h2",{id:"types",tabindex:"-1"},[t("Types "),s("a",{class:"header-anchor",href:"#types","aria-label":'Permalink to "Types"'},"​")],-1)),s("details",oe,[s("summary",null,[e[144]||(e[144]=s("a",{id:"SargassumBOMB.AbstractConnections",href:"#SargassumBOMB.AbstractConnections"},[s("span",{class:"jlbinding"},"SargassumBOMB.AbstractConnections")],-1)),e[145]||(e[145]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[146]||(e[146]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractConnections</span></span></code></pre></div><p>A supertype for all connections between clumps.</p><p>Every subtype of <code>AbstractConnections</code> should be mutable with a field <code>connections</code> which is similar to a vector of vectors such that that <code>connections[i]</code> is a list of clump indices that are connected to clump <code>i</code>.</p><p>This should be updated in-place during the integration, i.e. it only shows the connections at the current time.</p><p>Every subtype of <code>AbstractConnections</code> should implement a <code>form_connections(con::Connections, u)</code> method which returns what <code>con.connections</code> should be updated with, assuming that <code>u</code> is the solution vector. The correction of indices due to living clumps is provided automatically later, so here it can be assumed that <code>u</code> contains only living clumps.</p><p>Any subtype of <code>AbstractConnections</code> can be evaluated at an <code>OrdinaryDiffEq.integrator</code> for callback purposes.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L1-L18" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",le,[s("summary",null,[e[147]||(e[147]=s("a",{id:"SargassumBOMB.AbstractGrowthDeathModel",href:"#SargassumBOMB.AbstractGrowthDeathModel"},[s("span",{class:"jlbinding"},"SargassumBOMB.AbstractGrowthDeathModel")],-1)),e[148]||(e[148]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[149]||(e[149]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractGrowthDeathModel</span></span></code></pre></div><p>The abstract type for growth and death models.</p><p>Subtypes must have a field <code>S</code>, a <code>Vector{Float64}</code> of length <code>n_clumps_max</code> representing an &quot;amount&quot; or &quot;mass&quot; for each clump.</p><p>Subtypes must have a field <code>S_gen</code>, which is a <code>Distributions.Sampleable{Univariate, ...}</code> such that <code>rand(S_gen)</code> generates a sample of <code>S</code>. E.g. <code>S_gen = Distributions.Dirac(0.0)</code> will always initialize clumps with <code>S = fill(0.0, n_clumps_max)</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/growth-death.jl#L3-L12" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",ne,[s("summary",null,[e[150]||(e[150]=s("a",{id:"SargassumBOMB.AbstractLand",href:"#SargassumBOMB.AbstractLand"},[s("span",{class:"jlbinding"},"SargassumBOMB.AbstractLand")],-1)),e[151]||(e[151]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[152]||(e[152]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractLand</span></span></code></pre></div><p>A supertype for all land/shore types.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/land.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",re,[s("summary",null,[e[153]||(e[153]=s("a",{id:"SargassumBOMB.AbstractSpring",href:"#SargassumBOMB.AbstractSpring"},[s("span",{class:"jlbinding"},"SargassumBOMB.AbstractSpring")],-1)),e[154]||(e[154]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[155]||(e[155]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractSpring</span></span></code></pre></div><p>A supertype for all spring parameters. Each clump, when conncted, is joined by the same kind of spring.</p><p>Every subtype of <code>AbstractSpring</code> should have a field <code>k::Function</code> representing the stiffness force and callable as <code>k(x)</code> as well as a field <code>L::Real</code> representing the spring&#39;s natural length.</p><p>All forces are computed using</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xy1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xy2)</span></span></code></pre></div><p>where <code>d = norm(xy1 - xy2)</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L137-L152" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",de,[s("summary",null,[e[156]||(e[156]=s("a",{id:"SargassumBOMB.BOMBSpring",href:"#SargassumBOMB.BOMBSpring"},[s("span",{class:"jlbinding"},"SargassumBOMB.BOMBSpring")],-1)),e[157]||(e[157]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[158]||(e[158]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BOMBSpring{F}</span></span></code></pre></div><p>A subtype of <code>AbstractSpring</code> representing a BOMB spring of the form <code>A * (exp((x - 2*L)/0.2) + 1)^(-1)</code>.</p><p><strong>Extra fields</strong></p><ul><li><code>A</code>: The amplitude of the force.</li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BOMBSpring(A::Real, L::Real)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L174-L186" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",pe,[s("summary",null,[e[159]||(e[159]=s("a",{id:"SargassumBOMB.BrooksModel",href:"#SargassumBOMB.BrooksModel"},[s("span",{class:"jlbinding"},"SargassumBOMB.BrooksModel")],-1)),e[160]||(e[160]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[161]||(e[161]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BrooksModel{B, D}</span></span></code></pre></div><p>The growth/death model of <a href="https://www.int-res.com/abstracts/meps/v599/p1-18/" target="_blank" rel="noreferrer">Brooks et al. (2018)</a>.</p><p><strong>Fields</strong></p><ul><li><p><code>S</code>: The amount parameter.</p></li><li><p><code>S_gen</code>. The amount generator.</p></li><li><p><code>params</code>: The <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.BrooksModelParameters"><code>BrooksModelParameters</code></a> parameters of the model.</p></li><li><p><code>growths</code>:A <code>Vector</code> of indices of clumps that are to be grown (if any).</p></li><li><p><code>deaths</code>: A <code>Vector</code> of indices of clumps that are to be killed (if any).</p></li><li><p><code>verbose</code>: A <code>Bool</code> such that <code>verbose = true</code> will log times and labels of clumps that grow and die.</p></li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BrooksModel(n_clumps_max; S_gen = Dirac(0.0), params = BrooksModelParameters(), verbose = false)</span></span></code></pre></div><p><strong>Logic</strong></p><p>At each time step, <code>model.S</code> is modified by <code>model.params.dSdt * dt</code>. The resulting <code>S</code> values are each compared to <code>model.params.S_min</code> and <code>model.params.S_max</code> and the associated <code>i</code>th clump either dies or spawns a child according to <code>grow!(integrator, location = i)</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/growth-death.jl#L128-L150" target="_blank" rel="noreferrer">source</a></p>',9))]),s("details",ce,[s("summary",null,[e[162]||(e[162]=s("a",{id:"SargassumBOMB.BrooksModelParameters",href:"#SargassumBOMB.BrooksModelParameters"},[s("span",{class:"jlbinding"},"SargassumBOMB.BrooksModelParameters")],-1)),e[163]||(e[163]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[164]||(e[164]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BrooksModelParameters{I, F}</span></span></code></pre></div><p>A container for the parameters of the model of <a href="https://www.int-res.com/abstracts/meps/v599/p1-18/" target="_blank" rel="noreferrer">Brooks et al. (2018)</a>.</p><p><strong>Parameters</strong></p><ul><li><p><code>temp</code> [°C]: An <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.InterpolatedField"><code>InterpolatedField</code></a> for the water temperature. Default <code>TEMPERATURE_ITP.x</code>.</p></li><li><p><code>no3</code> [mmol N/m^3]: An <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.InterpolatedField"><code>InterpolatedField</code></a> for the Nitrogen content of the water. <code>NUTRIENTS_ITP.x</code>.</p></li><li><p><code>μ_max</code> [1/d]: Sargassum maximum growth rate. Value: <code>0.1</code></p></li><li><p><code>m</code> [1/d]: Sargassum mortality rate. Value: <code>0.05</code></p></li><li><p><code>k_N</code> [mmol N/m^3]: Sargassum nutrient (N) uptake half saturation. Value: <code>0.012</code></p></li><li><p><code>T_min</code> [°C]: Minimum temperature for Sargassum growth. Value: <code>10.0</code></p></li><li><p><code>T_max</code> [°C]: Minimum temperature for Sargassum growth. Value: <code>40.0</code></p></li><li><p><code>clumps_limits</code>: A <code>Tuple</code> of the form <code>(n_clumps_min, n_clumps_max)</code>. These impose hard lower and upper limits on the total number of clumps that can exist at any specific time (the total number of clumps that can have ever existed - i.e. <code>n_clumps_tot</code> of <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftParameters"><code>RaftParameters</code></a> - may be higher.) Default: <code>(0, 10000)</code>.</p></li><li><p><code>S_min</code>: A clump dies when <code>S &lt; S_min</code>. Default <code>0.0</code>.</p></li><li><p><code>S_max</code>: A clump grows when <code>S &gt; S_max</code>. Default <code>1.0</code>.</p></li><li><p><code>dSdt</code>: Compute the rate of change of the &quot;amount&quot; <code>S</code> according to the Brooks model.</p></li></ul><p><strong>dSdt</strong></p><p>This function is of the form <code>dSdt = growth_factors - death_factors</code>.</p><ul><li><p><code>growth_factors = μ_max * temperature_factor * nutrients_factor</code></p></li><li><p><code>death_factors = m</code></p></li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BrooksModelParameters(; parameters...)</span></span></code></pre></div><p>where each parameter is a kwarg with the default values given above.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/growth-death.jl#L48-L78" target="_blank" rel="noreferrer">source</a></p>',11))]),s("details",ue,[s("summary",null,[e[165]||(e[165]=s("a",{id:"SargassumBOMB.ClumpParameters",href:"#SargassumBOMB.ClumpParameters"},[s("span",{class:"jlbinding"},"SargassumBOMB.ClumpParameters")],-1)),e[166]||(e[166]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[167]||(e[167]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClumpParameters</span></span></code></pre></div><p>A container for the high-level parameters of the BOM equations.</p><p><strong>Fields</strong></p><ul><li><p><code>α</code> []: The fraction of the wind field acting on the particle.</p></li><li><p><code>τ</code> [d]: Measures the inertial response time of the medium to the particle</p></li><li><p><code>R</code> []: A geometric parameter.</p></li><li><p><code>Ω</code> [1/d]: The angular velocity of the Earth.</p></li><li><p><code>σ</code> []: The Stokes drift parameter; this applies an additional fraction of the Stokes drift to the water velocity component of the particle.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ClumpParameters(; constants...)</span></span></code></pre></div><p>Compute the parameters required for the eBOM equations from physical constants.</p><p><strong>Constants</strong></p><ul><li><p><code>δ</code> []: The bouyancy of the particle. Default: <code>1.25</code>.</p></li><li><p><code>a</code> [km]: The radius of the particle. Default: <code>1.0e-4</code>.</p></li><li><p><code>ρ</code> [kg/km^3]: The density of the water. Default: <code>1027.0e9</code>.</p></li><li><p><code>ρa</code> [kg/km^3]: The density of the air. Default: <code>1.2e9</code>.</p></li><li><p><code>ν</code> [km^2/d]: The viscosity of the water. Default: <code>8.64e-8</code>.</p></li><li><p><code>νa</code> [km^2/d]: The viscosity of the air. Default: <code>1.296e-6</code>.</p></li><li><p><code>Ω</code> [rad/d]: The angular velocity of the Earth. Default: <code>2π</code>.</p></li><li><p><code>σ</code> []: The Stokes drift parameter. Default: <code>0.0</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/rafts-clumps.jl#L1-L30" target="_blank" rel="noreferrer">source</a></p>',10))]),s("details",ge,[s("summary",null,[e[168]||(e[168]=s("a",{id:"SargassumBOMB.ConnectionsFull",href:"#SargassumBOMB.ConnectionsFull"},[s("span",{class:"jlbinding"},"SargassumBOMB.ConnectionsFull")],-1)),e[169]||(e[169]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[170]||(e[170]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectionsFull</span></span></code></pre></div><p>A connection type such that every clump is connected to every other clump.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ConnectionsFull(n_clumps_max)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L53-L61" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",he,[s("summary",null,[e[171]||(e[171]=s("a",{id:"SargassumBOMB.ConnectionsNearest",href:"#SargassumBOMB.ConnectionsNearest"},[s("span",{class:"jlbinding"},"SargassumBOMB.ConnectionsNearest")],-1)),e[172]||(e[172]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[173]||(e[173]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectionsNearest</span></span></code></pre></div><p>A connection type such that every clump is connected to a number of its nearest neighbors.</p><p><strong>Fields</strong></p><ul><li><code>neighbors</code>: The number of nearest neighbors each clump should be connected to.</li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ConnectionsNearest(n_clumps_max, neighbors)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L103-L115" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",me,[s("summary",null,[e[174]||(e[174]=s("a",{id:"SargassumBOMB.ConnectionsNone",href:"#SargassumBOMB.ConnectionsNone"},[s("span",{class:"jlbinding"},"SargassumBOMB.ConnectionsNone")],-1)),e[175]||(e[175]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[176]||(e[176]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectionsNone</span></span></code></pre></div><p>A connection type such that no clumps are connected.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ConnectionsNone(n_clumps_max)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L32-L40" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",be,[s("summary",null,[e[177]||(e[177]=s("a",{id:"SargassumBOMB.ConnectionsRadius",href:"#SargassumBOMB.ConnectionsRadius"},[s("span",{class:"jlbinding"},"SargassumBOMB.ConnectionsRadius")],-1)),e[178]||(e[178]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[179]||(e[179]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectionsRadius</span></span></code></pre></div><p>A connection type such that every clump is connected to every clump within a given radius.</p><p><strong>Fields</strong></p><ul><li><code>radius</code>: A distance (assumed in <code>UNITS[&quot;distance&quot;]</code>) such that each clump is connected to every clump whose distance is at most <code>radius</code> from it.</li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ConnectionsRadius(n_clumps_max, radius)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L74-L86" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",fe,[s("summary",null,[e[180]||(e[180]=s("a",{id:"SargassumBOMB.EquirectangularReference",href:"#SargassumBOMB.EquirectangularReference"},[s("span",{class:"jlbinding"},"SargassumBOMB.EquirectangularReference")],-1)),e[181]||(e[181]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[182]||(e[182]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EquirectangularReference{U}</span></span></code></pre></div><p>A container for the reference longitude and latitude of an equirectangular projection.</p><p><strong>Fields</strong></p><ul><li><p><code>lon0</code>: The standard longitude degrees (East/West).</p></li><li><p><code>lat0</code>: The standard latitude degrees (North/South).</p></li><li><p><code>R</code>: The radius of the Earth. The units of this quantity are the units of the equirectangular coordinates.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>EquirectangularReference(; lon0 = -75.0, lat0 = 10.0, units = UNITS[&quot;distance&quot;])</span></span></code></pre></div><p><strong>Example</strong></p><p>To measure distances in meters,</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eqr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EquirectangularReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(units </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/coordinates.jl#L26-L48" target="_blank" rel="noreferrer">source</a></p>',10))]),s("details",ke,[s("summary",null,[e[183]||(e[183]=s("a",{id:"SargassumBOMB.GriddedField",href:"#SargassumBOMB.GriddedField"},[s("span",{class:"jlbinding"},"SargassumBOMB.GriddedField")],-1)),e[184]||(e[184]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[185]||(e[185]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GriddedField{N, T, U}</span></span></code></pre></div><p>A container for gridded data, possibly time-dependent.</p><p><strong>Fields</strong></p><ul><li><p><code>dims_names</code>: A <code>Vector</code> of <code>Tuple{Unitful.Unitlike, Symbol}</code>s such that <code>dims_names[i][1]</code> is the <code>i</code>th dimension of <code>fields</code> and <code>dims_names[i][2]</code> gives the units of the <code>i</code>th dimension.</p></li><li><p><code>dims</code>: A <code>Dict</code> mapping variable names to ranges they take.</p></li><li><p><code>fields_names</code>: A <code>Vector</code> of <code>Tuple{Unitful.Unitlike, Symbol}</code>s such that <code>fields_names[i][1]</code> is the <code>i</code>th field and <code>fields_names[i][2]</code> gives its units.</p></li><li><p><code>fields</code>: A <code>Dict</code> mapping field names to their arrays.</p></li></ul><p><strong>Example</strong></p><p>If <code>GriddedField.dims_names == [(:x, u&quot;km&quot;), (:y, u&quot;km&quot;), (:t, u&quot;d&quot;)]</code>, this implies that the order of the dimensions of each field is <code>(x, y, t)</code> and further that the units of <code>x, y</code> and <code>t</code> are <code>km, km</code> and <code>d</code>, respectively.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GriddedField(n_dims; floats = Float64, ints = Int64)</span></span></code></pre></div><p>where <code>n_dims</code> is the number of dimensions of the field and <code>floats</code> and <code>ints</code> give the datatypes used.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-core.jl#L1-L22" target="_blank" rel="noreferrer">source</a></p>',10))]),s("details",ye,[s("summary",null,[e[186]||(e[186]=s("a",{id:"SargassumBOMB.HookeSpring",href:"#SargassumBOMB.HookeSpring"},[s("span",{class:"jlbinding"},"SargassumBOMB.HookeSpring")],-1)),e[187]||(e[187]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[188]||(e[188]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HookeSpring{F}</span></span></code></pre></div><p>A subtype of <code>AbstractSpring</code> representing a spring with a constant stiffness.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HookeSpring(k::Real, L::Real)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/springs.jl#L155-L163" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",Be,[s("summary",null,[e[189]||(e[189]=s("a",{id:"SargassumBOMB.ImmortalModel",href:"#SargassumBOMB.ImmortalModel"},[s("span",{class:"jlbinding"},"SargassumBOMB.ImmortalModel")],-1)),e[190]||(e[190]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[191]||(e[191]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImmortalModel{D}</span></span></code></pre></div><p>An <code>AbstractGrowthDeathModel</code> such that no growth or death occurs.</p><p><strong>Fields</strong></p><ul><li><p><code>S</code>: The amount parameter. Unused for an <code>ImmortalModel</code>.</p></li><li><p><code>S_gen</code>. The amount generator. Unused for an <code>ImmortalModel</code>.</p></li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ImmortalModel(n_clumps_max; S_gen = Dirac(0.0))</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/growth-death.jl#L15-L28" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",ve,[s("summary",null,[e[192]||(e[192]=s("a",{id:"SargassumBOMB.InitialConditions",href:"#SargassumBOMB.InitialConditions"},[s("span",{class:"jlbinding"},"SargassumBOMB.InitialConditions")],-1)),e[193]||(e[193]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[194]||(e[194]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InitialConditions</span></span></code></pre></div><p>A container for the initial conditions for a raft.</p><p><strong>Fields</strong></p><ul><li><p><code>tspan</code>: A <code>Tuple</code> such that the integration is performed for <code>tspan[1] ≤ t ≤ tspan[2]</code> where <code>t</code> is in <code>UNITS[&quot;time&quot;]</code> since <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.T_REF"><code>T_REF</code></a>.</p></li><li><p><code>ics</code>: A <code>2 x N</code> <code>Matrix</code> of the form <code>[x1 x2 ... xN ; y1 y2 ... yN]</code> giving the initial coordinates of each clump.</p></li></ul><p><strong>Generic constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(;tspan, ics)</span></span></code></pre></div><p><strong>Constructing from positions</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(tspan, xy0; to_xy)</span></span></code></pre></div><p>Construct initial conditions suitable for use in <code>RaftParameters.ics</code> from <code>2 x N</code> <code>Matrix</code>, <code>xy0</code> which should be equirectangular coordinates.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(tspan, x_range, y_range; to_xy)</span></span></code></pre></div><p>Generate clumps in a rectangular arrangement.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(tspan, x0, y0; to_xy)</span></span></code></pre></div><p>Generate a single clump with coordinates <code>(x0, y0)</code>.</p><p><strong>Optional Arguments</strong></p><p><code>to_xy</code>: If <code>true</code>, the coordinates are converted from spherical to equirectangular coordinates. Default <code>false</code>.</p><p><strong>Constructing from a SargassumDistribution</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(tspan, dist, weeks, levels; seed)</span></span></code></pre></div><p>Construct <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.InitialConditions"><code>InitialConditions</code></a> from a <code>SargassumDistribution</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>tspan</code>: A <code>Tuple{Real, Real}</code> such that the integration is performed for <code>tspan[1] ≤ t ≤ tspan[2]</code> where <code>t</code> is in in <code>UNITS[&quot;time&quot;]</code> since <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.T_REF"><code>T_REF</code></a>.</p></li><li><p><code>dist</code>: A <code>SargassumDistribution</code>.</p></li><li><p><code>weeks</code>: A <code>Vector{&lt;:Integer}</code> giving the weeks of the month to consider. Each entry should be between 1 and 4 and appear only once.</p></li><li><p><code>levels</code>: The number of clump levels. Note that this is NOT equal to the number of clumps, see below.</p></li></ul><p><strong>Levels</strong></p><p>Boxes with nonzero Sargassum content are divided into <code>levels</code> levels of size <code>(maximum(D) - minimum(D))/levels</code> where <code>D = log10.(dist.sargassm[:,:,weeks])</code>. Each box gets a number of clumps equal to its level index. For example, if <code>levels = 2</code>, then the smaller half of the boxes (by Sargassum content) get 1 clump each and the larger half get 2 clumps each.</p><p><strong>Optional Arguments</strong></p><ul><li><code>seed</code>: <code>Random.seed!(seed)</code> is called before the the initialization. Default 1234.</li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/ics.jl#L1-L52" target="_blank" rel="noreferrer">source</a></p>',25))]),s("details",je,[s("summary",null,[e[195]||(e[195]=s("a",{id:"SargassumBOMB.InterpolatedField",href:"#SargassumBOMB.InterpolatedField"},[s("span",{class:"jlbinding"},"SargassumBOMB.InterpolatedField")],-1)),e[196]||(e[196]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[197]||(e[197]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterpolatedField{N, T, U, I}</span></span></code></pre></div><p>A container for interpolants of gridded data, possibly time-dependent.</p><p><strong>Fields</strong></p><ul><li><p><code>dims_names</code>: A <code>Vector</code> of <code>Tuple{Unitful.Unitlike, Symbol}</code>s such that <code>dims_names[i][1]</code> is the <code>i</code>th dimension of <code>fields</code> and <code>dims_names[i][2]</code> gives the units of the <code>i</code>th dimension.</p></li><li><p><code>dims</code>: A <code>Dict</code> mapping variable names to ranges they take.</p></li><li><p><code>fields_names</code>: A <code>Vector</code> of <code>Tuple{Unitful.Unitlike, Symbol}</code>s such that <code>fields_names[i][1]</code> is the <code>i</code>th field and <code>fields_names[i][2]</code> gives its units.</p></li><li><p><code>fields</code>: A <code>Dict</code> mapping field names to their interpolants.</p></li></ul><p><strong>Example</strong></p><p>If <code>InterpolatedField.dims_names == [(:x, u&quot;km&quot;), (:y, u&quot;km&quot;), (:t, u&quot;d&quot;)]</code>, this implies that the order of the dimensions of each field is <code>(x, y, t)</code> and further that the units of <code>x, y</code> and <code>t</code> are <code>km, km</code> and <code>d</code>, respectively.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InterpolatedField(gf; interpolant_type = &quot;cubic&quot;, extrapolate_value = 0.0)</span></span></code></pre></div><p>where <code>gf</code> is a <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.GriddedField"><code>GriddedField</code></a> and with the optional arguments</p><ul><li><p><code>interpolant_type</code>: Two convenience flags are provided, <code>&quot;cubic&quot;</code> and <code>&quot;nearest&quot;</code> which refer to cubic BSpline and nearest-neighbor interpolation, respectively. Alternatively, any <code>Interpolations.InterpolationType</code> can be provided. Default <code>&quot;cubic&quot;</code>.</p></li><li><p><code>extrapolate_value</code>: A constant extrapolation is performed with this value. Default <code>&quot;0.0&quot;</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-core.jl#L295-L319" target="_blank" rel="noreferrer">source</a></p>',11))]),s("details",Se,[s("summary",null,[e[198]||(e[198]=s("a",{id:"SargassumBOMB.Land",href:"#SargassumBOMB.Land"},[s("span",{class:"jlbinding"},"SargassumBOMB.Land")],-1)),e[199]||(e[199]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[200]||(e[200]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Land{I}</span></span></code></pre></div><p>A container for data handling death of clumps upon reaching the shore.</p><p><strong>Fields</strong></p><ul><li><p><code>land_itp</code>: A <code>InterpolatedField</code> such that <code>land_itp.fields[:land](x, y)</code> is equal to <code>1.0</code> if <code>(x, y)</code> is on land and <code>0.0</code> otherwise.</p></li><li><p><code>deaths</code>: A <code>Vector</code> of indices of clumps that are to be killed.</p></li><li><p><code>verbose</code>: A <code>Bool</code> such that <code>verbose = true</code> will log times and labels of clumps that hit land.</p></li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Land(;land_itp::InterpolatedField = land_itp, verbose = false)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/land.jl#L26-L40" target="_blank" rel="noreferrer">source</a></p>',7))]),s("details",Me,[s("summary",null,[e[201]||(e[201]=s("a",{id:"SargassumBOMB.LossFunction",href:"#SargassumBOMB.LossFunction"},[s("span",{class:"jlbinding"},"SargassumBOMB.LossFunction")],-1)),e[202]||(e[202]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[203]||(e[203]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LossFunction{F1, F2}</span></span></code></pre></div><p>A container for the function used for measuring the loss of a simulation.</p><p><strong>Fields</strong></p><ul><li><p><code>f</code>: A <code>Function</code>. This function must be callable as <code>f(rtr::RaftTrajectory)</code> and return a <code>Real</code>. This measures the &quot;score&quot; of a <code>RaftTrajectory</code> (lower is better).</p></li><li><p><code>metric</code>: A <code>Function</code>. This function must be callable as <code>f(a::Matrix, b::Matrix)</code> and return a <code>Real</code>. This measures the &quot;distance&quot; between two matrices, e.g. <code>(a, b) -&gt; sum(abs.(a - b))</code> is the <code>L1</code> norm.</p></li><li><p><code>name</code>: A <code>String</code> giving the name of the loss function, e.g. <code>&quot;L1&quot;</code>.</p></li></ul><p><strong>Constructor</strong></p><p><code>LossFunction(ymw1, ymw2, dists; corners, metric, cumulative, name)</code></p><p><strong>Arguments</strong></p><ul><li><p><code>ymw1</code>: A <code>NTuple{3, Integer}</code> giving the initial <code>(year, month, week)</code> of the integration.</p></li><li><p><code>ymw2</code>: A <code>NTuple{3, Integer}</code> giving the final <code>(year, month, week)</code> of the integration.</p></li><li><p><code>dists</code>: A <code>Dict</code> mapping <code>(year, month)</code>s to <code>SargassumDistribution</code>s spanning the integration time period.</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>corners</code>: The <code>(lon_min, lon_max, lat_min, lat_max)</code> coordinates to restrict the loss calculation to. Default <code>(-180, 180, -90, 90)</code>.</p></li><li><p><code>metric</code>: As defined above. Default <code>(a, b) -&gt; sum(abs.(a - b))</code>.</p></li><li><p><code>cumulative</code>: If <code>true</code>, the loss is added at each intermediate week of the integration rather than just at the end. Default <code>false</code>.</p></li><li><p><code>name</code>: A <code>String</code> giving the name of the loss function. Default <code>&quot;L1&quot;</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/optimization.jl#L115-L144" target="_blank" rel="noreferrer">source</a></p>',11))]),s("details",Te,[s("summary",null,[e[204]||(e[204]=s("a",{id:"SargassumBOMB.NoLand",href:"#SargassumBOMB.NoLand"},[s("span",{class:"jlbinding"},"SargassumBOMB.NoLand")],-1)),e[205]||(e[205]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[206]||(e[206]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NoLand</span></span></code></pre></div><p>An <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.AbstractLand"><code>AbstractLand</code></a> such that the land/shore is completely ignored.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/land.jl#L8-L12" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",Oe,[s("summary",null,[e[207]||(e[207]=s("a",{id:"SargassumBOMB.RaftParameters",href:"#SargassumBOMB.RaftParameters"},[s("span",{class:"jlbinding"},"SargassumBOMB.RaftParameters")],-1)),e[208]||(e[208]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[209]||(e[209]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RaftParameters{S, C, G, L, I}</span></span></code></pre></div><p>A container for the parameters defining a raft. Each clump and spring are identical.</p><p><strong>Structure</strong></p><p><code>RaftParameters</code> acts as the parameter container for <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Raft!</code></a>. The solution vector <code>u</code> is a <code>2 x N</code> <code>Matrix</code> of the form <code>[x1 x2 ... xN ; y1 y2 ... yN]</code> giving the initial coordinates of each clump.</p><p><strong>Fields</strong></p><ul><li><p><code>ics</code>: An <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.InitialConditions"><code>InitialConditions</code></a>.</p></li><li><p><code>clumps</code>: The <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.ClumpParameters"><code>ClumpParameters</code></a> shared by each clump in the raft.</p></li><li><p><code>springs</code>: A subtype of <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.AbstractSpring"><code>AbstractSpring</code></a>.</p></li><li><p><code>connections</code>: A subtype of <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.AbstractConnections"><code>AbstractConnections</code></a>.</p></li><li><p><code>gd_model</code>: A subtype of <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.AbstractGrowthDeathModel"><code>AbstractGrowthDeathModel</code></a>.</p></li><li><p><code>land</code>: A subtype of <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.AbstractLand"><code>AbstractLand</code></a>.</p></li><li><p><code>n_clumps_max</code>: An <code>Integer</code> equal to the maximum allowed number of clumps. The number of clumps will not exceed this for any reason.</p></li><li><p><code>living</code>: A <code>BitVector</code> such that <code>living[i] == true</code> if the clump with index <code>i</code> is alive.</p></li><li><p><code>n_clumps_tot</code>: An <code>Base.RefValue{Int64}</code> whose reference is equal to the total number of clumps that have ever existed (i.e. it is at least the number of clumps that exist at any specific time.)</p></li><li><p><code>dx_MR</code>: <code>dx</code> of the Maxey-Riley equation. When provided, integration is done using <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"><code>FastRaft!</code></a>.</p></li><li><p><code>dy_MR</code>: <code>dy</code> of the Maxey-Riley equation. When provided, integration is done using <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"><code>FastRaft!</code></a>.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RaftParameters(; ics, clumps, springs, connections, gd_model, land, n_clumps_max, fast_raft)</span></span></code></pre></div><p>The quantities <code>living</code> and <code>n_clumps_tot</code> are computed automatically under the assumption that the clumps initially provided are all alive.</p><p><strong>Fast Raft</strong></p><p>If <code>fast_raft == true</code> in the above constructor, then the equations will be integrated using <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"><code>FastRaft!</code></a>. This is faster than <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Raft!</code></a> at the expense of a more front-loaded computation since the interpolants must be computed. Using fast raft is advisable when the number of clumps is large. Default <code>false</code>.</p><p>One can also set <code>fast_raft = (dx_MR, dy_MR)</code> directly if the interpolants have been computed previously using <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.dxdy_MR-Tuple{Tuple{Real, Real}, ClumpParameters}"><code>dxdy_MR</code></a>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/rafts-clumps.jl#L64-L99" target="_blank" rel="noreferrer">source</a></p>',13))]),s("details",Ee,[s("summary",null,[e[210]||(e[210]=s("a",{id:"SargassumBOMB.RaftTrajectory",href:"#SargassumBOMB.RaftTrajectory"},[s("span",{class:"jlbinding"},"SargassumBOMB.RaftTrajectory")],-1)),e[211]||(e[211]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[212]||(e[212]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RaftTrajectory</span></span></code></pre></div><p>A container for the data of a every clump&#39;s trajectory in a raft, as well as its center of mass.</p><p><strong>Fields</strong></p><ul><li><p><code>trajectories</code>: A <code>Dict</code> mapping clump indices to their corresponding <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Trajectory"><code>Trajectory</code></a>.</p></li><li><p><code>t</code>: A vector of all time possible slices across the clump trajectories.</p></li><li><p><code>n_clumps</code>: A vector such that <code>n_clumps[i]</code> is the number of clumps that are alive at time <code>t[i]</code>.</p></li><li><p><code>com</code>: A <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.Trajectory"><code>Trajectory</code></a> corresponding to the center of mass of the raft.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RaftTrajectory(; trajectories, n_clumps, com)</span></span></code></pre></div><p>The field <code>t</code> is set to <code>com.t</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/trajectories.jl#L48-L64" target="_blank" rel="noreferrer">source</a></p>',8))]),s("details",Ce,[s("summary",null,[e[213]||(e[213]=s("a",{id:"SargassumBOMB.TimeSeries",href:"#SargassumBOMB.TimeSeries"},[s("span",{class:"jlbinding"},"SargassumBOMB.TimeSeries")],-1)),e[214]||(e[214]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[215]||(e[215]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSeries</span></span></code></pre></div><p>A container for comparing simulation data to target data in weekly periods.</p><p><strong>Fields</strong></p><ul><li><p><code>simulation</code>: An array with dimensions <code>lon x lat x t</code> such that <code>sum(:,:,t) = 1</code> for all <code>t</code>. This is the Sargassum distribution coming from simulation, i.e. a <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a>.</p></li><li><p><code>target</code>: An array with dimensions <code>lon x lat x t</code> such that <code>sum(:,:,t) = 1</code> for all <code>t</code>. This is the Sargassum distribution coming from observation, i.e. a <a href="/Sargassum.jl/dev/s-afai-api#SargassumFromAFAI.SargassumDistribution"><code>SargassumDistribution</code></a>.</p></li><li><p><code>lon</code>: A vector of latitudes.</p></li><li><p><code>lat</code>: A vector of longitudes.</p></li><li><p><code>t</code>: A vector of week spans.</p></li><li><p><code>exclude_clouded_bins</code>: If <code>true</code>, clouded bins have had their values set to 0 in both the simulation and the target.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>TimeSeries(rtr, ymw1, ymw2; corners, dists, exclude_clouded_bins)</span></span></code></pre></div><p>where <code>rtr</code> is a <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.RaftTrajectory"><code>RaftTrajectory</code></a> and <code>ymw1</code> and <code>ymw2</code> are the <code>(year, month, week)</code> bounds of the time series.</p><p><strong>Optional Arguments</strong></p><ul><li><p><code>corners</code>: Of the form <code>(lon_min, lon_max, lat_min, lat_max)</code> where the data is restricted to bins in this area. Default <code>(-180, 180, -90, 90)</code>.</p></li><li><p><code>dists</code>: A dictionary mapping <code>(year, month)</code> to <code>SargassumDistribution</code>. Default <code>DIST_1718</code>.</p></li><li><p><code>exclude_clouded_bins</code>: Exclude clouded bins from the calculation, i.e. set their bin value equal to 0 in both the simulation and the target. Default <code>true</code>.</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/optimization.jl#L1-L26" target="_blank" rel="noreferrer">source</a></p>',10))]),s("details",xe,[s("summary",null,[e[216]||(e[216]=s("a",{id:"SargassumBOMB.Trajectory",href:"#SargassumBOMB.Trajectory"},[s("span",{class:"jlbinding"},"SargassumBOMB.Trajectory")],-1)),e[217]||(e[217]=t()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[218]||(e[218]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Trajectory</span></span></code></pre></div><p>A container for the data of a single clump&#39;s trajectory.</p><p><strong>Fields</strong></p><ul><li><p><code>xy</code>: A <code>Matrix</code> of size <code>N x 2</code> such that <code>xy[i,:]</code> gives the <code>[x, y]</code> or <code>[lon, lat]</code> coordinates at the clump at time <code>t[i]</code>.</p></li><li><p><code>t</code>: A <code>Vector</code> of length <code>N</code> giving the time values of the trajectory.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Trajectory(xy, t)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/trajectories.jl#L1-L14" target="_blank" rel="noreferrer">source</a></p>',7))]),e[254]||(e[254]=s("h2",{id:"constants",tabindex:"-1"},[t("Constants "),s("a",{class:"header-anchor",href:"#constants","aria-label":'Permalink to "Constants"'},"​")],-1)),s("details",Ae,[s("summary",null,[e[219]||(e[219]=s("a",{id:"SargassumBOMB.EARTH_RADIUS",href:"#SargassumBOMB.EARTH_RADIUS"},[s("span",{class:"jlbinding"},"SargassumBOMB.EARTH_RADIUS")],-1)),e[220]||(e[220]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[221]||(e[221]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EARTH_RADIUS</span></span></code></pre></div><p>The radius of the Earth, equal to <code>6371 km</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/coordinates.jl#L19-L23" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",Re,[s("summary",null,[e[222]||(e[222]=s("a",{id:"SargassumBOMB.EQR",href:"#SargassumBOMB.EQR"},[s("span",{class:"jlbinding"},"SargassumBOMB.EQR")],-1)),e[223]||(e[223]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[224]||(e[224]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQR</span></span></code></pre></div><p>The <a href="/Sargassum.jl/dev/s-bomb-api#SargassumBOMB.EquirectangularReference"><code>EquirectangularReference</code></a> used during all conversions. This is a <code>Ref</code>, use <code>EQR.x</code> to acess the actual <code>EquirectangularReference</code>.</p><p><strong>Defaults</strong></p><ul><li><p><code>lon0</code>: -75.0 degrees</p></li><li><p><code>lat0</code>: 10.0 degrees</p></li><li><p><code>R</code>: 6731 km</p></li></ul><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/coordinates.jl#L64-L74" target="_blank" rel="noreferrer">source</a></p>',5))]),s("details",Fe,[s("summary",null,[e[225]||(e[225]=s("a",{id:"SargassumBOMB.LAND_ITP",href:"#SargassumBOMB.LAND_ITP"},[s("span",{class:"jlbinding"},"SargassumBOMB.LAND_ITP")],-1)),e[226]||(e[226]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[227]||(e[227]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LAND_ITP</span></span></code></pre></div><p>The interpolant for landmass location. This is a <code>Ref</code>, access or modify the actual interpolant with <code>LAND_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-definitions.jl#L43-L47" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",we,[s("summary",null,[e[228]||(e[228]=s("a",{id:"SargassumBOMB.NUTRIENTS_ITP",href:"#SargassumBOMB.NUTRIENTS_ITP"},[s("span",{class:"jlbinding"},"SargassumBOMB.NUTRIENTS_ITP")],-1)),e[229]||(e[229]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[230]||(e[230]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NUTRIENTS_ITP</span></span></code></pre></div><p>The interpolant for ocean nitrogen content. This is a <code>Ref</code>, access or modify the actual interpolant with <code>NO3_ITP_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-definitions.jl#L29-L33" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",Le,[s("summary",null,[e[231]||(e[231]=s("a",{id:"SargassumBOMB.STOKES_ITP",href:"#SargassumBOMB.STOKES_ITP"},[s("span",{class:"jlbinding"},"SargassumBOMB.STOKES_ITP")],-1)),e[232]||(e[232]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[233]||(e[233]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> STOKES_ITP</span></span></code></pre></div><p>The interpolant for Stokes drift velocity. This is a <code>Ref</code>, access or modify the actual interpolant with <code>STOKES_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-definitions.jl#L15-L19" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",Ie,[s("summary",null,[e[234]||(e[234]=s("a",{id:"SargassumBOMB.TEMPERATURE_ITP",href:"#SargassumBOMB.TEMPERATURE_ITP"},[s("span",{class:"jlbinding"},"SargassumBOMB.TEMPERATURE_ITP")],-1)),e[235]||(e[235]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[236]||(e[236]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TEMPERATURE_ITP</span></span></code></pre></div><p>The interpolant for ocean temperature. This is a <code>Ref</code>, access or modify the actual interpolant with <code>TEMPERATURE_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-definitions.jl#L36-L40" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",_e,[s("summary",null,[e[237]||(e[237]=s("a",{id:"SargassumBOMB.T_REF",href:"#SargassumBOMB.T_REF"},[s("span",{class:"jlbinding"},"SargassumBOMB.T_REF")],-1)),e[238]||(e[238]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[239]||(e[239]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T_REF</span></span></code></pre></div><p>The time to which all times are referred.</p><p>This is a <code>Ref</code>, access or modify the actual value with <code>T_REF.x</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/time.jl#L1-L7" target="_blank" rel="noreferrer">source</a></p>',4))]),s("details",De,[s("summary",null,[e[240]||(e[240]=s("a",{id:"SargassumBOMB.UNITS",href:"#SargassumBOMB.UNITS"},[s("span",{class:"jlbinding"},"SargassumBOMB.UNITS")],-1)),e[241]||(e[241]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[242]||(e[242]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UNITS</span></span></code></pre></div><p>A dictionary mapping dimension names to the <code>Unitful.Unitlike</code> that measures it.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/src/coordinates.jl#L3-L7" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",Pe,[s("summary",null,[e[243]||(e[243]=s("a",{id:"SargassumBOMB.WATER_ITP",href:"#SargassumBOMB.WATER_ITP"},[s("span",{class:"jlbinding"},"SargassumBOMB.WATER_ITP")],-1)),e[244]||(e[244]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[245]||(e[245]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WATER_ITP</span></span></code></pre></div><p>The interpolant for ocean currents. This is a <code>Ref</code>, access or modify the actual interpolant with <code>WATER_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-definitions.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",qe,[s("summary",null,[e[246]||(e[246]=s("a",{id:"SargassumBOMB.WAVES_ITP",href:"#SargassumBOMB.WAVES_ITP"},[s("span",{class:"jlbinding"},"SargassumBOMB.WAVES_ITP")],-1)),e[247]||(e[247]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[248]||(e[248]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WAVES_ITP</span></span></code></pre></div><p>The interpolant for wave height. This is a <code>Ref</code>, access or modify the actual interpolant with <code>WAVES_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-definitions.jl#L22-L26" target="_blank" rel="noreferrer">source</a></p>',3))]),s("details",Ne,[s("summary",null,[e[249]||(e[249]=s("a",{id:"SargassumBOMB.WIND_ITP",href:"#SargassumBOMB.WIND_ITP"},[s("span",{class:"jlbinding"},"SargassumBOMB.WIND_ITP")],-1)),e[250]||(e[250]=t()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[251]||(e[251]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WIND_ITP</span></span></code></pre></div><p>The interpolant for wind speed. This is a <code>Ref</code>, access or modify the actual interpolant with <code>WIND_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/SargassumBOMB.jl/blob/v0.7.9/interpolants/itps-definitions.jl#L8-L12" target="_blank" rel="noreferrer">source</a></p>',3))]),e[255]||(e[255]=a('<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div>',1))])}const $e=l(p,[["render",Ge]]);export{Ke as __pageData,$e as default};
