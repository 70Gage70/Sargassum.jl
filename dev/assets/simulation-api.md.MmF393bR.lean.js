import{_ as l,c as n,a4 as t,j as a,a as s,G as o,B as d,o as r}from"./chunks/framework.CsgBfYqC.js";const Ue=JSON.parse('{"title":"Simulation API","description":"","frontmatter":{},"headers":[],"relativePath":"simulation-api.md","filePath":"simulation-api.md","lastUpdated":null}'),p={name:"simulation-api.md"},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},W={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""},$={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""},Y={class:"jldocstring custom-block",open:""},Z={class:"jldocstring custom-block",open:""},ee={class:"jldocstring custom-block",open:""},ae={class:"jldocstring custom-block",open:""},se={class:"jldocstring custom-block",open:""},te={class:"jldocstring custom-block",open:""},ie={class:"jldocstring custom-block",open:""},oe={class:"jldocstring custom-block",open:""},le={class:"jldocstring custom-block",open:""},ne={class:"jldocstring custom-block",open:""},de={class:"jldocstring custom-block",open:""},re={class:"jldocstring custom-block",open:""},pe={class:"jldocstring custom-block",open:""},ce={class:"jldocstring custom-block",open:""},ue={class:"jldocstring custom-block",open:""},he={class:"jldocstring custom-block",open:""},ge={class:"jldocstring custom-block",open:""},me={class:"jldocstring custom-block",open:""},be={class:"jldocstring custom-block",open:""},fe={class:"jldocstring custom-block",open:""},ke={class:"jldocstring custom-block",open:""},ye={class:"jldocstring custom-block",open:""},ve={class:"jldocstring custom-block",open:""},Se={class:"jldocstring custom-block",open:""},je={class:"jldocstring custom-block",open:""},Ee={class:"jldocstring custom-block",open:""},Te={class:"jldocstring custom-block",open:""},Ce={class:"jldocstring custom-block",open:""},xe={class:"jldocstring custom-block",open:""},Fe={class:"jldocstring custom-block",open:""},Ae={class:"jldocstring custom-block",open:""},Re={class:"jldocstring custom-block",open:""},Ie={class:"jldocstring custom-block",open:""},we={class:"jldocstring custom-block",open:""},_e={class:"jldocstring custom-block",open:""},De={class:"jldocstring custom-block",open:""},Le={class:"jldocstring custom-block",open:""};function Pe(Me,e,qe,Be,Ne,Ge){const i=d("Badge");return r(),n("div",null,[e[234]||(e[234]=t('<h1 id="Simulation-API" tabindex="-1">Simulation API <a class="header-anchor" href="#Simulation-API" aria-label="Permalink to &quot;Simulation API {#Simulation-API}&quot;">​</a></h1><p>These are the full docstrings for the Simulation subsection of Sargassum.jl.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#Sargassum.EARTH_RADIUS"><code>Sargassum.EARTH_RADIUS</code></a></li><li><a href="#Sargassum.EQR"><code>Sargassum.EQR</code></a></li><li><a href="#Sargassum.LAND_ITP"><code>Sargassum.LAND_ITP</code></a></li><li><a href="#Sargassum.NUTRIENTS_ITP"><code>Sargassum.NUTRIENTS_ITP</code></a></li><li><a href="#Sargassum.STOKES_ITP"><code>Sargassum.STOKES_ITP</code></a></li><li><a href="#Sargassum.TEMPERATURE_ITP"><code>Sargassum.TEMPERATURE_ITP</code></a></li><li><a href="#Sargassum.T_REF"><code>Sargassum.T_REF</code></a></li><li><a href="#Sargassum.UNITS"><code>Sargassum.UNITS</code></a></li><li><a href="#Sargassum.WATER_ITP"><code>Sargassum.WATER_ITP</code></a></li><li><a href="#Sargassum.WAVES_ITP"><code>Sargassum.WAVES_ITP</code></a></li><li><a href="#Sargassum.WIND_ITP"><code>Sargassum.WIND_ITP</code></a></li><li><a href="#Sargassum.AbstractConnections"><code>Sargassum.AbstractConnections</code></a></li><li><a href="#Sargassum.AbstractGrowthDeathModel"><code>Sargassum.AbstractGrowthDeathModel</code></a></li><li><a href="#Sargassum.AbstractLand"><code>Sargassum.AbstractLand</code></a></li><li><a href="#Sargassum.AbstractSpring"><code>Sargassum.AbstractSpring</code></a></li><li><a href="#Sargassum.BOMBSpring"><code>Sargassum.BOMBSpring</code></a></li><li><a href="#Sargassum.BrooksModel"><code>Sargassum.BrooksModel</code></a></li><li><a href="#Sargassum.BrooksModelParameters"><code>Sargassum.BrooksModelParameters</code></a></li><li><a href="#Sargassum.ClumpParameters"><code>Sargassum.ClumpParameters</code></a></li><li><a href="#Sargassum.ConnectionsFull"><code>Sargassum.ConnectionsFull</code></a></li><li><a href="#Sargassum.ConnectionsNearest"><code>Sargassum.ConnectionsNearest</code></a></li><li><a href="#Sargassum.ConnectionsNone"><code>Sargassum.ConnectionsNone</code></a></li><li><a href="#Sargassum.ConnectionsRadius"><code>Sargassum.ConnectionsRadius</code></a></li><li><a href="#Sargassum.EquirectangularReference"><code>Sargassum.EquirectangularReference</code></a></li><li><a href="#Sargassum.GriddedField"><code>Sargassum.GriddedField</code></a></li><li><a href="#Sargassum.HookeSpring"><code>Sargassum.HookeSpring</code></a></li><li><a href="#Sargassum.ImmortalModel"><code>Sargassum.ImmortalModel</code></a></li><li><a href="#Sargassum.InitialConditions"><code>Sargassum.InitialConditions</code></a></li><li><a href="#Sargassum.InterpolatedField"><code>Sargassum.InterpolatedField</code></a></li><li><a href="#Sargassum.Land"><code>Sargassum.Land</code></a></li><li><a href="#Sargassum.NoLand"><code>Sargassum.NoLand</code></a></li><li><a href="#Sargassum.RaftParameters"><code>Sargassum.RaftParameters</code></a></li><li><a href="#Sargassum.RaftTrajectory"><code>Sargassum.RaftTrajectory</code></a></li><li><a href="#Sargassum.Trajectory"><code>Sargassum.Trajectory</code></a></li><li><a href="#Sargassum.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"><code>Sargassum.FastRaft!</code></a></li><li><a href="#Sargassum.Leeway!-Tuple{Any, Any, RaftParameters, Any}"><code>Sargassum.Leeway!</code></a></li><li><a href="#Sargassum.QuickRaftParameters-Tuple{}"><code>Sargassum.QuickRaftParameters</code></a></li><li><a href="#Sargassum.QuickRaftParameters-Tuple{InitialConditions}"><code>Sargassum.QuickRaftParameters</code></a></li><li><a href="#Sargassum.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Sargassum.Raft!</code></a></li><li><a href="#Sargassum.add_derivatives!-Tuple{InterpolatedField}"><code>Sargassum.add_derivatives!</code></a></li><li><a href="#Sargassum.add_field!-Union{Tuple{I}, Tuple{N}, Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}} where {N, I&lt;:Integer}"><code>Sargassum.add_field!</code></a></li><li><a href="#Sargassum.add_spatial_dimension!-Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}"><code>Sargassum.add_spatial_dimension!</code></a></li><li><a href="#Sargassum.add_temporal_dimension!-Union{Tuple{N}, Tuple{GriddedField, String, String, Symbol, DateTime, Unitful.FreeUnits{N, 𝐓, nothing}}} where N"><code>Sargassum.add_temporal_dimension!</code></a></li><li><a href="#Sargassum.bins-Tuple{RaftTrajectory, SargassumDistribution}"><code>Sargassum.bins</code></a></li><li><a href="#Sargassum.bins-Tuple{RaftTrajectory, StepRangeLen, StepRangeLen}"><code>Sargassum.bins</code></a></li><li><a href="#Sargassum.boundary-Tuple{InterpolatedField}"><code>Sargassum.boundary</code></a></li><li><a href="#Sargassum.datetime2time-Tuple{DateTime}"><code>Sargassum.datetime2time</code></a></li><li><a href="#Sargassum.dim-Tuple{Ref{InterpolatedField}, Symbol}"><code>Sargassum.dim</code></a></li><li><a href="#Sargassum.dims-Tuple{Ref{InterpolatedField}}"><code>Sargassum.dims</code></a></li><li><a href="#Sargassum.dxdy_MR-Tuple{Tuple{Real, Real}, ClumpParameters}"><code>Sargassum.dxdy_MR</code></a></li><li><a href="#Sargassum.field-Tuple{Ref{InterpolatedField}, Symbol}"><code>Sargassum.field</code></a></li><li><a href="#Sargassum.fields-Tuple{Ref{InterpolatedField}}"><code>Sargassum.fields</code></a></li><li><a href="#Sargassum.grow!-Tuple{SciMLBase.DEIntegrator}"><code>Sargassum.grow!</code></a></li><li><a href="#Sargassum.itps_default_construct-Tuple{}"><code>Sargassum.itps_default_construct</code></a></li><li><a href="#Sargassum.itps_load-Tuple{}"><code>Sargassum.itps_load</code></a></li><li><a href="#Sargassum.kill!-Tuple{SciMLBase.DEIntegrator, Integer}"><code>Sargassum.kill!</code></a></li><li><a href="#Sargassum.months2time-Tuple{Integer}"><code>Sargassum.months2time</code></a></li><li><a href="#Sargassum.ranges_increasing!-Tuple{GriddedField}"><code>Sargassum.ranges_increasing!</code></a></li><li><a href="#Sargassum.rtr2mat-Tuple{RaftTrajectory, String}"><code>Sargassum.rtr2mat</code></a></li><li><a href="#Sargassum.rtr2nc-Tuple{RaftTrajectory, String, SargassumDistribution}"><code>Sargassum.rtr2nc</code></a></li><li><a href="#Sargassum.rtr2nc-Tuple{RaftTrajectory, String, StepRangeLen, StepRangeLen}"><code>Sargassum.rtr2nc</code></a></li><li><a href="#Sargassum.simulate-Tuple{RaftParameters}"><code>Sargassum.simulate</code></a></li><li><a href="#Sargassum.sph2xy-Tuple{Real, Real}"><code>Sargassum.sph2xy</code></a></li><li><a href="#Sargassum.sph2xy!-Tuple{GriddedField}"><code>Sargassum.sph2xy!</code></a></li><li><a href="#Sargassum.time2datetime-Tuple{Real}"><code>Sargassum.time2datetime</code></a></li><li><a href="#Sargassum.time2months-Tuple{Integer, Integer}"><code>Sargassum.time2months</code></a></li><li><a href="#Sargassum.time2ymw-Tuple{Real}"><code>Sargassum.time2ymw</code></a></li><li><a href="#Sargassum.time_slice-Tuple{Trajectory, Tuple{Real, Real}}"><code>Sargassum.time_slice</code></a></li><li><a href="#Sargassum.update_interpolant!-Tuple{Ref{InterpolatedField}, InterpolatedField}"><code>Sargassum.update_interpolant!</code></a></li><li><a href="#Sargassum.xy2sph-Tuple{Real, Real}"><code>Sargassum.xy2sph</code></a></li><li><a href="#Sargassum.ymw2time-Tuple{Integer, Integer, Integer}"><code>Sargassum.ymw2time</code></a></li><li><a href="#Sargassum.ymwplusweek-Tuple{Any, Any}"><code>Sargassum.ymwplusweek</code></a></li><li><a href="#Sargassum.ymwspan2weekspan-Tuple{Tuple{Integer, Integer, Integer}, Tuple{Integer, Integer, Integer}}"><code>Sargassum.ymwspan2weekspan</code></a></li><li><a href="#Sargassum.ΔL-Tuple{AbstractRange, AbstractRange}"><code>Sargassum.ΔL</code></a></li><li><a href="#Sargassum.ΔL-Tuple{SargassumDistribution}"><code>Sargassum.ΔL</code></a></li><li><a href="#Sargassum.ΔL-Tuple{InitialConditions}"><code>Sargassum.ΔL</code></a></li><li><a href="#Sargassum.γ_sphere-Tuple{Real}"><code>Sargassum.γ_sphere</code></a></li><li><a href="#Sargassum.τ_sphere-Tuple{Real}"><code>Sargassum.τ_sphere</code></a></li></ul><h2 id="Units,-Time-and-Coordinates" tabindex="-1">Units, Time and Coordinates <a class="header-anchor" href="#Units,-Time-and-Coordinates" aria-label="Permalink to &quot;Units, Time and Coordinates {#Units,-Time-and-Coordinates}&quot;">​</a></h2>',5)),a("details",c,[a("summary",null,[e[0]||(e[0]=a("a",{id:"Sargassum.UNITS",href:"#Sargassum.UNITS"},[a("span",{class:"jlbinding"},"Sargassum.UNITS")],-1)),e[1]||(e[1]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[2]||(e[2]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UNITS</span></span></code></pre></div><p>A dictionary mapping dimension names to the <code>Unitful.Unitlike</code> that measures it.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/units.jl#L3-L7" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",u,[a("summary",null,[e[3]||(e[3]=a("a",{id:"Sargassum.T_REF",href:"#Sargassum.T_REF"},[a("span",{class:"jlbinding"},"Sargassum.T_REF")],-1)),e[4]||(e[4]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[5]||(e[5]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T_REF</span></span></code></pre></div><p>The time to which all times are referred, default <code>January 1, 2000</code>.</p><p>This is a <code>Ref</code>, access or modify the actual value with <code>T_REF.x</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L1-L7" target="_blank" rel="noreferrer">source</a></p>',4))]),a("details",h,[a("summary",null,[e[6]||(e[6]=a("a",{id:"Sargassum.datetime2time-Tuple{DateTime}",href:"#Sargassum.datetime2time-Tuple{DateTime}"},[a("span",{class:"jlbinding"},"Sargassum.datetime2time")],-1)),e[7]||(e[7]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[8]||(e[8]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">datetime2time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dt)</span></span></code></pre></div><p>Convert <code>dt::DateTime</code> to the amount of time since <a href="/Sargassum.jl/dev/simulation-api#Sargassum.T_REF"><code>T_REF</code></a> expressed in the units of <code>UNITS[&quot;time&quot;]</code>.</p><p>This inverts <a href="/Sargassum.jl/dev/simulation-api#Sargassum.time2datetime-Tuple{Real}"><code>time2datetime</code></a>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L64-L70" target="_blank" rel="noreferrer">source</a></p>',4))]),a("details",g,[a("summary",null,[e[9]||(e[9]=a("a",{id:"Sargassum.months2time-Tuple{Integer}",href:"#Sargassum.months2time-Tuple{Integer}"},[a("span",{class:"jlbinding"},"Sargassum.months2time")],-1)),e[10]||(e[10]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[11]||(e[11]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">months2time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(months</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate the date in <code>(year, month)</code> format after <code>months</code> months have elapsed since <a href="/Sargassum.jl/dev/simulation-api#Sargassum.T_REF"><code>T_REF</code></a>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">months2time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">219</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2018</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L48-L59" target="_blank" rel="noreferrer">source</a></p>`,5))]),a("details",m,[a("summary",null,[e[12]||(e[12]=a("a",{id:"Sargassum.time2datetime-Tuple{Real}",href:"#Sargassum.time2datetime-Tuple{Real}"},[a("span",{class:"jlbinding"},"Sargassum.time2datetime")],-1)),e[13]||(e[13]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[14]||(e[14]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time2datetime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time)</span></span></code></pre></div><p>Convert the amount of time since <a href="/Sargassum.jl/dev/simulation-api#Sargassum.T_REF"><code>T_REF</code></a> expressed in the units of <code>UNITS[&quot;time&quot;]</code> to a <code>DateTime</code>.</p><p>By convention, <code>time</code> is rounded down to the nearest second.</p><p>This inverts <a href="/Sargassum.jl/dev/simulation-api#Sargassum.datetime2time-Tuple{DateTime}"><code>datetime2time</code></a>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L75-L83" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",b,[a("summary",null,[e[15]||(e[15]=a("a",{id:"Sargassum.time2months-Tuple{Integer, Integer}",href:"#Sargassum.time2months-Tuple{Integer, Integer}"},[a("span",{class:"jlbinding"},"Sargassum.time2months")],-1)),e[16]||(e[16]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[17]||(e[17]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time2months</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(yr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mnth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate the number of months since <a href="/Sargassum.jl/dev/simulation-api#Sargassum.T_REF"><code>T_REF</code></a> of the date with year <code>yr</code> and month <code>mnth</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>time2months(yearmonth::Tuple{Integer, Integer})</span></span></code></pre></div><p>Compute <code>time2months(yearmonth[1], yearmonth[2])</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>time2months(time::DateTime)</span></span></code></pre></div><p>Compute <code>time2months(year(time), month(time))</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time2months</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2018</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">219</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L10-L29" target="_blank" rel="noreferrer">source</a></p>`,9))]),a("details",f,[a("summary",null,[e[18]||(e[18]=a("a",{id:"Sargassum.time2ymw-Tuple{Real}",href:"#Sargassum.time2ymw-Tuple{Real}"},[a("span",{class:"jlbinding"},"Sargassum.time2ymw")],-1)),e[19]||(e[19]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[20]||(e[20]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time2ymw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time)</span></span></code></pre></div><p>Convert the time measured in days since <a href="/Sargassum.jl/dev/simulation-api#Sargassum.T_REF"><code>T_REF</code></a> to the corresponding to the year <code>y</code>, month <code>m</code> and week <code>w</code>.</p><p>The days of the four weeks per month are defined as the 7th, 14th, 21nd and 28th.</p><p>This is the inverse of <a href="/Sargassum.jl/dev/simulation-api#Sargassum.ymw2time-Tuple{Integer, Integer, Integer}"><code>ymw2time</code></a>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L113-L122" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",k,[a("summary",null,[e[21]||(e[21]=a("a",{id:"Sargassum.ymw2time-Tuple{Integer, Integer, Integer}",href:"#Sargassum.ymw2time-Tuple{Integer, Integer, Integer}"},[a("span",{class:"jlbinding"},"Sargassum.ymw2time")],-1)),e[22]||(e[22]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[23]||(e[23]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ymw2time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, m, w)</span></span></code></pre></div><p>Convert the time corresponding to the year <code>y</code>, month <code>m</code> and week <code>w</code> indicated into a single time measured in days since <a href="/Sargassum.jl/dev/simulation-api#Sargassum.T_REF"><code>T_REF</code></a>.</p><p>The days of the four weeks per month are defined as the 7th, 14th, 21nd and 28th.</p><p>Can be applied as <code>ymw2time((y, m , w))</code>.</p><p>This is the inverse of <a href="/Sargassum.jl/dev/simulation-api#Sargassum.time2ymw-Tuple{Real}"><code>time2ymw</code></a>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L90-L101" target="_blank" rel="noreferrer">source</a></p>',6))]),a("details",y,[a("summary",null,[e[24]||(e[24]=a("a",{id:"Sargassum.ymwplusweek-Tuple{Any, Any}",href:"#Sargassum.ymwplusweek-Tuple{Any, Any}"},[a("span",{class:"jlbinding"},"Sargassum.ymwplusweek")],-1)),e[25]||(e[25]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[26]||(e[26]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ymwplusweek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ymw, n_week)</span></span></code></pre></div><p>Calculate the <code>(year, month, week)</code> after <code>n_week</code> weeks have passed since <code>ymw</code>.</p><p><strong>Example</strong></p><p><code>ymwplusweek((2018, 10, 2), 12) == (2019, 1, 2)</code></p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L166-L174" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",v,[a("summary",null,[e[27]||(e[27]=a("a",{id:"Sargassum.ymwspan2weekspan-Tuple{Tuple{Integer, Integer, Integer}, Tuple{Integer, Integer, Integer}}",href:"#Sargassum.ymwspan2weekspan-Tuple{Tuple{Integer, Integer, Integer}, Tuple{Integer, Integer, Integer}}"},[a("span",{class:"jlbinding"},"Sargassum.ymwspan2weekspan")],-1)),e[28]||(e[28]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[29]||(e[29]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ymwspan2weekspan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ymw1, ymw2)</span></span></code></pre></div><p>Return a vector list of all <code>(year, month, week)</code> tuples between <code>ym1 = (year1, month1, week1)</code> and <code>ym2 = (year2, month2, week2)</code> inclusive.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/time.jl#L131-L135" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",S,[a("summary",null,[e[30]||(e[30]=a("a",{id:"Sargassum.EARTH_RADIUS",href:"#Sargassum.EARTH_RADIUS"},[a("span",{class:"jlbinding"},"Sargassum.EARTH_RADIUS")],-1)),e[31]||(e[31]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[32]||(e[32]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EARTH_RADIUS</span></span></code></pre></div><p>The radius of the Earth, equal to <code>6371 km</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/coordinates.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",j,[a("summary",null,[e[33]||(e[33]=a("a",{id:"Sargassum.EQR",href:"#Sargassum.EQR"},[a("span",{class:"jlbinding"},"Sargassum.EQR")],-1)),e[34]||(e[34]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[35]||(e[35]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQR</span></span></code></pre></div><p>The <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EquirectangularReference"><code>EquirectangularReference</code></a> used during all conversions. This is a <code>Ref</code>, use <code>EQR.x</code> to acess the actual <code>EquirectangularReference</code>.</p><p><strong>Defaults</strong></p><ul><li><p><code>lon0</code>: -75.0 degrees</p></li><li><p><code>lat0</code>: 10.0 degrees</p></li><li><p><code>R</code>: 6731 km</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/coordinates.jl#L46-L56" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",E,[a("summary",null,[e[36]||(e[36]=a("a",{id:"Sargassum.EquirectangularReference",href:"#Sargassum.EquirectangularReference"},[a("span",{class:"jlbinding"},"Sargassum.EquirectangularReference")],-1)),e[37]||(e[37]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[38]||(e[38]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EquirectangularReference{U}</span></span></code></pre></div><p>A container for the reference longitude and latitude of an equirectangular projection.</p><p><strong>Fields</strong></p><ul><li><p><code>lon0</code>: The standard longitude degrees (East/West).</p></li><li><p><code>lat0</code>: The standard latitude degrees (North/South).</p></li><li><p><code>R</code>: The radius of the Earth. The units of this quantity are the units of the equirectangular coordinates.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>EquirectangularReference(; lon0 = -75.0, lat0 = 10.0, units = UNITS[&quot;distance&quot;])</span></span></code></pre></div><p><strong>Example</strong></p><p>To measure distances in meters,</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eqr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EquirectangularReference</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(units </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/coordinates.jl#L8-L30" target="_blank" rel="noreferrer">source</a></p>',10))]),a("details",T,[a("summary",null,[e[39]||(e[39]=a("a",{id:"Sargassum.sph2xy-Tuple{Real, Real}",href:"#Sargassum.sph2xy-Tuple{Real, Real}"},[a("span",{class:"jlbinding"},"Sargassum.sph2xy")],-1)),e[40]||(e[40]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[41]||(e[41]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sph2xy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lon, lat; eqr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x)</span></span></code></pre></div><p>Compute planar coordinates <code>[x, y]</code> from spherical coordinates <code>(lon, lat)</code> [deg E/W, deg N/S] using <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EquirectangularReference"><code>EquirectangularReference</code></a>, <code>eqr</code>, default <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EQR"><code>EQR</code></a>.</p><p>The units of <code>x</code> and <code>y</code> the same as <code>eqr.R</code>.</p><p><strong>Further Methods</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sph2xy(lon_range, lat_range; eqr = EQR)</span></span></code></pre></div><p>where <code>lon_range</code> and <code>lat_range</code> are <code>AbstractRange</code>. Returns <code>(x_range, y_range)</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sph2xy(lon_lat; eqr = EQR)</span></span></code></pre></div><p>where <code>lon_lat</code> is a <code>2 x N</code> `Matrix. Returns a result in the same shape as the input.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/coordinates.jl#L59-L75" target="_blank" rel="noreferrer">source</a></p>',9))]),a("details",C,[a("summary",null,[e[42]||(e[42]=a("a",{id:"Sargassum.xy2sph-Tuple{Real, Real}",href:"#Sargassum.xy2sph-Tuple{Real, Real}"},[a("span",{class:"jlbinding"},"Sargassum.xy2sph")],-1)),e[43]||(e[43]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[44]||(e[44]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xy2sph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, eqr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x)</span></span></code></pre></div><p>Compute spherical coordinates <code>[lon, lat]</code> [deg] from rectilinear coordinates <code>(x, y)</code> using <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EquirectangularReference"><code>EquirectangularReference</code></a> <code>eqr</code>, default <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EQR"><code>EQR</code></a>.</p><p>The units of <code>x</code> and <code>y</code> should be the same as <code>eqr.R</code>.</p><p><strong>Further Methods</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xy2sph(x_range, y_range)</span></span></code></pre></div><p>where <code>x_range</code> and <code>y_range</code> are <code>AbstractRange</code>. Returns <code>(lon_range, lat_range)</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xy2sph(xy)</span></span></code></pre></div><p>where <code>xy</code> is a <code>2 x N</code> <code>Matrix</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/coordinates.jl#L112-L128" target="_blank" rel="noreferrer">source</a></p>',9))]),a("details",x,[a("summary",null,[e[45]||(e[45]=a("a",{id:"Sargassum.γ_sphere-Tuple{Real}",href:"#Sargassum.γ_sphere-Tuple{Real}"},[a("span",{class:"jlbinding"},"Sargassum.γ_sphere")],-1)),e[46]||(e[46]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[47]||(e[47]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">γ_sphere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; eqr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x, geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate the geometric correction factor <code>sec(lat_0) * cos(lat)</code>, converting <code>y</code> to <code>lat</code> automatically using <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EquirectangularReference"><code>EquirectangularReference</code></a> <code>eqr</code>, default <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EQR"><code>EQR</code></a>.</p><p>If <code>geometry == false</code>, <code>γ_sphere</code> is always equal to <code>1.0</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/coordinates.jl#L172-L178" target="_blank" rel="noreferrer">source</a></p>',4))]),a("details",F,[a("summary",null,[e[48]||(e[48]=a("a",{id:"Sargassum.τ_sphere-Tuple{Real}",href:"#Sargassum.τ_sphere-Tuple{Real}"},[a("span",{class:"jlbinding"},"Sargassum.τ_sphere")],-1)),e[49]||(e[49]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[50]||(e[50]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">τ_sphere</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; eqr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x, geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate the geometric correction factor <code>τ = tan(lat)/R</code> converting <code>y</code> to <code>lat</code> automatically using <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EquirectangularReference"><code>EquirectangularReference</code></a> <code>eqr</code>, default <a href="/Sargassum.jl/dev/simulation-api#Sargassum.EQR"><code>EQR</code></a>.</p><p>If <code>geometry == false</code>, <code>τ_sphere</code> is always equal to <code>0.0</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Utilities/coordinates.jl#L184-L190" target="_blank" rel="noreferrer">source</a></p>',4))]),e[235]||(e[235]=a("h2",{id:"interpolants",tabindex:"-1"},[s("Interpolants "),a("a",{class:"header-anchor",href:"#interpolants","aria-label":'Permalink to "Interpolants"'},"​")],-1)),a("details",A,[a("summary",null,[e[51]||(e[51]=a("a",{id:"Sargassum.GriddedField",href:"#Sargassum.GriddedField"},[a("span",{class:"jlbinding"},"Sargassum.GriddedField")],-1)),e[52]||(e[52]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[53]||(e[53]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GriddedField{N, T, U}</span></span></code></pre></div><p>A container for gridded data, possibly time-dependent.</p><p><strong>Fields</strong></p><ul><li><p><code>dims_names</code>: A <code>Vector</code> of <code>Tuple{Symbol, Unitful.Unitlike}</code>s such that <code>dims_names[i][1]</code> is the <code>i</code>th dimension of <code>fields</code> and <code>dims_names[i][2]</code> gives the units of the <code>i</code>th dimension.</p></li><li><p><code>dims</code>: A <code>Dict</code> mapping variable names to ranges they take.</p></li><li><p><code>fields_names</code>: A <code>Vector</code> of <code>Tuple{Symbol, Unitful.Unitlike}</code>s such that <code>fields_names[i][1]</code> is the <code>i</code>th field and <code>fields_names[i][2]</code> gives its units.</p></li><li><p><code>fields</code>: A <code>Dict</code> mapping field names to their arrays.</p></li></ul><p><strong>Example</strong></p><p>If <code>GriddedField.dims_names == [(:x, u&quot;km&quot;), (:y, u&quot;km&quot;), (:t, u&quot;d&quot;)]</code>, this implies that the order of the dimensions of each field is <code>(x, y, t)</code> and further that the units of <code>x, y</code> and <code>t</code> are <code>km, km</code> and <code>d</code>, respectively.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GriddedField(n_dims; floats = Float64, ints = Int64)</span></span></code></pre></div><p>where <code>n_dims</code> is the number of dimensions of the field and <code>floats</code> and <code>ints</code> give the datatypes used. For example a water velocity field would have <code>n_dims = 3</code> from <code>(x, y, t)</code>. A land interpolant would have <code>n_dims = 2</code> from <code>(x, y)</code>, i.e. the land location is not time-dependent.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/main.jl#L1-L22" target="_blank" rel="noreferrer">source</a></p>',10))]),a("details",R,[a("summary",null,[e[54]||(e[54]=a("a",{id:"Sargassum.InterpolatedField",href:"#Sargassum.InterpolatedField"},[a("span",{class:"jlbinding"},"Sargassum.InterpolatedField")],-1)),e[55]||(e[55]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[56]||(e[56]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterpolatedField{N, T, U, I}</span></span></code></pre></div><p>A container for interpolants of gridded data, possibly time-dependent.</p><p><strong>Fields</strong></p><ul><li><p><code>dims_names</code>: A <code>Vector</code> of <code>Tuple{Symbol, Unitful.Unitlike}</code>s such that <code>dims_names[i][1]</code> is the <code>i</code>th dimension of <code>fields</code> and <code>dims_names[i][2]</code> gives the units of the <code>i</code>th dimension.</p></li><li><p><code>dims</code>: A <code>Dict</code> mapping variable names to ranges they take.</p></li><li><p><code>fields_names</code>: A <code>Vector</code> of <code>Tuple{Symbol, Unitful.Unitlike}</code>s such that <code>fields_names[i][1]</code> is the <code>i</code>th field and <code>fields_names[i][2]</code> gives its units.</p></li><li><p><code>fields</code>: A <code>Dict</code> mapping field names to their interpolants.</p></li></ul><p><strong>Example</strong></p><p>If <code>InterpolatedField.dims_names == [(:x, u&quot;km&quot;), (:y, u&quot;km&quot;), (:t, u&quot;d&quot;)]</code>, this implies that the order of the dimensions of each field is <code>(x, y, t)</code> and further that the units of <code>x, y</code> and <code>t</code> are <code>km, km</code> and <code>d</code>, respectively.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InterpolatedField(gf; interpolant_type = &quot;cubic&quot;, extrapolate_value = 0.0)</span></span></code></pre></div><p>where <code>gf</code> is a <a href="/Sargassum.jl/dev/simulation-api#Sargassum.GriddedField"><code>GriddedField</code></a> and with the optional arguments</p><ul><li><p><code>interpolant_type</code>: Two convenience flags are provided, <code>&quot;cubic&quot;</code> and <code>&quot;nearest&quot;</code> which refer to cubic BSpline and nearest-neighbor interpolation, respectively. Alternatively, any <code>Interpolations.InterpolationType</code> can be provided. Default <code>&quot;cubic&quot;</code>.</p></li><li><p><code>extrapolate_value</code>: A constant extrapolation is performed with this value. Default <code>&quot;0.0&quot;</code>.</p></li></ul><p><strong>Plotting</strong></p><p>This object can be <a href="/Sargassum.jl/dev/plotting-api#Sargassum.viz"><code>viz</code></a> and <a href="/Sargassum.jl/dev/plotting-api#Sargassum.viz!"><code>viz!</code></a>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/main.jl#L297-L325" target="_blank" rel="noreferrer">source</a></p>',13))]),a("details",I,[a("summary",null,[e[57]||(e[57]=a("a",{id:"Sargassum.add_derivatives!-Tuple{InterpolatedField}",href:"#Sargassum.add_derivatives!-Tuple{InterpolatedField}"},[a("span",{class:"jlbinding"},"Sargassum.add_derivatives!")],-1)),e[58]||(e[58]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[59]||(e[59]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_derivatives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itrf; interpolant_type, extrapolate_value, xyt_names, vxvy_names, Dx_Dy_vort_names, geometry)</span></span></code></pre></div><p>Add three additional fields to <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InterpolatedField"><code>InterpolatedField</code></a>, namely the x and y components of the material derivative and the vorticity.</p><p><strong>Arguments</strong></p><ul><li><code>itrf</code>: An <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InterpolatedField"><code>InterpolatedField</code></a>. The field should have <code>x</code>, <code>y</code> and <code>t</code> variables along with <code>x</code> and <code>y</code> components of the corresponding field (e.g. water currents.)</li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>interpolant_type</code>: Two convenience flags are provided, <code>&quot;cubic&quot;</code> and <code>&quot;nearest&quot;</code> which refer to cubic BSpline and nearest-neighbor interpolation, respectively. Alternatively, any <code>Interpolations.InterpolationType</code> can be provided. Default <code>&quot;cubic&quot;</code>.</p></li><li><p><code>extrapolate_value</code>: A constant extrapolation is performed with this value. Default <code>&quot;0.0&quot;</code>.</p></li><li><p><code>xyt_names</code>: A <code>Tuple</code> with three symbols, corresponding to the <code>x</code>,<code>y</code> and <code>t</code> variables in that order. Default <code>(:x, :y, :t)</code>.</p></li><li><p><code>vxvy_names</code>: A <code>Tuple</code> with two symbols, corresponding to the <code>x</code> and <code>y</code> components of the vector field, in that order. Default <code>(:u, :v)</code>.</p></li><li><p><code>Dx_Dy_vort_names</code>: A <code>Tuple</code> with three symbols, corresponding to the <code>x</code> component of the material derivative, the <code>y</code> component of the material derivative and the vorticity, in that order. Default <code>(:DDt_x, :DDt_y, :vorticity)</code>.</p></li><li><p><code>geometry</code>: If <code>true</code>, include factors that take into account the spherical geometry of the Earth. Default <code>true</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/main.jl#L370-L391" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",w,[a("summary",null,[e[60]||(e[60]=a("a",{id:"Sargassum.add_field!-Union{Tuple{I}, Tuple{N}, Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}} where {N, I<:Integer}",href:"#Sargassum.add_field!-Union{Tuple{I}, Tuple{N}, Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}} where {N, I<:Integer}"},[a("span",{class:"jlbinding"},"Sargassum.add_field!")],-1)),e[61]||(e[61]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[62]||(e[62]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_field!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf, infile, field_name_in, field_name_out, field_units_in, field_units_out; take_axes, permutation, scale_factor_name, add_offset_name, missings_name, missings_replacement)</span></span></code></pre></div><p>Add a new field to <code>gf::GriddedField</code> with data read from a NetCDF or MAT file <code>infile</code>.</p><p>The new dimension appears last in the list of field names.</p><p><strong>Arguments</strong></p><ul><li><p><code>gf</code>: The <a href="/Sargassum.jl/dev/simulation-api#Sargassum.GriddedField"><code>GriddedField</code></a> to be modified.</p></li><li><p><code>infile</code>: The path to the NetCDF/MAT file.</p></li><li><p><code>field_name_in</code>: A <code>String</code> giving the name of the field to read in as it appears in the NetCDF/MAT file.</p></li><li><p><code>field_name_out</code>: A <code>Symbol</code> giving the name of the added field in <code>gf</code>.</p></li><li><p><code>field_units_in</code>: A <code>Unitful.Unitlike</code> giving the units of the field as they appear in the NetCDF/MAT file.</p></li><li><p><code>field_units_out</code>: A <code>String</code> giving the kind of quantity being read; should be one of <code>keys(UNITS)</code>.</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>take_axes</code>: If provided, only the selected elements will be taken via <code>field[take_axes...]</code>. For example, if the <code>field</code> is four dimensional, passing <code>take_axes = [:,:,1,:]</code> would result in a three dimensional field with dimensions 1, 2 and 4 preserved - indexed on the first element of the third dimension. Default <code>nothing</code>.</p></li><li><p><code>permutation</code>: If provided, the field will be permuted according to <code>permutation</code>. Applied AFTER <code>take_axes</code>. Default <code>nothing</code>.</p></li><li><p><code>scale_factor_name</code>: The name of the scale factor, only for NetCDF files. If no scale factor is found, it is taken to be <code>1</code>. Default <code>&quot;scale_factor&quot;</code>.</p></li><li><p><code>add_offset_name</code>: The name of the additive offset, only for NetCDF files. If no additive offset is found, it is taken to be <code>0</code>. Default <code>&quot;add_offset&quot;</code>.</p></li><li><p><code>missings_name</code>: A vector of names of missing/fill/extra values, only for NetCDF files. Each such value will be replaced by <code>missings_replacement</code> if found. Default <code>[&quot;_FillValue&quot;, &quot;missing_value&quot;]</code>.</p></li><li><p><code>missings_replacement</code>: <code>missings_name</code> replaces the missing/fill/extra values with this. Default <code>0.0</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/main.jl#L163-L187" target="_blank" rel="noreferrer">source</a></p>',8))]),a("details",_,[a("summary",null,[e[63]||(e[63]=a("a",{id:"Sargassum.add_spatial_dimension!-Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}",href:"#Sargassum.add_spatial_dimension!-Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}"},[a("span",{class:"jlbinding"},"Sargassum.add_spatial_dimension!")],-1)),e[64]||(e[64]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[65]||(e[65]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_spatial_dimension!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf, infile, dim_name_in, dim_name_out, dim_units_in, dim_units_out; transform)</span></span></code></pre></div><p>Add a new spatial dimension to <code>gf::GriddedField</code> with data read from a NetCDF or MAT file <code>infile</code>.</p><p>The new dimension appears last in the list of dimension names.</p><p><strong>Arguments</strong></p><ul><li><p><code>gf</code>: The <a href="/Sargassum.jl/dev/simulation-api#Sargassum.GriddedField"><code>GriddedField</code></a> to be modified.</p></li><li><p><code>infile</code>: The path to the NetCDF/MAT file.</p></li><li><p><code>dim_name_in</code>: A <code>String</code> giving the name of the dimension to read in as it appears in the NetCDF/MAT file.</p></li><li><p><code>dim_name_out</code>: A <code>Symbol</code> giving the name of the added dimension in <code>gf</code>.</p></li><li><p><code>dim_units_in</code>: A <code>Unitful.Unitlike</code> giving the units of the dimension as they appear in the NetCDF/MAT file.</p></li><li><p><code>dim_units_out</code>: A <code>String</code> giving the kind of quantity being read; should be one of <code>keys(UNITS)</code>.</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>transform</code>: If provided, the dimension will be mapped according to <code>transform</code> before any other steps are taken. Default <code>nothing</code>.</p></li><li><p><code>force</code>: If <code>true</code>, the range will be constructed even if the vector isn&#39;t linearly spaced by linear interpolation preserving the length. Default <code>false</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/main.jl#L52-L72" target="_blank" rel="noreferrer">source</a></p>',8))]),a("details",D,[a("summary",null,[e[66]||(e[66]=a("a",{id:"Sargassum.add_temporal_dimension!-Union{Tuple{N}, Tuple{GriddedField, String, String, Symbol, DateTime, Unitful.FreeUnits{N, 𝐓, nothing}}} where N",href:"#Sargassum.add_temporal_dimension!-Union{Tuple{N}, Tuple{GriddedField, String, String, Symbol, DateTime, Unitful.FreeUnits{N, 𝐓, nothing}}} where N"},[a("span",{class:"jlbinding"},"Sargassum.add_temporal_dimension!")],-1)),e[67]||(e[67]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[68]||(e[68]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_temporal_dimension!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf, infile, time_name_in, time_name_out, time_start, time_period; transform, force)</span></span></code></pre></div><p>Add a new temporal dimension to <code>gf::GriddedField</code> with data read from a NetCDF or MAT file <code>infile</code>.</p><p>The new dimension appears last in the list of dimension names.</p><p><strong>Arguments</strong></p><ul><li><p><code>gf</code>: The <a href="/Sargassum.jl/dev/simulation-api#Sargassum.GriddedField"><code>GriddedField</code></a> to be modified.</p></li><li><p><code>infile</code>: The path to the NetCDF/MAT file.</p></li><li><p><code>time_name_in</code>: A <code>String</code> giving the name of the time dimension to read in as it appears in the NetCDF/MAT file.</p></li><li><p><code>time_name_out</code>: A <code>Symbol</code> giving the name of the added time dimension in <code>gf</code>.</p></li><li><p><code>time_start</code>: A <code>DateTime</code> giving the reference time of the time dimension, e.g. if the units of the NetCDF/MAT are <code>hours since 1990-01-01</code> then <code>time_start == DateTime(1900, 1, 1)</code>.</p></li><li><p><code>time_period</code>: A <code>Unitful.FreeUnits</code> giving the time step (units) of the time dimension. E.g. if the units of the NetCDF/MAT are <code>hours since 1990-01-01</code> then <code>time_period == u&quot;hr&quot;</code>.</p></li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>transform</code>: If provided, the dimension will be mapped according to <code>transform</code> before any other steps are taken. Default <code>nothing</code>.</p></li><li><p><code>force</code>: If <code>true</code>, the range will be constructed even if the vector isn&#39;t linearly spaced by linear interpolation preserving the length. Default <code>false</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/main.jl#L106-L126" target="_blank" rel="noreferrer">source</a></p>',8))]),a("details",L,[a("summary",null,[e[69]||(e[69]=a("a",{id:"Sargassum.ranges_increasing!-Tuple{GriddedField}",href:"#Sargassum.ranges_increasing!-Tuple{GriddedField}"},[a("span",{class:"jlbinding"},"Sargassum.ranges_increasing!")],-1)),e[70]||(e[70]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[71]||(e[71]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ranges_increasing!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf)</span></span></code></pre></div><p>Moddify <code>gf::GriddedField</code> in place so that each dimension has variable which are increasing. Fields are automatically reversed if necessary.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/main.jl#L240-L244" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",P,[a("summary",null,[e[72]||(e[72]=a("a",{id:"Sargassum.sph2xy!-Tuple{GriddedField}",href:"#Sargassum.sph2xy!-Tuple{GriddedField}"},[a("span",{class:"jlbinding"},"Sargassum.sph2xy!")],-1)),e[73]||(e[73]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[74]||(e[74]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sph2xy!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gf; lon_name, lat_name, x_name, y_name)</span></span></code></pre></div><p>Moddify <code>gf::GriddedField</code> in place so that its longitudinal and latitudinal dimensions are converted to equirectangular coordinates.</p><p><strong>Optional Arguments</strong></p><ul><li><p><code>lon_name</code>: A <code>Symbol</code> giving the name of the longitudinal variable in <code>gf</code>.</p></li><li><p><code>lat_name</code>: A <code>Symbol</code> giving the name of the latitudinal variable in <code>gf</code>.</p></li><li><p><code>x_name</code>: A <code>Symbol</code> giving the name of the equirectangular <code>x</code> variable to be used in the modified <code>gf</code>.</p></li><li><p><code>y_name</code>: A <code>Symbol</code> giving the name of the equirectangular <code>y</code> variable to be used in the modified <code>gf</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/main.jl#L261-L272" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",M,[a("summary",null,[e[75]||(e[75]=a("a",{id:"Sargassum.LAND_ITP",href:"#Sargassum.LAND_ITP"},[a("span",{class:"jlbinding"},"Sargassum.LAND_ITP")],-1)),e[76]||(e[76]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[77]||(e[77]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LAND_ITP</span></span></code></pre></div><p>The interpolant for landmass location. This is a <code>Ref</code>, access or modify the actual interpolant with <code>LAND_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/definitions.jl#L43-L47" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",q,[a("summary",null,[e[78]||(e[78]=a("a",{id:"Sargassum.NUTRIENTS_ITP",href:"#Sargassum.NUTRIENTS_ITP"},[a("span",{class:"jlbinding"},"Sargassum.NUTRIENTS_ITP")],-1)),e[79]||(e[79]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[80]||(e[80]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NUTRIENTS_ITP</span></span></code></pre></div><p>The interpolant for ocean nitrogen content. This is a <code>Ref</code>, access or modify the actual interpolant with <code>NO3_ITP_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/definitions.jl#L29-L33" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",B,[a("summary",null,[e[81]||(e[81]=a("a",{id:"Sargassum.STOKES_ITP",href:"#Sargassum.STOKES_ITP"},[a("span",{class:"jlbinding"},"Sargassum.STOKES_ITP")],-1)),e[82]||(e[82]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[83]||(e[83]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> STOKES_ITP</span></span></code></pre></div><p>The interpolant for Stokes drift velocity. This is a <code>Ref</code>, access or modify the actual interpolant with <code>STOKES_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/definitions.jl#L15-L19" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",N,[a("summary",null,[e[84]||(e[84]=a("a",{id:"Sargassum.TEMPERATURE_ITP",href:"#Sargassum.TEMPERATURE_ITP"},[a("span",{class:"jlbinding"},"Sargassum.TEMPERATURE_ITP")],-1)),e[85]||(e[85]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[86]||(e[86]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TEMPERATURE_ITP</span></span></code></pre></div><p>The interpolant for ocean temperature. This is a <code>Ref</code>, access or modify the actual interpolant with <code>TEMPERATURE_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/definitions.jl#L36-L40" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",G,[a("summary",null,[e[87]||(e[87]=a("a",{id:"Sargassum.WATER_ITP",href:"#Sargassum.WATER_ITP"},[a("span",{class:"jlbinding"},"Sargassum.WATER_ITP")],-1)),e[88]||(e[88]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[89]||(e[89]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WATER_ITP</span></span></code></pre></div><p>The interpolant for ocean currents. This is a <code>Ref</code>, access or modify the actual interpolant with <code>WATER_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/definitions.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",O,[a("summary",null,[e[90]||(e[90]=a("a",{id:"Sargassum.WAVES_ITP",href:"#Sargassum.WAVES_ITP"},[a("span",{class:"jlbinding"},"Sargassum.WAVES_ITP")],-1)),e[91]||(e[91]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[92]||(e[92]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WAVES_ITP</span></span></code></pre></div><p>The interpolant for wave height. This is a <code>Ref</code>, access or modify the actual interpolant with <code>WAVES_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/definitions.jl#L22-L26" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",U,[a("summary",null,[e[93]||(e[93]=a("a",{id:"Sargassum.WIND_ITP",href:"#Sargassum.WIND_ITP"},[a("span",{class:"jlbinding"},"Sargassum.WIND_ITP")],-1)),e[94]||(e[94]=s()),o(i,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),e[95]||(e[95]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WIND_ITP</span></span></code></pre></div><p>The interpolant for wind speed. This is a <code>Ref</code>, access or modify the actual interpolant with <code>WIND_ITP.x</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/definitions.jl#L8-L12" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",W,[a("summary",null,[e[96]||(e[96]=a("a",{id:"Sargassum.itps_load-Tuple{}",href:"#Sargassum.itps_load-Tuple{}"},[a("span",{class:"jlbinding"},"Sargassum.itps_load")],-1)),e[97]||(e[97]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[98]||(e[98]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">itps_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ITPS_SCRATCH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x)</span></span></code></pre></div><p>Attempt to load the interpolants in directory <code>dir</code>.</p><p>This assumes that there exists in this directory the following files, each containing a variable as follows</p><table tabindex="0"><thead><tr><th style="text-align:left;">File Name</th><th style="text-align:left;">Variable Name</th></tr></thead><tbody><tr><td style="text-align:left;">WATER_ITP.jld2</td><td style="text-align:left;">WATER_ITP</td></tr><tr><td style="text-align:left;">WIND_ITP.jld2</td><td style="text-align:left;">WIND_ITP</td></tr><tr><td style="text-align:left;">STOKES_ITP.jld2</td><td style="text-align:left;">STOKES_ITP</td></tr><tr><td style="text-align:left;">WAVES_ITP.jld2</td><td style="text-align:left;">WAVES_ITP</td></tr><tr><td style="text-align:left;">NUTRIENTS_ITP.jld2</td><td style="text-align:left;">NUTRIENTS_ITP</td></tr><tr><td style="text-align:left;">TEMPERATURE_ITP.jld2</td><td style="text-align:left;">TEMPERATURE_ITP</td></tr><tr><td style="text-align:left;">LAND_ITP.jld2</td><td style="text-align:left;">LAND_ITP</td></tr></tbody></table><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/definitions.jl#L50-L67" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",V,[a("summary",null,[e[99]||(e[99]=a("a",{id:"Sargassum.itps_default_construct-Tuple{}",href:"#Sargassum.itps_default_construct-Tuple{}"},[a("span",{class:"jlbinding"},"Sargassum.itps_default_construct")],-1)),e[100]||(e[100]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[101]||(e[101]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">itps_default_construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; download </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Construct all interpolants using the default data.</p><p>This overwrites any default interpolants already constructed.</p><p>Interpolants constructed: water, wind, stokes, waves, nutrients, temperature, land.</p><p><strong>Optional Arguments</strong></p><ul><li><p><code>download</code>: If <code>true</code>, download the data (roughly 1.2 GB of NetCDF files).</p></li><li><p><code>verbose</code>: If <code>true</code>, print itp construction stats. Default <code>true</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/default.jl#L156-L169" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",Q,[a("summary",null,[e[102]||(e[102]=a("a",{id:"Sargassum.boundary-Tuple{InterpolatedField}",href:"#Sargassum.boundary-Tuple{InterpolatedField}"},[a("span",{class:"jlbinding"},"Sargassum.boundary")],-1)),e[103]||(e[103]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[104]||(e[104]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">boundary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itp)</span></span></code></pre></div><p>Return a the corners of the spatio-temporal box the interpolant is defined in.</p><p>If <code>itp</code> is time-dependent, return <code>(lon_min, lon_max, lat_min, lat_max, t_min, t_max)</code>.</p><p>If <code>itp</code> is time-independent, <code>(lon_min, lon_max, lat_min, lat_max)</code>.</p><p>Assumes that the <code>(x, y, t)</code> variables are named <code>(:x, :y, :t)</code>, respectively.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lon_min, lon_max, lat_min, lat_max, t_min, t_max) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boundary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lon_min, lon_max, lat_min, lat_max) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boundary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LAND_ITP)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/interface.jl#L20-L40" target="_blank" rel="noreferrer">source</a></p>',9))]),a("details",z,[a("summary",null,[e[105]||(e[105]=a("a",{id:"Sargassum.dim-Tuple{Ref{InterpolatedField}, Symbol}",href:"#Sargassum.dim-Tuple{Ref{InterpolatedField}, Symbol}"},[a("span",{class:"jlbinding"},"Sargassum.dim")],-1)),e[106]||(e[106]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[107]||(e[107]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itp, name)</span></span></code></pre></div><p>Return the variable of <code>itp</code> whose value corresponds to the dimension indicated by <code>name</code>.</p><p>Use <a href="/Sargassum.jl/dev/simulation-api#Sargassum.dims-Tuple{Ref{InterpolatedField}}"><code>dims</code></a> to see a list of possible values of <code>name</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># the x values defining interpolant knots</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/interface.jl#L56-L68" target="_blank" rel="noreferrer">source</a></p>',6))]),a("details",H,[a("summary",null,[e[108]||(e[108]=a("a",{id:"Sargassum.dims-Tuple{Ref{InterpolatedField}}",href:"#Sargassum.dims-Tuple{Ref{InterpolatedField}}"},[a("span",{class:"jlbinding"},"Sargassum.dims")],-1)),e[109]||(e[109]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[110]||(e[110]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itp)</span></span></code></pre></div><p>Return the list of variable name/unit pairs of <code>itp</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/interface.jl#L71-L81" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",K,[a("summary",null,[e[111]||(e[111]=a("a",{id:"Sargassum.field-Tuple{Ref{InterpolatedField}, Symbol}",href:"#Sargassum.field-Tuple{Ref{InterpolatedField}, Symbol}"},[a("span",{class:"jlbinding"},"Sargassum.field")],-1)),e[112]||(e[112]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[113]||(e[113]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itp, name)</span></span></code></pre></div><p>Return the sub-interpolant of <code>itp</code> whose value corresponds to the field indicated by <code>name</code>.</p><p>Use <a href="/Sargassum.jl/dev/simulation-api#Sargassum.fields-Tuple{Ref{InterpolatedField}}"><code>fields</code></a> to see a list of possible values of <code>name</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v_x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># the x component of the water velocity</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v_x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># evaluate it at `(x, y, t) = (1, 2, 3)`.</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/interface.jl#L84-L97" target="_blank" rel="noreferrer">source</a></p>',6))]),a("details",$,[a("summary",null,[e[114]||(e[114]=a("a",{id:"Sargassum.fields-Tuple{Ref{InterpolatedField}}",href:"#Sargassum.fields-Tuple{Ref{InterpolatedField}}"},[a("span",{class:"jlbinding"},"Sargassum.fields")],-1)),e[115]||(e[115]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[116]||(e[116]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itp)</span></span></code></pre></div><p>Return the list of field name/unit pairs of <code>itp</code>.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/interface.jl#L100-L110" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",J,[a("summary",null,[e[117]||(e[117]=a("a",{id:"Sargassum.update_interpolant!-Tuple{Ref{InterpolatedField}, InterpolatedField}",href:"#Sargassum.update_interpolant!-Tuple{Ref{InterpolatedField}, InterpolatedField}"},[a("span",{class:"jlbinding"},"Sargassum.update_interpolant!")],-1)),e[118]||(e[118]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[119]||(e[119]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update_interpolant!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(itp, itp_new)</span></span></code></pre></div><p>Update (replace) <code>itp</code> with <code>itp_new</code>, where <code>itp_new</code> should be an <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InterpolatedField"><code>InterpolatedField</code></a> and <code>itp</code> should be one of</p><ul><li><p><code>WATER_ITP</code></p></li><li><p><code>WIND_ITP</code></p></li><li><p><code>STOKES_ITP</code></p></li><li><p><code>WAVES_ITP</code></p></li><li><p><code>NUTRIENTS_ITP</code></p></li><li><p><code>TEMPERATURE_ITP</code></p></li><li><p><code>LAND_ITP</code></p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Interpolants/interface.jl#L1-L13" target="_blank" rel="noreferrer">source</a></p>',4))]),e[236]||(e[236]=a("h2",{id:"raftparameters",tabindex:"-1"},[s("RaftParameters "),a("a",{class:"header-anchor",href:"#raftparameters","aria-label":'Permalink to "RaftParameters"'},"​")],-1)),e[237]||(e[237]=a("h3",{id:"Rafts-and-Clumps",tabindex:"-1"},[s("Rafts and Clumps "),a("a",{class:"header-anchor",href:"#Rafts-and-Clumps","aria-label":'Permalink to "Rafts and Clumps {#Rafts-and-Clumps}"'},"​")],-1)),a("details",X,[a("summary",null,[e[120]||(e[120]=a("a",{id:"Sargassum.ClumpParameters",href:"#Sargassum.ClumpParameters"},[a("span",{class:"jlbinding"},"Sargassum.ClumpParameters")],-1)),e[121]||(e[121]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[122]||(e[122]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClumpParameters</span></span></code></pre></div><p>A container for the high-level parameters of the BOM equations.</p><p><strong>Fields</strong></p><ul><li><p><code>α</code> []: The fraction of the wind field acting on the particle.</p></li><li><p><code>τ</code> [d]: Measures the inertial response time of the medium to the particle</p></li><li><p><code>R</code> []: A geometric parameter.</p></li><li><p><code>Ω</code> [1/d]: The angular velocity of the Earth.</p></li><li><p><code>σ</code> []: The Stokes drift parameter; this applies an additional fraction of the Stokes drift to the water velocity component of the particle.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ClumpParameters(; constants...)</span></span></code></pre></div><p>Compute the parameters required for the eBOM equations from physical constants.</p><p><strong>Constants</strong></p><ul><li><p><code>δ</code> []: The bouyancy of the particle. Default: <code>1.25</code>.</p></li><li><p><code>a</code> [km]: The radius of the particle. Default: <code>1.0e-4</code>.</p></li><li><p><code>ρ</code> [kg/km^3]: The density of the water. Default: <code>1027.0e9</code>.</p></li><li><p><code>ρa</code> [kg/km^3]: The density of the air. Default: <code>1.2e9</code>.</p></li><li><p><code>ν</code> [km^2/d]: The viscosity of the water. Default: <code>8.64e-8</code>.</p></li><li><p><code>νa</code> [km^2/d]: The viscosity of the air. Default: <code>1.296e-6</code>.</p></li><li><p><code>Ω</code> [rad/d]: The angular velocity of the Earth. Default: <code>2π</code>.</p></li><li><p><code>σ</code> []: The Stokes drift parameter. Default: <code>0.0</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/rafts-clumps.jl#L1-L30" target="_blank" rel="noreferrer">source</a></p>',10))]),a("details",Y,[a("summary",null,[e[123]||(e[123]=a("a",{id:"Sargassum.RaftParameters",href:"#Sargassum.RaftParameters"},[a("span",{class:"jlbinding"},"Sargassum.RaftParameters")],-1)),e[124]||(e[124]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[125]||(e[125]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RaftParameters{S, C, G, L, I}</span></span></code></pre></div><p>A container for the parameters defining a raft. Each clump and spring are identical.</p><p><strong>Structure</strong></p><p><code>RaftParameters</code> acts as the parameter container for <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Raft!</code></a>. The solution vector <code>u</code> is a <code>2 x N</code> <code>Matrix</code> of the form <code>[x1 x2 ... xN ; y1 y2 ... yN]</code> giving the initial coordinates of each clump.</p><p><strong>Fields</strong></p><ul><li><p><code>ics</code>: An <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InitialConditions"><code>InitialConditions</code></a>.</p></li><li><p><code>clumps</code>: The <a href="/Sargassum.jl/dev/simulation-api#Sargassum.ClumpParameters"><code>ClumpParameters</code></a> shared by each clump in the raft.</p></li><li><p><code>springs</code>: A subtype of <a href="/Sargassum.jl/dev/simulation-api#Sargassum.AbstractSpring"><code>AbstractSpring</code></a>.</p></li><li><p><code>connections</code>: A subtype of <a href="/Sargassum.jl/dev/simulation-api#Sargassum.AbstractConnections"><code>AbstractConnections</code></a>.</p></li><li><p><code>gd_model</code>: A subtype of <a href="/Sargassum.jl/dev/simulation-api#Sargassum.AbstractGrowthDeathModel"><code>AbstractGrowthDeathModel</code></a>.</p></li><li><p><code>land</code>: A subtype of <a href="/Sargassum.jl/dev/simulation-api#Sargassum.AbstractLand"><code>AbstractLand</code></a>.</p></li><li><p><code>n_clumps_max</code>: An <code>Integer</code> equal to the maximum allowed number of clumps. The number of clumps will not exceed this for any reason.</p></li><li><p><code>living</code>: A <code>BitVector</code> such that <code>living[i] == true</code> if the clump with index <code>i</code> is alive.</p></li><li><p><code>n_clumps_tot</code>: An <code>Base.RefValue{Int64}</code> whose reference is equal to the total number of clumps that have ever existed (i.e. it is at least the number of clumps that exist at any specific time.)</p></li><li><p><code>geometry</code>: A <code>Bool</code> that toggles whether to apply the geometric correction factors <a href="/Sargassum.jl/dev/simulation-api#Sargassum.γ_sphere-Tuple{Real}"><code>γ_sphere</code></a> and <a href="/Sargassum.jl/dev/simulation-api#Sargassum.τ_sphere-Tuple{Real}"><code>τ_sphere</code></a>. Note that the simulation still uses the available interpolants, therefore if the interpolants have been created with geometric corrections included, but <code>RaftParameters</code> is created with <code>geometry == false</code>, the result will be a mixture of corrected and uncorrected terms.</p></li><li><p><code>dx_MR</code>: <code>dx</code> of the Maxey-Riley equation. When provided, integration is done using <a href="/Sargassum.jl/dev/simulation-api#Sargassum.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"><code>FastRaft!</code></a>.</p></li><li><p><code>dy_MR</code>: <code>dy</code> of the Maxey-Riley equation. When provided, integration is done using <a href="/Sargassum.jl/dev/simulation-api#Sargassum.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"><code>FastRaft!</code></a>.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RaftParameters(; ics, clumps, springs, connections, gd_model, land, n_clumps_max, geometry = true, fast_raft = false)</span></span></code></pre></div><p>The quantities <code>living</code> and <code>n_clumps_tot</code> are computed automatically under the assumption that the clumps initially provided are all alive.</p><p><strong>Fast Raft</strong></p><p>If <code>fast_raft == true</code> in the above constructor, then the equations will be integrated using <a href="/Sargassum.jl/dev/simulation-api#Sargassum.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"><code>FastRaft!</code></a>. This is faster than <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Raft!</code></a> at the expense of a more front-loaded computation since the interpolants must be computed. Using fast raft is advisable when the number of clumps is large. Default <code>false</code>.</p><p>One can also set <code>fast_raft = (dx_MR, dy_MR)</code> directly if the interpolants have been computed previously using <a href="/Sargassum.jl/dev/simulation-api#Sargassum.dxdy_MR-Tuple{Tuple{Real, Real}, ClumpParameters}"><code>dxdy_MR</code></a>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/rafts-clumps.jl#L64-L100" target="_blank" rel="noreferrer">source</a></p>',13))]),a("details",Z,[a("summary",null,[e[126]||(e[126]=a("a",{id:"Sargassum.dxdy_MR-Tuple{Tuple{Real, Real}, ClumpParameters}",href:"#Sargassum.dxdy_MR-Tuple{Tuple{Real, Real}, ClumpParameters}"},[a("span",{class:"jlbinding"},"Sargassum.dxdy_MR")],-1)),e[127]||(e[127]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[128]||(e[128]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dxdy_MR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tspan, clumps; geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute <code>(dx, dy)</code> where <code>dx</code> and <code>dy</code> are interpolants evaluable at <code>(x, y, t)</code> equal to the right-hand-side of the Maxey-Riley equations (spring force excluded).</p><p>This is automatically applied when a fast raft is selected in <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Raft!</code></a>.</p><p><strong>Optional Arguments</strong></p><ul><li><code>geometry</code>: Passed directly to <code>γ_sphere</code>](@ref) and <a href="/Sargassum.jl/dev/simulation-api#Sargassum.τ_sphere-Tuple{Real}"><code>τ_sphere</code></a>.</li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/rafts-clumps.jl#L162-L173" target="_blank" rel="noreferrer">source</a></p>',6))]),e[238]||(e[238]=a("h3",{id:"Initial-Conditions",tabindex:"-1"},[s("Initial Conditions "),a("a",{class:"header-anchor",href:"#Initial-Conditions","aria-label":'Permalink to "Initial Conditions {#Initial-Conditions}"'},"​")],-1)),a("details",ee,[a("summary",null,[e[129]||(e[129]=a("a",{id:"Sargassum.InitialConditions",href:"#Sargassum.InitialConditions"},[a("span",{class:"jlbinding"},"Sargassum.InitialConditions")],-1)),e[130]||(e[130]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[131]||(e[131]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InitialConditions</span></span></code></pre></div><p>A container for the initial conditions for a raft.</p><p><strong>Fields</strong></p><ul><li><p><code>tspan</code>: A <code>Tuple</code> such that the integration is performed for <code>tspan[1] ≤ t ≤ tspan[2]</code> where <code>t</code> is either two two <code>DateTime</code>s or two <code>Real</code>s measured in <code>UNITS[&quot;time&quot;]</code> since <a href="/Sargassum.jl/dev/simulation-api#Sargassum.T_REF"><code>T_REF</code></a>.</p></li><li><p><code>ics</code>: A <code>2 x N</code> <code>Matrix</code> of the form <code>[x1 x2 ... xN ; y1 y2 ... yN]</code> giving the initial coordinates of each clump.</p></li></ul><p><strong>Generic constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(;tspan, ics)</span></span></code></pre></div><p><strong>Constructing from positions</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(tspan, xy0; to_xy)</span></span></code></pre></div><p>Construct initial conditions suitable for use in <code>RaftParameters.ics</code> from <code>2 x N</code> <code>Matrix</code>, <code>xy0</code> which should be equirectangular coordinates.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(tspan, x_range, y_range; to_xy)</span></span></code></pre></div><p>Generate clumps in a rectangular arrangement.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(tspan, x0, y0; to_xy)</span></span></code></pre></div><p>Generate a single clump with coordinates <code>(x0, y0)</code>.</p><p><strong>Optional Arguments</strong></p><p><code>to_xy</code>: If <code>true</code>, the coordinates are converted from spherical to equirectangular coordinates. Default <code>false</code>.</p><p><strong>Constructing from a SargassumDistribution</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>InitialConditions(tspan, dist, weeks, levels; seed)</span></span></code></pre></div><p>Construct <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InitialConditions"><code>InitialConditions</code></a> from a <code>SargassumDistribution</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>tspan</code>: A 2-<code>Tuple</code> such that the integration is performed for <code>tspan[1] ≤ t ≤ tspan[2]</code> where <code>t</code> is either two two <code>DateTime</code>s or two <code>Real</code>s measured in <code>UNITS[&quot;time&quot;]</code> since <a href="/Sargassum.jl/dev/simulation-api#Sargassum.T_REF"><code>T_REF</code></a>.</p></li><li><p><code>dist</code>: A <code>SargassumDistribution</code>.</p></li><li><p><code>weeks</code>: A <code>Vector{&lt;:Integer}</code> giving the weeks of the month to consider. Each entry should be between 1 and 4 and appear only once.</p></li><li><p><code>levels</code>: The number of clump levels. Note that this is NOT equal to the number of clumps, see below.</p></li></ul><p><strong>Levels</strong></p><p>Boxes with nonzero Sargassum content are divided into <code>levels</code> levels of size <code>(maximum(D) - minimum(D))/levels</code> where <code>D = log10.(dist.sargassm[:,:,weeks])</code>. Each box gets a number of clumps equal to its level index. For example, if <code>levels = 2</code>, then the smaller half of the boxes (by Sargassum content) get 1 clump each and the larger half get 2 clumps each.</p><p><strong>Optional Arguments</strong></p><ul><li><code>seed</code>: <code>Random.seed!(seed)</code> is called before the the initialization. Default 1234.</li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/ics.jl#L1-L52" target="_blank" rel="noreferrer">source</a></p>',25))]),e[239]||(e[239]=a("h3",{id:"springs",tabindex:"-1"},[s("Springs "),a("a",{class:"header-anchor",href:"#springs","aria-label":'Permalink to "Springs"'},"​")],-1)),a("details",ae,[a("summary",null,[e[132]||(e[132]=a("a",{id:"Sargassum.AbstractConnections",href:"#Sargassum.AbstractConnections"},[a("span",{class:"jlbinding"},"Sargassum.AbstractConnections")],-1)),e[133]||(e[133]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[134]||(e[134]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractConnections</span></span></code></pre></div><p>A supertype for all connections between clumps.</p><p>Every subtype of <code>AbstractConnections</code> should be mutable with a field <code>connections</code> which is similar to a vector of vectors such that that <code>connections[i]</code> is a list of clump indices that are connected to clump <code>i</code>.</p><p>This should be updated in-place during the integration, i.e. it only shows the connections at the current time.</p><p>Every subtype of <code>AbstractConnections</code> should implement a <code>form_connections(con::Connections, u)</code> method which returns what <code>con.connections</code> should be updated with, assuming that <code>u</code> is the solution vector. The correction of indices due to living clumps is provided automatically later, so here it can be assumed that <code>u</code> contains only living clumps.</p><p>Any subtype of <code>AbstractConnections</code> can be evaluated at an <code>OrdinaryDiffEq.integrator</code> for callback purposes.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L1-L18" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",se,[a("summary",null,[e[135]||(e[135]=a("a",{id:"Sargassum.AbstractSpring",href:"#Sargassum.AbstractSpring"},[a("span",{class:"jlbinding"},"Sargassum.AbstractSpring")],-1)),e[136]||(e[136]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[137]||(e[137]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractSpring</span></span></code></pre></div><p>A supertype for all spring parameters. Each clump, when conncted, is joined by the same kind of spring.</p><p>Every subtype of <code>AbstractSpring</code> should have a field <code>k::Function</code> representing the stiffness force and callable as <code>k(x)</code> as well as a field <code>L::Real</code> representing the spring&#39;s natural length.</p><p>All forces are computed using</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xy1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xy2)</span></span></code></pre></div><p>where <code>d = norm(xy1 - xy2)</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L137-L152" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",te,[a("summary",null,[e[138]||(e[138]=a("a",{id:"Sargassum.BOMBSpring",href:"#Sargassum.BOMBSpring"},[a("span",{class:"jlbinding"},"Sargassum.BOMBSpring")],-1)),e[139]||(e[139]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[140]||(e[140]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BOMBSpring{F}</span></span></code></pre></div><p>A subtype of <code>AbstractSpring</code> representing a BOMB spring of the form <code>A * (exp((x - 2*L)/0.2) + 1)^(-1)</code>.</p><p><strong>Extra fields</strong></p><ul><li><code>A</code>: The amplitude of the force.</li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BOMBSpring(A::Real, L::Real)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L174-L186" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",ie,[a("summary",null,[e[141]||(e[141]=a("a",{id:"Sargassum.ConnectionsFull",href:"#Sargassum.ConnectionsFull"},[a("span",{class:"jlbinding"},"Sargassum.ConnectionsFull")],-1)),e[142]||(e[142]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[143]||(e[143]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectionsFull</span></span></code></pre></div><p>A connection type such that every clump is connected to every other clump.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ConnectionsFull(n_clumps_max)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L53-L61" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",oe,[a("summary",null,[e[144]||(e[144]=a("a",{id:"Sargassum.ConnectionsNearest",href:"#Sargassum.ConnectionsNearest"},[a("span",{class:"jlbinding"},"Sargassum.ConnectionsNearest")],-1)),e[145]||(e[145]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[146]||(e[146]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectionsNearest</span></span></code></pre></div><p>A connection type such that every clump is connected to a number of its nearest neighbors.</p><p><strong>Fields</strong></p><ul><li><code>neighbors</code>: The number of nearest neighbors each clump should be connected to.</li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ConnectionsNearest(n_clumps_max, neighbors)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L103-L115" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",le,[a("summary",null,[e[147]||(e[147]=a("a",{id:"Sargassum.ConnectionsNone",href:"#Sargassum.ConnectionsNone"},[a("span",{class:"jlbinding"},"Sargassum.ConnectionsNone")],-1)),e[148]||(e[148]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[149]||(e[149]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectionsNone</span></span></code></pre></div><p>A connection type such that no clumps are connected.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ConnectionsNone(n_clumps_max)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L32-L40" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",ne,[a("summary",null,[e[150]||(e[150]=a("a",{id:"Sargassum.ConnectionsRadius",href:"#Sargassum.ConnectionsRadius"},[a("span",{class:"jlbinding"},"Sargassum.ConnectionsRadius")],-1)),e[151]||(e[151]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[152]||(e[152]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConnectionsRadius</span></span></code></pre></div><p>A connection type such that every clump is connected to every clump within a given radius.</p><p><strong>Fields</strong></p><ul><li><code>radius</code>: A distance (assumed in <code>UNITS[&quot;distance&quot;]</code>) such that each clump is connected to every clump whose distance is at most <code>radius</code> from it.</li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ConnectionsRadius(n_clumps_max, radius)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L74-L86" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",de,[a("summary",null,[e[153]||(e[153]=a("a",{id:"Sargassum.HookeSpring",href:"#Sargassum.HookeSpring"},[a("span",{class:"jlbinding"},"Sargassum.HookeSpring")],-1)),e[154]||(e[154]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[155]||(e[155]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HookeSpring{F}</span></span></code></pre></div><p>A subtype of <code>AbstractSpring</code> representing a spring with a constant stiffness.</p><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HookeSpring(k::Real, L::Real)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L155-L163" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",re,[a("summary",null,[e[156]||(e[156]=a("a",{id:"Sargassum.ΔL-Tuple{AbstractRange, AbstractRange}",href:"#Sargassum.ΔL-Tuple{AbstractRange, AbstractRange}"},[a("span",{class:"jlbinding"},"Sargassum.ΔL")],-1)),e[157]||(e[157]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[158]||(e[158]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ΔL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_range, y_range; to_xy)</span></span></code></pre></div><p>Compute a spring length from a rectangular arrangement of clumps provided by <code>x_range</code> and <code>y_range</code>. This is the distance between the centers of diagonally-adjacent gridpoints. These should be equirectangular coordinates.</p><p><strong>Optional Arguments</strong></p><p><code>to_xy</code>: If <code>true</code>, the coordinates are converted from spherical to equirectangular coordinates. Default <code>false</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L198-L207" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",pe,[a("summary",null,[e[159]||(e[159]=a("a",{id:"Sargassum.ΔL-Tuple{InitialConditions}",href:"#Sargassum.ΔL-Tuple{InitialConditions}"},[a("span",{class:"jlbinding"},"Sargassum.ΔL")],-1)),e[160]||(e[160]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[161]||(e[161]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ΔL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">InitialConditions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute a spring length from a <code>InitialConditions</code>. This is the median among all pairwise equirectangular distances between points&#39; <code>k</code> nearest neighbors. Default <code>k = 5</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L228-L233" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",ce,[a("summary",null,[e[162]||(e[162]=a("a",{id:"Sargassum.ΔL-Tuple{SargassumDistribution}",href:"#Sargassum.ΔL-Tuple{SargassumDistribution}"},[a("span",{class:"jlbinding"},"Sargassum.ΔL")],-1)),e[163]||(e[163]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[164]||(e[164]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ΔL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SargassumDistribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute a spring length from a <code>SargassumDistribution</code>. This is the equirectangular distance between the centers of diagonally-adjacent gridpoints.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/springs.jl#L216-L221" target="_blank" rel="noreferrer">source</a></p>',3))]),e[240]||(e[240]=a("h3",{id:"land",tabindex:"-1"},[s("Land "),a("a",{class:"header-anchor",href:"#land","aria-label":'Permalink to "Land"'},"​")],-1)),a("details",ue,[a("summary",null,[e[165]||(e[165]=a("a",{id:"Sargassum.AbstractLand",href:"#Sargassum.AbstractLand"},[a("span",{class:"jlbinding"},"Sargassum.AbstractLand")],-1)),e[166]||(e[166]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[167]||(e[167]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractLand</span></span></code></pre></div><p>A supertype for all land/shore types.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/land.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",he,[a("summary",null,[e[168]||(e[168]=a("a",{id:"Sargassum.Land",href:"#Sargassum.Land"},[a("span",{class:"jlbinding"},"Sargassum.Land")],-1)),e[169]||(e[169]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[170]||(e[170]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Land{I}</span></span></code></pre></div><p>A container for data handling death of clumps upon reaching the shore.</p><p><strong>Fields</strong></p><ul><li><p><code>land_itp</code>: A <code>InterpolatedField</code> such that <code>land_itp.fields[:land](x, y)</code> is equal to <code>1.0</code> if <code>(x, y)</code> is on land and <code>0.0</code> otherwise.</p></li><li><p><code>deaths</code>: A <code>Vector</code> of indices of clumps that are to be killed.</p></li><li><p><code>verbose</code>: A <code>Bool</code> such that <code>verbose = true</code> will log times and labels of clumps that hit land.</p></li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Land(;land_itp::InterpolatedField = land_itp, verbose = false)</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/land.jl#L26-L40" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",ge,[a("summary",null,[e[171]||(e[171]=a("a",{id:"Sargassum.NoLand",href:"#Sargassum.NoLand"},[a("span",{class:"jlbinding"},"Sargassum.NoLand")],-1)),e[172]||(e[172]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[173]||(e[173]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NoLand</span></span></code></pre></div><p>An <a href="/Sargassum.jl/dev/simulation-api#Sargassum.AbstractLand"><code>AbstractLand</code></a> such that the land/shore is completely ignored.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/land.jl#L8-L12" target="_blank" rel="noreferrer">source</a></p>',3))]),e[241]||(e[241]=a("h3",{id:"biology",tabindex:"-1"},[s("Biology "),a("a",{class:"header-anchor",href:"#biology","aria-label":'Permalink to "Biology"'},"​")],-1)),a("details",me,[a("summary",null,[e[174]||(e[174]=a("a",{id:"Sargassum.AbstractGrowthDeathModel",href:"#Sargassum.AbstractGrowthDeathModel"},[a("span",{class:"jlbinding"},"Sargassum.AbstractGrowthDeathModel")],-1)),e[175]||(e[175]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[176]||(e[176]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractGrowthDeathModel</span></span></code></pre></div><p>The abstract type for growth and death models.</p><p>Subtypes must have a field <code>S</code>, a <code>Vector{Float64}</code> of length <code>n_clumps_max</code> representing an &quot;amount&quot; or &quot;mass&quot; for each clump.</p><p>Subtypes must have a field <code>S_gen</code>, which is a <code>Distributions.Sampleable{Univariate, ...}</code> such that <code>rand(S_gen)</code> generates a sample of <code>S</code>. E.g. <code>S_gen = Distributions.Dirac(0.0)</code> will always initialize clumps with <code>S = fill(0.0, n_clumps_max)</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/growth-death.jl#L3-L12" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",be,[a("summary",null,[e[177]||(e[177]=a("a",{id:"Sargassum.BrooksModel",href:"#Sargassum.BrooksModel"},[a("span",{class:"jlbinding"},"Sargassum.BrooksModel")],-1)),e[178]||(e[178]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[179]||(e[179]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mutable struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BrooksModel{B, D}</span></span></code></pre></div><p>The growth/death model of <a href="https://www.int-res.com/abstracts/meps/v599/p1-18/" target="_blank" rel="noreferrer">Brooks et al. (2018)</a>.</p><p><strong>Fields</strong></p><ul><li><p><code>S</code>: The amount parameter.</p></li><li><p><code>S_gen</code>. The amount generator.</p></li><li><p><code>params</code>: The <a href="/Sargassum.jl/dev/simulation-api#Sargassum.BrooksModelParameters"><code>BrooksModelParameters</code></a> parameters of the model.</p></li><li><p><code>growths</code>:A <code>Vector</code> of indices of clumps that are to be grown (if any).</p></li><li><p><code>deaths</code>: A <code>Vector</code> of indices of clumps that are to be killed (if any).</p></li><li><p><code>verbose</code>: A <code>Bool</code> such that <code>verbose = true</code> will log times and labels of clumps that grow and die.</p></li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BrooksModel(n_clumps_max; S_gen = Dirac(0.0), params = BrooksModelParameters(), verbose = false)</span></span></code></pre></div><p><strong>Logic</strong></p><p>At each time step, <code>model.S</code> is modified by <code>model.params.dSdt * dt</code>. The resulting <code>S</code> values are each compared to <code>model.params.S_min</code> and <code>model.params.S_max</code> and the associated <code>i</code>th clump either dies or spawns a child according to <code>grow!(integrator, location = i)</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/growth-death.jl#L128-L150" target="_blank" rel="noreferrer">source</a></p>',9))]),a("details",fe,[a("summary",null,[e[180]||(e[180]=a("a",{id:"Sargassum.BrooksModelParameters",href:"#Sargassum.BrooksModelParameters"},[a("span",{class:"jlbinding"},"Sargassum.BrooksModelParameters")],-1)),e[181]||(e[181]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[182]||(e[182]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BrooksModelParameters{I, F}</span></span></code></pre></div><p>A container for the parameters of the model of <a href="https://www.int-res.com/abstracts/meps/v599/p1-18/" target="_blank" rel="noreferrer">Brooks et al. (2018)</a>.</p><p><strong>Parameters</strong></p><ul><li><p><code>temp</code> [°C]: An <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InterpolatedField"><code>InterpolatedField</code></a> for the water temperature. Default <code>TEMPERATURE_ITP.x</code>.</p></li><li><p><code>no3</code> [mmol N/m^3]: An <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InterpolatedField"><code>InterpolatedField</code></a> for the Nitrogen content of the water. <code>NUTRIENTS_ITP.x</code>.</p></li><li><p><code>μ_max</code> [1/d]: Sargassum maximum growth rate. Value: <code>0.1</code></p></li><li><p><code>m</code> [1/d]: Sargassum mortality rate. Value: <code>0.05</code></p></li><li><p><code>k_N</code> [mmol N/m^3]: Sargassum nutrient (N) uptake half saturation. Value: <code>0.012</code></p></li><li><p><code>T_min</code> [°C]: Minimum temperature for Sargassum growth. Value: <code>10.0</code></p></li><li><p><code>T_max</code> [°C]: Minimum temperature for Sargassum growth. Value: <code>40.0</code></p></li><li><p><code>clumps_limits</code>: A <code>Tuple</code> of the form <code>(n_clumps_min, n_clumps_max)</code>. These impose hard lower and upper limits on the total number of clumps that can exist at any specific time (the total number of clumps that can have ever existed - i.e. <code>n_clumps_tot</code> of <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a> - may be higher.) Default: <code>(0, 10000)</code>.</p></li><li><p><code>S_min</code>: A clump dies when <code>S &lt; S_min</code>. Default <code>0.0</code>.</p></li><li><p><code>S_max</code>: A clump grows when <code>S &gt; S_max</code>. Default <code>1.0</code>.</p></li><li><p><code>dSdt</code>: Compute the rate of change of the &quot;amount&quot; <code>S</code> according to the Brooks model.</p></li></ul><p><strong>dSdt</strong></p><p>This function is of the form <code>dSdt = growth_factors - death_factors</code>.</p><ul><li><p><code>growth_factors = μ_max * temperature_factor * nutrients_factor</code></p></li><li><p><code>death_factors = m</code></p></li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BrooksModelParameters(; parameters...)</span></span></code></pre></div><p>where each parameter is a kwarg with the default values given above.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/growth-death.jl#L48-L78" target="_blank" rel="noreferrer">source</a></p>',11))]),a("details",ke,[a("summary",null,[e[183]||(e[183]=a("a",{id:"Sargassum.ImmortalModel",href:"#Sargassum.ImmortalModel"},[a("span",{class:"jlbinding"},"Sargassum.ImmortalModel")],-1)),e[184]||(e[184]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[185]||(e[185]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImmortalModel{D}</span></span></code></pre></div><p>An <code>AbstractGrowthDeathModel</code> such that no growth or death occurs.</p><p><strong>Fields</strong></p><ul><li><p><code>S</code>: The amount parameter. Unused for an <code>ImmortalModel</code>.</p></li><li><p><code>S_gen</code>. The amount generator. Unused for an <code>ImmortalModel</code>.</p></li></ul><p><strong>Constructors</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ImmortalModel(n_clumps_max; S_gen = Dirac(0.0))</span></span></code></pre></div><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/growth-death.jl#L15-L28" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",ye,[a("summary",null,[e[186]||(e[186]=a("a",{id:"Sargassum.grow!-Tuple{SciMLBase.DEIntegrator}",href:"#Sargassum.grow!-Tuple{SciMLBase.DEIntegrator}"},[a("span",{class:"jlbinding"},"Sargassum.grow!")],-1)),e[187]||(e[187]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[188]||(e[188]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grow!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(integrator, location)</span></span></code></pre></div><p>Add a clump to the <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a>, <code>rp = integrator.p</code>, with an index equal to <code>rp.n_clumps_tot + 1</code> and also update <code>rp.living</code> appropriately.</p><p><strong>Location</strong></p><p><code>location</code> can be a pre-defined flag, an integer, or a <code>[x, y]</code> vector. The default value is the flag <code>&quot;parent&quot;</code>.</p><p>The possible flags are:</p><ul><li><p><code>&quot;parent&quot;</code>: A parent clump is chosen randomly among clumps that already exist, and the new clump is placed a distance <code>integrator.rp.springs.L</code> away and at a random angle from it.</p></li><li><p><code>&quot;com&quot;</code>: The same as <code>&quot;parent&quot;</code>, except the centre location is at the center of mass of the raft.</p></li></ul><p>If <code>location</code> is an <code>Integer</code> with value <code>i</code>, then the new clump will be grown with <code>i</code>th clump (by vector location) as its parent.</p><p>If <code>location</code> is a <code>Vector{&lt;:Real}</code>, the new clump will be placed at those <code>[x, y]</code> coordinates.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/control.jl#L25-L41" target="_blank" rel="noreferrer">source</a></p>',9))]),a("details",ve,[a("summary",null,[e[189]||(e[189]=a("a",{id:"Sargassum.kill!-Tuple{SciMLBase.DEIntegrator, Integer}",href:"#Sargassum.kill!-Tuple{SciMLBase.DEIntegrator, Integer}"},[a("span",{class:"jlbinding"},"Sargassum.kill!")],-1)),e[190]||(e[190]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[191]||(e[191]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kill!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(integrator, i)</span></span></code></pre></div><p>Remove the clump with index <code>i</code> from <code>integrator</code>.</p><p>Can be applied as kill!(integrator, inds) in which case each <code>i in inds</code> will be killed in order.</p><p>For the <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a>, <code>rp = integrator.p</code>, update <code>rp.living</code> appropriately.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/control.jl#L1-L9" target="_blank" rel="noreferrer">source</a></p>',5))]),e[242]||(e[242]=a("h2",{id:"simulation",tabindex:"-1"},[s("Simulation "),a("a",{class:"header-anchor",href:"#simulation","aria-label":'Permalink to "Simulation"'},"​")],-1)),a("details",Se,[a("summary",null,[e[192]||(e[192]=a("a",{id:"Sargassum.FastRaft!-Tuple{Any, Any, RaftParameters, Any}",href:"#Sargassum.FastRaft!-Tuple{Any, Any, RaftParameters, Any}"},[a("span",{class:"jlbinding"},"Sargassum.FastRaft!")],-1)),e[193]||(e[193]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[194]||(e[194]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FastRaft!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(du, u, p, t)</span></span></code></pre></div><p>When integrated, produces a result (nearly) identical to <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Raft!-Tuple{Any, Any, RaftParameters, Any}"><code>Raft!</code></a>, but is generally faster at the expense of a more front-loaded computation due to the requirement of additional interpolants.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/physics.jl#L53-L58" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",je,[a("summary",null,[e[195]||(e[195]=a("a",{id:"Sargassum.Leeway!-Tuple{Any, Any, RaftParameters, Any}",href:"#Sargassum.Leeway!-Tuple{Any, Any, RaftParameters, Any}"},[a("span",{class:"jlbinding"},"Sargassum.Leeway!")],-1)),e[196]||(e[196]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[197]||(e[197]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Leeway!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(du, u, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RaftParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t)</span></span></code></pre></div><p>Compute the right-hand-side of the differential equation controlling the motion of raft particles whose velocities are equal to <code>u = v_water + α v_wind</code>.</p><p>The parameters <code>p</code> are given by <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a>, but only <code>p.α</code> is used.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/physics.jl#L89-L96" target="_blank" rel="noreferrer">source</a></p>',4))]),a("details",Ee,[a("summary",null,[e[198]||(e[198]=a("a",{id:"Sargassum.Raft!-Tuple{Any, Any, RaftParameters, Any}",href:"#Sargassum.Raft!-Tuple{Any, Any, RaftParameters, Any}"},[a("span",{class:"jlbinding"},"Sargassum.Raft!")],-1)),e[199]||(e[199]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[200]||(e[200]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Raft!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(du, u, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RaftParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t)</span></span></code></pre></div><p>Compute the right-hand-side of the differential equation controlling the motion of a raft with parameters given by <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a>.</p><p>The solution vector <code>u</code> is a <code>2 x N</code> <code>Matrix</code> of the form <code>[x1 x2 ... xN ; y1 y2 ... yN]</code> giving the coordinates of each clump.</p><p>For integrating using a leeway velocity, <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Leeway!-Tuple{Any, Any, RaftParameters, Any}"><code>Leeway!</code></a> should be used.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/physics.jl#L1-L10" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",Te,[a("summary",null,[e[201]||(e[201]=a("a",{id:"Sargassum.simulate-Tuple{RaftParameters}",href:"#Sargassum.simulate-Tuple{RaftParameters}"},[a("span",{class:"jlbinding"},"Sargassum.simulate")],-1)),e[202]||(e[202]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[203]||(e[203]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">simulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rp; leeway, alg, abstol, reltol, showprogress, dt, return_raw)</span></span></code></pre></div><p>Simulate a Sargassum raft with <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a> <code>rp</code> and return a <a href="/Sargassum.jl/dev/simulation-api#Sargassum.RaftTrajectory"><code>RaftTrajectory</code></a>.</p><p>This function modifies the fields of <code>rp</code> significantly.</p><p><strong>Arguments</strong></p><ul><li><code>rp</code>: A <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a> defining the raft.</li></ul><p><strong>Optional Arguments</strong></p><ul><li><p><code>leeway</code>: Use <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Leeway!-Tuple{Any, Any, RaftParameters, Any}"><code>Leeway!</code></a> to integrate particles with no springs or inertia. Default <code>false</code>.</p></li><li><p><code>alg</code>: The integration algorithm to use, default <a href="https://docs.sciml.ai/DiffEqDocs/stable/solvers/ode_solve/" target="_blank" rel="noreferrer"><code>Tsit5()</code></a>.</p></li><li><p><code>abstol</code>: The absolute tolerance of integration; default <code>nothing</code>.</p></li><li><p><code>reltol</code>: The relative tolerance of integration; default <code>nothing</code>.</p></li><li><p><code>showprogress</code>: If <code>true</code>, print a status indicator of the progress of the integration. Default <code>false</code>.</p></li><li><p><code>dt</code>: The solution trajectories are uniformized to be spaced in time by increments of <code>dt</code>. Note that the units of this quantity are implicity <code>UNITS[&quot;time&quot;]</code>. Default <code>0.1</code>.</p></li><li><p><code>return_raw</code>: If true, return the result of <code>OrdinaryDiffEq.solve</code>, rather than a <a href="/Sargassum.jl/dev/simulation-api#Sargassum.RaftTrajectory"><code>RaftTrajectory</code></a>. Use this if you would like to manipulate the solution directly. Default <code>false</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/main.jl#L1-L21" target="_blank" rel="noreferrer">source</a></p>',8))]),a("details",Ce,[a("summary",null,[e[204]||(e[204]=a("a",{id:"Sargassum.RaftTrajectory",href:"#Sargassum.RaftTrajectory"},[a("span",{class:"jlbinding"},"Sargassum.RaftTrajectory")],-1)),e[205]||(e[205]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[206]||(e[206]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RaftTrajectory</span></span></code></pre></div><p>A container for the data of a every clump&#39;s trajectory in a raft, as well as its center of mass.</p><p><strong>Fields</strong></p><ul><li><p><code>trajectories</code>: A <code>Dict</code> mapping clump indices to their corresponding <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Trajectory"><code>Trajectory</code></a>.</p></li><li><p><code>t</code>: A vector of all time possible slices across the clump trajectories.</p></li><li><p><code>n_clumps</code>: A vector such that <code>n_clumps[i]</code> is the number of clumps that are alive at time <code>t[i]</code>.</p></li><li><p><code>com</code>: A <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Trajectory"><code>Trajectory</code></a> corresponding to the center of mass of the raft.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RaftTrajectory(; trajectories, n_clumps, com)</span></span></code></pre></div><p>The field <code>t</code> is set to <code>com.t</code>.</p><p><strong>Plotting</strong></p><p>This object can be <a href="/Sargassum.jl/dev/plotting-api#Sargassum.viz"><code>viz</code></a> and <a href="/Sargassum.jl/dev/plotting-api#Sargassum.viz!"><code>viz!</code></a>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/trajectories.jl#L54-L74" target="_blank" rel="noreferrer">source</a></p>',10))]),a("details",xe,[a("summary",null,[e[207]||(e[207]=a("a",{id:"Sargassum.Trajectory",href:"#Sargassum.Trajectory"},[a("span",{class:"jlbinding"},"Sargassum.Trajectory")],-1)),e[208]||(e[208]=s()),o(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[209]||(e[209]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Trajectory</span></span></code></pre></div><p>A container for the data of a single clump&#39;s trajectory.</p><p><strong>Fields</strong></p><ul><li><p><code>xy</code>: A <code>Matrix</code> of size <code>N x 2</code> such that <code>xy[i,:]</code> gives the <code>[x, y]</code> or <code>[lon, lat]</code> coordinates at the clump at time <code>t[i]</code>.</p></li><li><p><code>t</code>: A <code>Vector</code> of length <code>N</code> giving the time values of the trajectory.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Trajectory(xy, t)</span></span></code></pre></div><p>Construct a Trajectory directly from <code>xy</code> and <code>t</code> as defined above.</p><p><strong>Plotting</strong></p><p>This object can be <a href="/Sargassum.jl/dev/plotting-api#Sargassum.viz"><code>viz</code></a> and <a href="/Sargassum.jl/dev/plotting-api#Sargassum.viz!"><code>viz!</code></a>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/trajectories.jl#L1-L20" target="_blank" rel="noreferrer">source</a></p>',10))]),a("details",Fe,[a("summary",null,[e[210]||(e[210]=a("a",{id:"Sargassum.bins-Tuple{RaftTrajectory, SargassumDistribution}",href:"#Sargassum.bins-Tuple{RaftTrajectory, SargassumDistribution}"},[a("span",{class:"jlbinding"},"Sargassum.bins")],-1)),e[211]||(e[211]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[212]||(e[212]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(raft_trajectory, dist; return_xy_bins)</span></span></code></pre></div><p>Equivalent to <code>bins(raft_trajectory, x_bins, y_bins</code> where <code>x_bins</code> and <code>y_bins</code> are computed automatically from the <code>SargassumDistribution</code>, <code>dist.lon</code> and <code>dist.lat</code>.</p><p>This assumes that <code>dist.lon</code> and <code>dist.lat</code> give the central locations of the <code>dist</code> bins.</p><p><strong>Optional Arguments</strong></p><ul><li><code>return_xy_bins</code>: A <code>Bool</code> such that, if <code>true</code>, the tuple <code>(x_bins, y_bins, bins)</code> is returned instead of just <code>bins</code>. Default <code>false</code>.</li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/trajectories.jl#L122-L133" target="_blank" rel="noreferrer">source</a></p>',6))]),a("details",Ae,[a("summary",null,[e[213]||(e[213]=a("a",{id:"Sargassum.bins-Tuple{RaftTrajectory, StepRangeLen, StepRangeLen}",href:"#Sargassum.bins-Tuple{RaftTrajectory, StepRangeLen, StepRangeLen}"},[a("span",{class:"jlbinding"},"Sargassum.bins")],-1)),e[214]||(e[214]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[215]||(e[215]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(raft_trajectory, x_bins, y_bins)</span></span></code></pre></div><p>Return a matrix <code>mat</code> such that <code>mat[i, j]</code> is the number of points in <code>raft_trajectory</code> that, at any time, were inside the rectangle <code>lon ∈ (x_bins[i], x_bins[i + 1])</code>, <code>lat ∈ (y_bins[i], y_bins[i + 1])</code>.</p><p>Both <code>x_bins</code> and <code>y_bins</code> should be <code>StepRangeLen</code>, i.e. of the form <code>range(start, stop, length = L)</code>. Then, <code>mat</code> has dimensions <code>length(x_bins) - 1 x length(y_bins) - 1</code>.</p><p>No coversion from or to spherical coordinates is done on <code>x_bins</code> and <code>y_bins</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/trajectories.jl#L92-L102" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",Re,[a("summary",null,[e[216]||(e[216]=a("a",{id:"Sargassum.time_slice-Tuple{Trajectory, Tuple{Real, Real}}",href:"#Sargassum.time_slice-Tuple{Trajectory, Tuple{Real, Real}}"},[a("span",{class:"jlbinding"},"Sargassum.time_slice")],-1)),e[217]||(e[217]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[218]||(e[218]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time_slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(traj, tspan)</span></span></code></pre></div><p>Return a new <a href="/Sargassum.jl/dev/simulation-api#Sargassum.Trajectory"><code>Trajectory</code></a> consisting of points and times of <code>traj</code> that are between <code>first(tspan)</code> and <code>last(tspan)</code>. The result <code>Trajectory</code> may be empty.</p><p>Can also be applied to a <a href="/Sargassum.jl/dev/simulation-api#Sargassum.RaftTrajectory"><code>RaftTrajectory</code></a> in which case <code>time_slice</code> is applied to each member <code>Trajectory</code>.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/trajectories.jl#L37-L44" target="_blank" rel="noreferrer">source</a></p>',4))]),e[243]||(e[243]=a("h2",{id:"i-o",tabindex:"-1"},[s("I/O "),a("a",{class:"header-anchor",href:"#i-o","aria-label":'Permalink to "I/O"'},"​")],-1)),a("details",Ie,[a("summary",null,[e[219]||(e[219]=a("a",{id:"Sargassum.rtr2mat-Tuple{RaftTrajectory, String}",href:"#Sargassum.rtr2mat-Tuple{RaftTrajectory, String}"},[a("span",{class:"jlbinding"},"Sargassum.rtr2mat")],-1)),e[220]||(e[220]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[221]||(e[221]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rtr2mat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rtr, outfile; force)</span></span></code></pre></div><p>Write the <a href="/Sargassum.jl/dev/simulation-api#Sargassum.RaftTrajectory"><code>RaftTrajectory</code></a> in <code>rtr</code> to <code>outfile</code> which must be a <code>.mat</code> file.</p><p>This writes the raw, unbinned trajectory data.</p><p><strong>Optional Arguments</strong></p><ul><li><code>force</code>: If <code>true</code>, delete <code>outfile</code> if it already exists. Default <code>false</code>.</li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/io.jl#L1-L11" target="_blank" rel="noreferrer">source</a></p>',6))]),a("details",we,[a("summary",null,[e[222]||(e[222]=a("a",{id:"Sargassum.rtr2nc-Tuple{RaftTrajectory, String, SargassumDistribution}",href:"#Sargassum.rtr2nc-Tuple{RaftTrajectory, String, SargassumDistribution}"},[a("span",{class:"jlbinding"},"Sargassum.rtr2nc")],-1)),e[223]||(e[223]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[224]||(e[224]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rtr2nc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rtr, outfile, dist; force)</span></span></code></pre></div><p>Write the <a href="/Sargassum.jl/dev/simulation-api#Sargassum.RaftTrajectory"><code>RaftTrajectory</code></a> in <code>rtr</code> to <code>outfile</code> which must be a <code>.nc</code> file.</p><p>The data are binned by passing <code>dist</code> to <a href="/Sargassum.jl/dev/simulation-api#Sargassum.bins-Tuple{RaftTrajectory, SargassumDistribution}"><code>bins</code></a>, i.e. the bins are chosen to be the same as the bins of <code>dist</code>.</p><p>It is required that <code>rtr.t</code> is linearly spaced.</p><p><strong>Optional Arguments</strong></p><ul><li><code>force</code>: If <code>true</code>, delete <code>outfile</code> if it already exists. Default <code>false</code>.</li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/io.jl#L130-L143" target="_blank" rel="noreferrer">source</a></p>',7))]),a("details",_e,[a("summary",null,[e[225]||(e[225]=a("a",{id:"Sargassum.rtr2nc-Tuple{RaftTrajectory, String, StepRangeLen, StepRangeLen}",href:"#Sargassum.rtr2nc-Tuple{RaftTrajectory, String, StepRangeLen, StepRangeLen}"},[a("span",{class:"jlbinding"},"Sargassum.rtr2nc")],-1)),e[226]||(e[226]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[227]||(e[227]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rtr2nc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rtr, outfile, lon_bins, lat_bins; force)</span></span></code></pre></div><p>Write the <a href="/Sargassum.jl/dev/simulation-api#Sargassum.RaftTrajectory"><code>RaftTrajectory</code></a> in <code>rtr</code> to <code>outfile</code> which must be a <code>.nc</code> file.</p><p>The data are binned by passing <code>lon_bins</code> and <code>lat_bins</code> to <a href="/Sargassum.jl/dev/simulation-api#Sargassum.bins-Tuple{RaftTrajectory, SargassumDistribution}"><code>bins</code></a>.</p><p>It is required that <code>rtr.t</code> is linearly spaced.</p><p><strong>Optional Arguments</strong></p><ul><li><code>force</code>: If <code>true</code>, delete <code>outfile</code> if it already exists. Default <code>false</code>.</li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/io.jl#L92-L104" target="_blank" rel="noreferrer">source</a></p>',7))]),e[244]||(e[244]=a("h2",{id:"examples",tabindex:"-1"},[s("Examples "),a("a",{class:"header-anchor",href:"#examples","aria-label":'Permalink to "Examples"'},"​")],-1)),a("details",De,[a("summary",null,[e[228]||(e[228]=a("a",{id:"Sargassum.QuickRaftParameters-Tuple{InitialConditions}",href:"#Sargassum.QuickRaftParameters-Tuple{InitialConditions}"},[a("span",{class:"jlbinding"},"Sargassum.QuickRaftParameters")],-1)),e[229]||(e[229]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[230]||(e[230]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QuickRaftParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ics; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate a <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a> object to integrate from <code>ics::InitialConditions</code>.</p><p><strong>Optional Arguments</strong></p><ul><li><p><code>use_biology</code>: If <code>true</code>, include biological effects in the simulation. Default <code>false</code>.</p></li><li><p><code>n_connections</code>: The number of inter-clump nearest neighbor connectionsto form. Default <code>2</code>.</p></li><li><p><code>delta</code>: The bouyancy of the particle. Default: <code>1.14</code>.</p></li><li><p><code>tau</code>: The inertial response time, measured in days. Default <code>0.0103</code>.</p></li><li><p><code>sigma</code>: The Stokes drift coefficient. Default <code>1.20</code>.</p></li><li><p><code>A_spring</code>: The magnitude of the eBOMB spring stiffness. Default <code>15.1</code>.</p></li><li><p><code>lambda_spring</code>: A factor multiplying the springs&#39; natural lengths. Default <code>2.97</code>.</p></li><li><p><code>mu_max</code>: Sargassum maximum growth rate, measured in inverse days. Default <code>0.00542</code>.</p></li><li><p><code>m</code>: Sargassum mortality rate, measured in inverse days. Default <code>0.00403</code>.</p></li><li><p><code>k_N</code>: Sargassum nutrient (N) uptake half saturation, measured in mmol N/m^3. Default <code>0.000129</code>.</p></li><li><p><code>S_min</code>: A clump dies when it&#39;s &quot;amount&quot; drops below this value. Default <code>-0.00481</code>.</p></li><li><p><code>S_max</code>: A clump dies when it&#39;s &quot;amount&quot; grows above this value. Default <code>0.001</code>.</p></li><li><p><code>geometry</code>: A <code>Bool</code> that toggles whether to apply the geometric correction factors <a href="/Sargassum.jl/dev/simulation-api#Sargassum.γ_sphere-Tuple{Real}"><code>γ_sphere</code></a> and <a href="/Sargassum.jl/dev/simulation-api#Sargassum.τ_sphere-Tuple{Real}"><code>τ_sphere</code></a>. Note that the simulation still uses the available interpolants, therefore if the interpolants have been created with geometric corrections included, but <code>RaftParameters</code> is created with <code>geometry == false</code>, the result will be a mixture of corrected and uncorrected terms. Default <code>true</code>.</p></li><li><p><code>verbose</code>: Whether to print out clump growths/deaths at each step. Default <code>false</code>.</p></li></ul><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/examples.jl#L27-L48" target="_blank" rel="noreferrer">source</a></p>',5))]),a("details",Le,[a("summary",null,[e[231]||(e[231]=a("a",{id:"Sargassum.QuickRaftParameters-Tuple{}",href:"#Sargassum.QuickRaftParameters-Tuple{}"},[a("span",{class:"jlbinding"},"Sargassum.QuickRaftParameters")],-1)),e[232]||(e[232]=s()),o(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[233]||(e[233]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QuickRaftParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Return a simple <a href="/Sargassum.jl/dev/simulation-api#RaftParameters"><code>RaftParameters</code></a> with fixed parameters suitable for testing purposes.</p><p><a href="https://github.com/70Gage70/Sargassum.jl/blob/5e97eb1997c13a7f79c03b6f1a234a3c90328ab9/src/Simulation/examples.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3))]),e[245]||(e[245]=t('<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div>',1))])}const We=l(p,[["render",Pe]]);export{Ue as __pageData,We as default};
