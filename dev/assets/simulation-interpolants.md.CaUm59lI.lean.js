import{_ as h,C as t,c as o,o as r,ai as d,G as e,w as n,j as s,a as i}from"./chunks/framework.BImBjA36.js";const u="/Sargassum.jl/dev/assets/auwzhnz.BlQJpU53.png",v=JSON.parse('{"title":"Interpolants","description":"","frontmatter":{},"headers":[],"relativePath":"simulation-interpolants.md","filePath":"simulation-interpolants.md","lastUpdated":null}'),c={name:"simulation-interpolants.md"};function k(g,a,E,m,y,f){const l=t("PluginTabsTab"),p=t("PluginTabs");return r(),o("div",null,[a[7]||(a[7]=d("",44)),e(p,null,{default:n(()=>[e(l,{label:"1. GriddedField"},{default:n(()=>a[0]||(a[0]=[s("p",null,[i("To begin construction of the interpolant, we start with a "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.GriddedField"},[s("code",null,"GriddedField")]),i(" whose job it is to hold the raw data and variable definitions before the actual interpolation in performed. The "),s("code",null,"GriddedField"),i(" constructor takes a single argument, the number of dimensions of the field in question. In this case, "),s("code",null,"3"),i(" since we have a time-dependent field.")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"using"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Unitful")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"using"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Dates")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"gf "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," GriddedField"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"3"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1)])),_:1}),e(l,{label:"2. Adding spatial dimensions"},{default:n(()=>a[1]||(a[1]=[s("p",null,[i("Next we apply "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.add_spatial_dimension!-Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}"},[s("code",null,"add_spatial_dimension!")]),i(" to populate "),s("code",null,"gf"),i(" with the longitude and latitude. The signature for "),s("code",null,"add_spatial_dimension!"),i(" is")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_spatial_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, dim_name_in, dim_name_out, dim_units_in, dim_units_out; transform)")])])])],-1),s("ul",null,[s("li",null,[s("p",null,[s("code",null,"gf"),i(": The "),s("code",null,"GriddedField"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"infile"),i(": The "),s("code",null,"NetCDF"),i(" file holding the raw data.")])]),s("li",null,[s("p",null,[s("code",null,"dim_name_in"),i(": The name (as a "),s("code",null,"String"),i(") of the dimension. In our case this will be "),s("code",null,'"longitude"'),i(" and "),s("code",null,'"latitude"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"dim_name_out"),i(": The name (as a "),s("code",null,"Symbol"),i(") of the output dimension. In our case this will be "),s("code",null,":lon"),i(" and "),s("code",null,":lat"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"dim_units_in"),i(": The units of the dimension. In this case, it is "),s("code",null,'u"¬∞"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"dim_units_out"),i(": The kind of quantity this is; should be one of the keys of "),s("a",{href:"/Sargassum.jl/dev/units-api#Sargassum.UNITS"},[s("code",null,"UNITS")]),i(". In this case, it is "),s("code",null,'"degrees"'),i(".")])])],-1),s("p",null,"Therefore, we have",-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_spatial_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"longitude"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":lon"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"¬∞"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"degrees"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_spatial_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"latitude"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":lat"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"¬∞"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"degrees"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1)])),_:1}),e(l,{label:"3. Adding time dimensions"},{default:n(()=>a[2]||(a[2]=[s("p",null,[i("Next we apply "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.add_temporal_dimension!-Union{Tuple{N}, Tuple{GriddedField, String, String, Symbol, DateTime, Unitful.FreeUnits{N, ùêì, nothing}}} where N"},[s("code",null,"add_temporal_dimension!")]),i(" to populate "),s("code",null,"gf"),i(" with the time variable. The signature for "),s("code",null,"add_temporal_dimension!"),i(" is")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_temporal_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, time_name_in, time_name_out, time_start, time_period; transform, force)")])])])],-1),s("ul",null,[s("li",null,[s("p",null,[s("code",null,"gf"),i(": The "),s("code",null,"GriddedField"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"infile"),i(": The "),s("code",null,"NetCDF"),i(" file holding the raw data.")])]),s("li",null,[s("p",null,[s("code",null,"time_name_in"),i(": The name (as a "),s("code",null,"String"),i(") of the dimension. In our case this will be "),s("code",null,'"time"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"time_name_out"),i(": The name (as a "),s("code",null,"Symbol"),i(") of the output dimension. In our case this will be "),s("code",null,":t"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"time_start"),i(" and "),s("code",null,"time_period"),i(": The units of the time dimension are "),s("code",null,"time_period"),i(" since "),s("code",null,"time_start"),i(". In our case, "),s("code",null,"time_period"),i(" will be "),s("code",null,'u"hr"'),i(" and "),s("code",null,"time_start"),i(" will be "),s("code",null,"DateTime(1900, 1, 1)"),i(".")])])],-1),s("p",null,"Therefore, we have",-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_temporal_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"time"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":t"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"DateTime"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1900"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"), "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"hr"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1)])),_:1}),e(l,{label:"4. Adding fields"},{default:n(()=>a[3]||(a[3]=[s("p",null,[i("Next we apply "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.add_field!-Union{Tuple{I}, Tuple{N}, Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}} where {N, I<:Integer}"},[s("code",null,"add_field!")]),i(" to populate "),s("code",null,"gf"),i(" with the actual fields - velocities in this case. The signature of "),s("code",null,"add_field!"),i(" is")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_field!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, field_name_in, field_name_out, field_units_in, field_units_out; kwargs"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"..."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1),s("ul",null,[s("li",null,[s("p",null,[s("code",null,"gf"),i(": The "),s("code",null,"GriddedField"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"infile"),i(": The "),s("code",null,"NetCDF"),i(" file holding the raw data.")])]),s("li",null,[s("p",null,[s("code",null,"field_name_in"),i(": The name (as a "),s("code",null,"String"),i(") of the field. In our case this will be "),s("code",null,'"u10"'),i(" and "),s("code",null,'"v10"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"field_name_out"),i(": The name (as a "),s("code",null,"Symbol"),i(") of the output field. In our case this will be "),s("code",null,'":u"'),i(" and "),s("code",null,'":v"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"field_units_in"),i(": The units of the field. In this case, it is "),s("code",null,'u"m/s"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"field_units_out"),i(": The kind of quantity this is; should be one of the keys of "),s("a",{href:"/Sargassum.jl/dev/units-api#Sargassum.UNITS"},[s("code",null,"UNITS")]),i(". In this case, it is "),s("code",null,'"speed"'),i(".")])])],-1),s("p",null,"Therefore, we have",-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_field!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"u10"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":u"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"m/s"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"speed"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_field!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"v10"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":v"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"m/s"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"speed"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1)])),_:1}),e(l,{label:"5. Post-processing"},{default:n(()=>a[4]||(a[4]=[s("p",null,[i("We now apply the post-processing functions "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.ranges_increasing!-Tuple{GriddedField}"},[s("code",null,"ranges_increasing!")]),i(" and "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.sph2xy!-Tuple{GriddedField}"},[s("code",null,"sph2xy!")]),i(". The function "),s("code",null,"ranges_increasing!"),i(" ensures that the dimensions are increasing lists. It is not required if the dimensions are already increasing, but is very inexpensive. Since the dimensions are longitude and latitude (spherical coordinates), we use "),s("code",null,"sph2xy!"),i(" to convert the dimensions to equirectangular coordinates as required by the final field.")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"ranges_increasing!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"sph2xy!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf)")])])])],-1)])),_:1}),e(l,{label:"6. InterpolatedField"},{default:n(()=>a[5]||(a[5]=[s("p",null,[i("The last thing required is to compute the "),s("code",null,"InterpolatedField"),i(". Since this is a time-dependent field, material derivatives will be required. These can be added using "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.add_derivatives!-Tuple{InterpolatedField}"},[s("code",null,"add_derivatives!")]),i(".")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"itp "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," InterpolatedField"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_derivatives!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(itp)")])])])],-1)])),_:1}),e(l,{label:"7. Saving"},{default:n(()=>a[6]||(a[6]=[s("p",null,[i("Now that the "),s("code",null,"InterpolatedField"),i(" is created, we should save it for future use. For this we use the Julia package "),s("a",{href:"https://github.com/JuliaIO/JLD2.jl",target:"_blank",rel:"noreferrer"},[s("code",null,"JLD2")]),i(". The relevant function is "),s("code",null,"jldsave(filename, variable_name = variable)"),i(". We should use "),s("code",null,"WIND_ITP"),i(" as the variable name to be consistent with the expected interpolant names.")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wind_test_file "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "WIND_ITP_TEST.jld2"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"jldsave"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(wind_test_file, WIND_ITP "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," itp)")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=d("",5))])}const _=h(c,[["render",k]]);export{v as __pageData,_ as default};
