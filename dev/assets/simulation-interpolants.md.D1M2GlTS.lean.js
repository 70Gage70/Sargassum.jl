import{_ as h,c as o,a4 as t,G as e,w as n,B as d,o as r,j as s,a as i}from"./chunks/framework.CsgBfYqC.js";const u="/Sargassum.jl/dev/assets/lbdrfmh.DnYks1dD.png",v=JSON.parse('{"title":"Interpolants","description":"","frontmatter":{},"headers":[],"relativePath":"simulation-interpolants.md","filePath":"simulation-interpolants.md","lastUpdated":null}'),c={name:"simulation-interpolants.md"};function k(g,a,m,E,y,f){const l=d("PluginTabsTab"),p=d("PluginTabs");return r(),o("div",null,[a[7]||(a[7]=t(`<h1 id="interpolants" tabindex="-1">Interpolants <a class="header-anchor" href="#interpolants" aria-label="Permalink to &quot;Interpolants&quot;">​</a></h1><p>Sargassum.jl comes with 7 global variables (technically <a href="https://docs.julialang.org/en/v1/base/c/#Core.Ref" target="_blank" rel="noreferrer">Ref</a>s) that store computed interpolants. These are <a href="/Sargassum.jl/dev/simulation-api#Sargassum.WATER_ITP"><code>WATER_ITP</code></a>, <a href="/Sargassum.jl/dev/simulation-api#Sargassum.WIND_ITP"><code>WIND_ITP</code></a>, <a href="/Sargassum.jl/dev/simulation-api#Sargassum.STOKES_ITP"><code>STOKES_ITP</code></a>, <a href="/Sargassum.jl/dev/simulation-api#Sargassum.WAVES_ITP"><code>WAVES_ITP</code></a>, <a href="/Sargassum.jl/dev/simulation-api#Sargassum.NUTRIENTS_ITP"><code>NUTRIENTS_ITP</code></a>, <a href="/Sargassum.jl/dev/simulation-api#Sargassum.TEMPERATURE_ITP"><code>TEMPERATURE_ITP</code></a> and <a href="/Sargassum.jl/dev/simulation-api#Sargassum.LAND_ITP"><code>LAND_ITP</code></a>. These variables are initially undefined but default interpolants for the year 2018 are available for download directly from within the package. These default interpolants are useful for testing purposes and for simulations, but are not strictly required.</p><p>Interpolants are <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InterpolatedField"><code>InterpolatedField</code></a> objects. Refer to the <code>InterpolatedField</code> documentation for the full details of this object. Here we will use the interfacing functions that will allow us to avoid dealing with the details.</p><h2 id="Constructing-the-Default-Interpolants" tabindex="-1">Constructing the Default Interpolants <a class="header-anchor" href="#Constructing-the-Default-Interpolants" aria-label="Permalink to &quot;Constructing the Default Interpolants {#Constructing-the-Default-Interpolants}&quot;">​</a></h2><p>The raw data that the interpolants depend on must first be downloaded, and then the interpolants themselves must be constructed. This process only needs to happen once. The main function to accomplish this is <a href="/Sargassum.jl/dev/simulation-api#Sargassum.itps_default_construct-Tuple{}"><code>itps_default_construct</code></a>. This function takes no argument, but has a keyword <code>download</code>, such that if <code>download = true</code> is passed, the raw data will be downloaded. If the data have already been downloaded, <code>itps_default_construct</code> will rebuild the interpolants. An easy way to check if you have the default interpolants loaded is to simply run <code>WATER_ITP</code>,</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WATER_ITP</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Base.RefValue{InterpolatedField}(InterpolatedField</span></span>
<span class="line"><span>Dimensions = Fields = lon/lat ∈ (-100.9, -39.12) × (0.125, 39.88)]</span></span>
<span class="line"><span>time ∈ (2018-01-01T00:00:00, 2018-12-31T00:00:00))</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>Did you run <code>WATER_ITP</code> and get no output? Try running <code>itps_default_construct()</code>. If this doesn&#39;t work, then run <code>itps_default_construct(download = true)</code>, which will download roughly 1.2 GB of data.</p></div><p>We see that several useful pieces of information have been printed out that let us know the variables, fields and limits that define the interpolant. The other interpolants can be inspected in the same way.</p><h2 id="Inspecting-Interpolants" tabindex="-1">Inspecting Interpolants <a class="header-anchor" href="#Inspecting-Interpolants" aria-label="Permalink to &quot;Inspecting Interpolants {#Inspecting-Interpolants}&quot;">​</a></h2><p>The primary elements of an <a href="/Sargassum.jl/dev/simulation-api#Sargassum.InterpolatedField"><code>InterpolatedField</code></a> are dimensions (things like <code>x</code>, <code>y</code> and <code>t</code>) and fields (things like velocity and temperature). We can use <a href="/Sargassum.jl/dev/simulation-api#Sargassum.dims-Tuple{Ref{InterpolatedField}}"><code>dims</code></a>, <a href="/Sargassum.jl/dev/simulation-api#Sargassum.fields-Tuple{Ref{InterpolatedField}}"><code>fields</code></a> and <a href="/Sargassum.jl/dev/simulation-api#Sargassum.boundary-Tuple{InterpolatedField}"><code>boundary</code></a> to quickly inspect these.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dims</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3-element Vector{Tuple{Symbol, Unitful.Unitlike}}:</span></span>
<span class="line"><span> (:x, km)</span></span>
<span class="line"><span> (:y, km)</span></span>
<span class="line"><span> (:t, d)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>5-element Vector{Tuple{Symbol, Unitful.Unitlike}}:</span></span>
<span class="line"><span> (:u, km d^-1)</span></span>
<span class="line"><span> (:v, km d^-1)</span></span>
<span class="line"><span> (:DDt_x, d^-2)</span></span>
<span class="line"><span> (:DDt_y, d^-2)</span></span>
<span class="line"><span> (:vorticity, d^-2)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">boundary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(-100.9, -39.12, 0.125, 39.88, &quot;2018-01-01T00:00:00&quot;, &quot;2018-12-31T00:00:00&quot;)</span></span></code></pre></div><p>We see each dimension and field along with its units. The <code>boundary</code> function prints its output in the form <code>(lon_min, lon_max, lat_min, lat_max, time_min, time_max)</code> for time-dependent fields and <code>(lon_min, lon_max, lat_min, lat_max)</code> for time-independent fields.</p><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>Why does <code>boundary</code> print longitudes and latitudes if <code>dims</code> indicates that the fields <code>:x</code> and <code>:y</code> have units of <code>km</code>? The answer is that <code>InterpolatedFields</code> are assumed to the in equirectangular coordinates, since these are the coordinates expected by the differential equations we eventually integrate. However, these coordinates are hard to parse, so they are converted to spherical coordinates before printing.</p></div><p>We can access the actual value of dimensions and fields using the <a href="/Sargassum.jl/dev/simulation-api#Sargassum.dim-Tuple{Ref{InterpolatedField}, Symbol}"><code>dim</code></a> and <a href="/Sargassum.jl/dev/simulation-api#Sargassum.field-Tuple{Ref{InterpolatedField}, Symbol}"><code>field</code></a> functions, respectively. The first argument to each is the <code>InterpolatedField</code> and the second argument is one of the <code>Symbol</code>s in the output of <code>dims</code> or <code>fields</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_water </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_water </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t_water </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>6575.0:1.0:6939.0</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u_water </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u_water) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># just print the size, since the actual array is huge</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(248, 160, 365)</span></span></code></pre></div><p>Note that the order that the dimensions appear in in the output of <code>dims</code> is the same order that they are defined for the <code>fields</code>. Here, <code>field(WATER_ITP, :u)</code> is the interpolant of a three dimensional array where the first dimension corresponds to <code>:x</code>:, the second to <code>:y</code> and the third to <code>:t</code>.</p><p>The interpolant fields can be called like functions.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_water[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], y_water[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], t_water[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u_water</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_water[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], y_water[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], t_water[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-42.20153086406751</span></span></code></pre></div><p>Finally, a field from an <code>InterpolatedField</code> can be quickly visualized with <a href="/Sargassum.jl/dev/plotting#Sargassum.viz"><code>viz</code></a>,</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WATER_ITP, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><img src="`+u+`" alt=""></p><h2 id="Building-Your-Own-Interpolants" tabindex="-1">Building Your Own Interpolants <a class="header-anchor" href="#Building-Your-Own-Interpolants" aria-label="Permalink to &quot;Building Your Own Interpolants {#Building-Your-Own-Interpolants}&quot;">​</a></h2><p>Here we will describe the functions that allow the construction of interpolants from raw data. We will recreate <code>WIND_ITP</code> from scratch to see how this is done. In order to follow this tutorial, the default interpolants should be downloaded. The first step is to locate the NetCDF file that contains the data. For this we use the variable <a href="/Sargassum.jl/dev/extra-api#Sargassum._ITPS_RAW_SCRATCH"><code>Sargassum._ITPS_RAW_SCRATCH</code></a> which is generally not intended to be user-facing, but suffice to say that the following command will retrieve the path to the required NetCDF field.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">infile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> joinpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sargassum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ITPS_RAW_SCRATCH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wind.nc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;/home/runner/.julia/scratchspaces/022a0cfc-64d6-4a4c-8da6-19b349a396b3/_ITPS_RAW_SCRATCH/wind.nc&quot;</span></span></code></pre></div><p>Now, we will use the Julia package <a href="https://github.com/JuliaGeo/NetCDF.jl" target="_blank" rel="noreferrer"><code>NetCDF</code></a> to inspect this file via the <code>ncinfo</code> function.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NetCDF</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ncinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(infile)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>##### NetCDF File #####</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/home/runner/.julia/scratchspaces/022a0cfc-64d6-4a4c-8da6-19b349a396b3/_ITPS_RAW_SCRATCH/wind.nc</span></span>
<span class="line"><span></span></span>
<span class="line"><span>##### Dimensions #####</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Name                                                Length</span></span>
<span class="line"><span>--------------------------------------------------------------------------------</span></span>
<span class="line"><span>latitude                                            161</span></span>
<span class="line"><span>time                                                365</span></span>
<span class="line"><span>longitude                                           241</span></span>
<span class="line"><span></span></span>
<span class="line"><span>##### Variables #####</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Name                            Type            Dimensions</span></span>
<span class="line"><span>--------------------------------------------------------------------------------</span></span>
<span class="line"><span>u10                             SHORT           longitude latitude time</span></span>
<span class="line"><span>latitude                        FLOAT           latitude</span></span>
<span class="line"><span>time                            INT             time</span></span>
<span class="line"><span>longitude                       FLOAT           longitude</span></span>
<span class="line"><span>v10                             SHORT           longitude latitude time</span></span>
<span class="line"><span></span></span>
<span class="line"><span>##### Attributes #####</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Variable            Name                Value</span></span>
<span class="line"><span>--------------------------------------------------------------------------------</span></span>
<span class="line"><span>global              history             2023-10-26 20:53:02 GMT by grib_to_net..</span></span>
<span class="line"><span>global              Conventions         CF-1.6</span></span>
<span class="line"><span>u10                 missing_value       -32767</span></span>
<span class="line"><span>u10                 units               m s**-1</span></span>
<span class="line"><span>u10                 add_offset          -0.7626114861385587</span></span>
<span class="line"><span>u10                 long_name           10 metre U wind component</span></span>
<span class="line"><span>u10                 scale_factor        0.0009157213005548016</span></span>
<span class="line"><span>u10                 _FillValue          -32767</span></span>
<span class="line"><span>latitude            units               degrees_north</span></span>
<span class="line"><span>latitude            long_name           latitude</span></span>
<span class="line"><span>time                units               hours since 1900-01-01 00:00:00.0</span></span>
<span class="line"><span>time                calendar            gregorian</span></span>
<span class="line"><span>time                long_name           time</span></span>
<span class="line"><span>longitude           units               degrees_east</span></span>
<span class="line"><span>longitude           long_name           longitude</span></span>
<span class="line"><span>v10                 missing_value       -32767</span></span>
<span class="line"><span>v10                 units               m s**-1</span></span>
<span class="line"><span>v10                 add_offset          1.4802321238623486</span></span>
<span class="line"><span>v10                 long_name           10 metre V wind component</span></span>
<span class="line"><span>v10                 scale_factor        0.0009004983690528532</span></span>
<span class="line"><span>v10                 _FillValue          -32767</span></span></code></pre></div><p>This prints a lot of information, and we should take particular note of</p><p>The names and units of the dimensions</p><ul><li><p><code>latitude</code> in degrees north</p></li><li><p><code>longitude</code> in degrees east</p></li><li><p><code>time</code> in hours since <code>1900-01-01</code></p></li></ul><p>The names and units of the fields</p><ul><li><p><code>u10</code> in m/s</p></li><li><p><code>v10</code> in m/s</p></li></ul><p>Click the tabs to see the steps of the construction.</p>`,44)),e(p,null,{default:n(()=>[e(l,{label:"1. GriddedField"},{default:n(()=>a[0]||(a[0]=[s("p",null,[i("To begin construction of the interpolant, we start with a "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.GriddedField"},[s("code",null,"GriddedField")]),i(" whose job it is to hold the raw data and variable definitions before the actual interpolation in performed. The "),s("code",null,"GriddedField"),i(" constructor takes a single argument, the number of dimensions of the field in question. In this case, "),s("code",null,"3"),i(" since we have a time-dependent field.")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"using"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Unitful")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"using"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Dates")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"gf "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," GriddedField"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"3"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1)])),_:1}),e(l,{label:"2. Adding spatial dimensions"},{default:n(()=>a[1]||(a[1]=[s("p",null,[i("Next we apply "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.add_spatial_dimension!-Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}"},[s("code",null,"add_spatial_dimension!")]),i(" to populate "),s("code",null,"gf"),i(" with the longitude and latitude. The signature for "),s("code",null,"add_spatial_dimension!"),i(" is")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_spatial_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, dim_name_in, dim_name_out, dim_units_in, dim_units_out; transform)")])])])],-1),s("ul",null,[s("li",null,[s("p",null,[s("code",null,"gf"),i(": The "),s("code",null,"GriddedField"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"infile"),i(": The "),s("code",null,"NetCDF"),i(" file holding the raw data.")])]),s("li",null,[s("p",null,[s("code",null,"dim_name_in"),i(": The name (as a "),s("code",null,"String"),i(") of the dimension. In our case this will be "),s("code",null,'"longitude"'),i(" and "),s("code",null,'"latitude"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"dim_name_out"),i(": The name (as a "),s("code",null,"Symbol"),i(") of the output dimension. In our case this will be "),s("code",null,":lon"),i(" and "),s("code",null,":lat"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"dim_units_in"),i(": The units of the dimension. In this case, it is "),s("code",null,'u"°"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"dim_units_out"),i(": The kind of quantity this is; should be one of the keys of "),s("a",{href:"/Sargassum.jl/dev/units-api#Sargassum.UNITS"},[s("code",null,"UNITS")]),i(". In this case, it is "),s("code",null,'"degrees"'),i(".")])])],-1),s("p",null,"Therefore, we have",-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_spatial_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"longitude"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":lon"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"°"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"degrees"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_spatial_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"latitude"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":lat"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"°"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"degrees"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1)])),_:1}),e(l,{label:"3. Adding time dimensions"},{default:n(()=>a[2]||(a[2]=[s("p",null,[i("Next we apply "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.add_temporal_dimension!-Union{Tuple{N}, Tuple{GriddedField, String, String, Symbol, DateTime, Unitful.FreeUnits{N, 𝐓, nothing}}} where N"},[s("code",null,"add_temporal_dimension!")]),i(" to populate "),s("code",null,"gf"),i(" with the time variable. The signature for "),s("code",null,"add_temporal_dimension!"),i(" is")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_temporal_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, time_name_in, time_name_out, time_start, time_period; transform, force)")])])])],-1),s("ul",null,[s("li",null,[s("p",null,[s("code",null,"gf"),i(": The "),s("code",null,"GriddedField"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"infile"),i(": The "),s("code",null,"NetCDF"),i(" file holding the raw data.")])]),s("li",null,[s("p",null,[s("code",null,"time_name_in"),i(": The name (as a "),s("code",null,"String"),i(") of the dimension. In our case this will be "),s("code",null,'"time"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"time_name_out"),i(": The name (as a "),s("code",null,"Symbol"),i(") of the output dimension. In our case this will be "),s("code",null,":t"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"time_start"),i(" and "),s("code",null,"time_period"),i(": The units of the time dimension are "),s("code",null,"time_period"),i(" since "),s("code",null,"time_start"),i(". In our case, "),s("code",null,"time_period"),i(" will be "),s("code",null,'u"hr"'),i(" and "),s("code",null,"time_start"),i(" will be "),s("code",null,"DateTime(1900, 1, 1)"),i(".")])])],-1),s("p",null,"Therefore, we have",-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_temporal_dimension!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"time"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":t"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"DateTime"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1900"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"), "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"hr"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1)])),_:1}),e(l,{label:"4. Adding fields"},{default:n(()=>a[3]||(a[3]=[s("p",null,[i("Next we apply "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.add_field!-Union{Tuple{I}, Tuple{N}, Tuple{GriddedField, String, String, Symbol, Unitful.Unitlike, String}} where {N, I<:Integer}"},[s("code",null,"add_field!")]),i(" to populate "),s("code",null,"gf"),i(" with the actual fields - velocities in this case. The signature of "),s("code",null,"add_field!"),i(" is")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_field!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, field_name_in, field_name_out, field_units_in, field_units_out; kwargs"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"..."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1),s("ul",null,[s("li",null,[s("p",null,[s("code",null,"gf"),i(": The "),s("code",null,"GriddedField"),i(".")])]),s("li",null,[s("p",null,[s("code",null,"infile"),i(": The "),s("code",null,"NetCDF"),i(" file holding the raw data.")])]),s("li",null,[s("p",null,[s("code",null,"field_name_in"),i(": The name (as a "),s("code",null,"String"),i(") of the field. In our case this will be "),s("code",null,'"u10"'),i(" and "),s("code",null,'"v10"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"field_name_out"),i(": The name (as a "),s("code",null,"Symbol"),i(") of the output field. In our case this will be "),s("code",null,'":u"'),i(" and "),s("code",null,'":v"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"field_units_in"),i(": The units of the field. In this case, it is "),s("code",null,'u"m/s"'),i(".")])]),s("li",null,[s("p",null,[s("code",null,"field_units_out"),i(": The kind of quantity this is; should be one of the keys of "),s("a",{href:"/Sargassum.jl/dev/units-api#Sargassum.UNITS"},[s("code",null,"UNITS")]),i(". In this case, it is "),s("code",null,'"speed"'),i(".")])])],-1),s("p",null,"Therefore, we have",-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_field!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"u10"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":u"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"m/s"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"speed"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_field!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf, infile, "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"v10"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},":v"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"u"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"m/s"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"speed"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])],-1)])),_:1}),e(l,{label:"5. Post-processing"},{default:n(()=>a[4]||(a[4]=[s("p",null,[i("We now apply the post-processing functions "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.ranges_increasing!-Tuple{GriddedField}"},[s("code",null,"ranges_increasing!")]),i(" and "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.sph2xy!-Tuple{GriddedField}"},[s("code",null,"sph2xy!")]),i(". The function "),s("code",null,"ranges_increasing!"),i(" ensures that the dimensions are increasing lists. It is not required if the dimensions are already increasing, but is very inexpensive. Since the dimensions are longitude and latitude (spherical coordinates), we use "),s("code",null,"sph2xy!"),i(" to convert the dimensions to equirectangular coordinates as required by the final field.")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"ranges_increasing!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"sph2xy!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf)")])])])],-1)])),_:1}),e(l,{label:"6. InterpolatedField"},{default:n(()=>a[5]||(a[5]=[s("p",null,[i("The last thing required is to compute the "),s("code",null,"InterpolatedField"),i(". Since this is a time-dependent field, material derivatives will be required. These can be added using "),s("a",{href:"/Sargassum.jl/dev/simulation-api#Sargassum.add_derivatives!-Tuple{InterpolatedField}"},[s("code",null,"add_derivatives!")]),i(".")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"itp "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," InterpolatedField"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gf)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"add_derivatives!"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(itp)")])])])],-1)])),_:1}),e(l,{label:"7. Saving"},{default:n(()=>a[6]||(a[6]=[s("p",null,[i("Now that the "),s("code",null,"InterpolatedField"),i(" is created, we should save it for future use. For this we use the Julia package "),s("a",{href:"https://github.com/JuliaIO/JLD2.jl",target:"_blank",rel:"noreferrer"},[s("code",null,"JLD2")]),i(". The relevant function is "),s("code",null,"jldsave(filename, variable_name = variable)"),i(". We should use "),s("code",null,"WIND_ITP"),i(" as the variable name to be consistent with the expected interpolant names.")],-1),s("div",{class:"language-julia vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"julia"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wind_test_file "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "WIND_ITP_TEST.jld2"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"jldsave"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(wind_test_file, WIND_ITP "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," itp)")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=t('<h2 id="Loading-Your-Own-Interpolants" tabindex="-1">Loading Your Own Interpolants <a class="header-anchor" href="#Loading-Your-Own-Interpolants" aria-label="Permalink to &quot;Loading Your Own Interpolants {#Loading-Your-Own-Interpolants}&quot;">​</a></h2><p>We will use the interpolant created in the previous section as an example, i.e. we assume there is a file <code>wind_test_file = &quot;WIND_ITP_TEST.jld2&quot;</code> in the current working directory. We can load the interpolant into memory using <code>load(file, variable)</code> from <code>JLD2</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wind_itp_test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wind_test_file, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WIND_ITP&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>To &quot;activate&quot; this interpolant, we must replace the current wind interpolant. This is accomplished using [<code>update_interpolant!</code>],</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update_interpolant!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WIND_ITP, wind_itp_test)</span></span></code></pre></div>',5))])}const F=h(c,[["render",k]]);export{v as __pageData,F as default};
